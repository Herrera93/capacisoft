/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.edu.cobach.vista;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import mx.edu.cobach.vista.controlador.EventoControlador;

/**
 *
 * @author Alex
 */
public class ListaEventos extends javax.swing.JFrame implements Comunicador {

    private static EventoControlador control;

    private DefaultTableModel modelTablaEvI;
    private DefaultTableModel modelTablaEvF;
    private String[] titulosTablaEv = {"ID", "Numero", "Evento"};
    private final ImageIcon imageLogo;
    //Comunicador con la interfaz grafica
    protected final Comunicador com;
    //Clase con la que estara trabajando la base de datos

    
    /**
     * Creates new form ListaEventos
     */
    public ListaEventos(Comunicador com) {
        this.com = com;
        imageLogo = new ImageIcon(Capacisoft.class.getResource("/mx/edu/cobach/"
                + "vista/recursos/logo.png"));
        setTitle("CapaciSoft-Lista de eventos");
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        control = new EventoControlador(this);
        setIconImage(imageLogo.getImage());

        modelTablaEvI = new DefaultTableModel(titulosTablaEv, 0);
        tablaLisITbl.setModel(modelTablaEvI);
        tablaLisITbl.setColumnSelectionAllowed(false);
        tablaLisITbl.setDragEnabled(false);

        modelTablaEvF = new DefaultTableModel(titulosTablaEv, 0);
        tablaLisFTbl.setModel(modelTablaEvF);
        tablaLisFTbl.setColumnSelectionAllowed(false);
        tablaLisFTbl.setDragEnabled(false);
        
        modelTablaEvI.setDataVector(null, titulosTablaEv);
        TableColumn tc = tablaLisITbl.getColumnModel().getColumn(0);
        tablaLisITbl.getColumnModel().removeColumn(tc);
        tablaLisITbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaLisITbl.getColumnModel().getColumn(0).setPreferredWidth(10);
        tablaLisITbl.getColumnModel().getColumn(1).setPreferredWidth(160);
        tablaLisITbl.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

        modelTablaEvF.setDataVector(null, titulosTablaEv);
        tc = tablaLisFTbl.getColumnModel().getColumn(0);
        tablaLisFTbl.getColumnModel().removeColumn(tc);
        tablaLisFTbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaLisFTbl.getColumnModel().getColumn(0).setPreferredWidth(10);
        tablaLisFTbl.getColumnModel().getColumn(1).setPreferredWidth(160);
        tablaLisFTbl.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        
        cerrar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listaCandidatosLALbl = new javax.swing.JLabel();
        buscarLABtn = new javax.swing.JButton();
        crearTablaBtn = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaLisFTbl = new javax.swing.JTable();
        cancelarLABtn = new javax.swing.JButton();
        listaAsistenciaLALbl = new javax.swing.JLabel();
        nota_LI_Lbl = new javax.swing.JLabel();
        agregarBtn = new javax.swing.JButton();
        agregarTBtn = new javax.swing.JButton();
        eliminarBtn = new javax.swing.JButton();
        nombreLALbl = new javax.swing.JLabel();
        eliminarTBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaLisITbl = new javax.swing.JTable();
        nombreTFd = new javax.swing.JTextField();
        agregarLALbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        listaCandidatosLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listaCandidatosLALbl.setText("Posibles eventos");

        buscarLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buscarLABtn.setText("Buscar");
        buscarLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarLABtnActionPerformed(evt);
            }
        });

        crearTablaBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        crearTablaBtn.setText("Crear Tabla");
        crearTablaBtn.setEnabled(false);
        crearTablaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearTablaBtnActionPerformed(evt);
            }
        });

        tablaLisFTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Numero del empleado", "Nombre del empleado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaLisFTbl.setEnabled(false);
        jScrollPane5.setViewportView(tablaLisFTbl);

        cancelarLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelarLABtn.setText("Cancelar");
        cancelarLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarLABtnActionPerformed(evt);
            }
        });

        listaAsistenciaLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listaAsistenciaLALbl.setText("Eventos seleccionados");

        nota_LI_Lbl.setText("<html>Anada los eventos que el proveedor puede impartir, en la izquierda se muestran todos los eventos y en la derecha los eventos elegidos, se pueden<br>buscar eventos por medio de su nombre, para salir o cancelar el registro presione el botón \"Cancelar\"</html>");

        agregarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        agregarBtn.setText(">");
        agregarBtn.setToolTipText("Seleccioné un empleado para la lista de asistencia");
        agregarBtn.setEnabled(false);
        agregarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBtnActionPerformed(evt);
            }
        });

        agregarTBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        agregarTBtn.setText(">>");
        agregarTBtn.setToolTipText("Agregar todos los empleados");
        agregarTBtn.setEnabled(false);
        agregarTBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarTBtnActionPerformed(evt);
            }
        });

        eliminarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        eliminarBtn.setText("<");
        eliminarBtn.setToolTipText("Seleccioné un empleado a eliminar");
        eliminarBtn.setEnabled(false);
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });

        nombreLALbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreLALbl.setText("Nombre del Evento:");

        eliminarTBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        eliminarTBtn.setText("<<");
        eliminarTBtn.setToolTipText("Eliminar todos los empleados");
        eliminarTBtn.setEnabled(false);
        eliminarTBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarTBtnActionPerformed(evt);
            }
        });

        tablaLisITbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Numero del empleado", "Nombre del empleado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tablaLisITbl);

        nombreTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreTFd.setMaximumSize(new java.awt.Dimension(6, 23));
        nombreTFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreTFdKeyTyped(evt);
            }
        });

        agregarLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        agregarLALbl.setText("Registro");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(agregarTBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eliminarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eliminarTBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agregarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(crearTablaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(agregarLALbl)
                                    .addComponent(nota_LI_Lbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addComponent(nombreLALbl)
                                .addGap(46, 46, 46)
                                .addComponent(nombreTFd, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(buscarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(listaCandidatosLALbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(listaAsistenciaLALbl)
                .addGap(123, 123, 123))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(agregarLALbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nota_LI_Lbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreLALbl)
                    .addComponent(nombreTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaCandidatosLALbl)
                    .addComponent(listaAsistenciaLALbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(agregarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(agregarTBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarTBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(crearTablaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buscarLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarLABtnActionPerformed
        if(nombreTFd.getText().isEmpty()){
            control.buscarTodos();
        }else{
            control.buscarPorNombre(nombreTFd.getText());
        }
    }//GEN-LAST:event_buscarLABtnActionPerformed

    private void crearTablaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearTablaBtnActionPerformed
        String[][] matriz = new String[modelTablaEvF.getRowCount()][modelTablaEvF.getColumnCount()];
        for (int k = 0; k < modelTablaEvF.getRowCount(); k++) {
            for (int j = 0; j < modelTablaEvF.getColumnCount(); j++) {
                matriz[k][j] = modelTablaEvF.getValueAt(k, j) + "";
            }
        }
        matriz[0][0] = matriz[0][0] + "TLE1";
        com.setTabla(matriz);
        List<String> info = new ArrayList<String>();
        info.add("Desbloquear");
        com.setInfo(info);
        this.dispose();
    }//GEN-LAST:event_crearTablaBtnActionPerformed

    private void cancelarLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarLABtnActionPerformed
        if (tablaLisFTbl.getRowCount() > 0) {
            if (JOptionPane.showConfirmDialog(this, "¿Desea cancelar la realizacion "
                + "de la lista de eventos?", "Precaucion",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0) {
                List<String> info = new ArrayList<String>();
                info.add("Desbloquear");
                com.setInfo(info);
                this.dispose();
            }
        } else {
            List<String> info = new ArrayList<String>();
            info.add("Desbloquear");
            com.setInfo(info);
            this.dispose();
        }
    }//GEN-LAST:event_cancelarLABtnActionPerformed

    private void agregarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBtnActionPerformed
        if (tablaLisITbl.getSelectedRow() >= 0) {
            agregarEmpleadosTabla(tablaLisITbl.getSelectedRow());
        }
        if (tablaLisFTbl.getRowCount() > 0) {
            crearTablaBtn.setEnabled(true);
        } else {
            crearTablaBtn.setEnabled(false);
        }
    }//GEN-LAST:event_agregarBtnActionPerformed

    private void agregarTBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarTBtnActionPerformed
        for (int i = 0; i < modelTablaEvI.getRowCount(); i++) {
            agregarEmpleadosTabla(i);
        }
        if (tablaLisFTbl.getRowCount() > 0) {
            crearTablaBtn.setEnabled(true);
        } else {
            crearTablaBtn.setEnabled(false);
        }
    }//GEN-LAST:event_agregarTBtnActionPerformed

    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        if (JOptionPane.showConfirmDialog(this, "¿Desea eliminar el evento de "
            + "la lista de eventos?", "Precaucion",
            JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0) {
        if (tablaLisFTbl.getSelectedRow() >= 0) {
            int cont = 0;
            Object[][] tableData = new Object[tablaLisFTbl.
            getRowCount() - 1][modelTablaEvF.getColumnCount()];
            for (int i = 0; i < tablaLisFTbl.getRowCount(); i++) {
                if (((String) modelTablaEvF.getValueAt(i, 0)).
                    compareTo((String) modelTablaEvF.getValueAt(
                        tablaLisFTbl.getSelectedRow(),
                        0)) != 0) {
                tableData[cont][0] = modelTablaEvF.getValueAt(i, 0);
                tableData[cont][1] = modelTablaEvF.getValueAt(i, 1);
                tableData[cont][2] = modelTablaEvF.getValueAt(i, 2);
                cont++;
            }
        }
        modelTablaEvF.setDataVector(tableData, titulosTablaEv);
        TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
        tablaLisFTbl.getColumnModel().removeColumn(tc);
        tablaLisFTbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaLisFTbl.getColumnModel().getColumn(0).
        setPreferredWidth(10);
        tablaLisFTbl.getColumnModel().getColumn(1).
        setPreferredWidth(160);
        tablaLisFTbl.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        }
        }
        if (tablaLisFTbl.getRowCount() > 0) {
            crearTablaBtn.setEnabled(true);
        } else {
            crearTablaBtn.setEnabled(false);
        }
    }//GEN-LAST:event_eliminarBtnActionPerformed

    private void eliminarTBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarTBtnActionPerformed
        if (JOptionPane.showConfirmDialog(this, "¿Desea eliminar toda la lista "
            + "de eventos?", "Precaucion",
            JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0) {
        modelTablaEvF.setDataVector(null, titulosTablaEv);
        TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
        tablaLisFTbl.getColumnModel().removeColumn(tc);
        tablaLisFTbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaLisFTbl.getColumnModel().getColumn(0).setPreferredWidth(10);
        tablaLisFTbl.getColumnModel().getColumn(1).setPreferredWidth(160);
        tablaLisFTbl.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        }
        if (tablaLisFTbl.getRowCount() > 0) {
            crearTablaBtn.setEnabled(true);
        } else {
            crearTablaBtn.setEnabled(false);
        }
    }//GEN-LAST:event_eliminarTBtnActionPerformed

    private void nombreTFdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTFdKeyTyped
        if (Character.isLetter(evt.getKeyChar())
            || Character.isISOControl(evt.getKeyChar())
            || Character.isWhitespace(evt.getKeyChar())) {
            evt = evt;
        } else {
            evt.consume();
        }
    }//GEN-LAST:event_nombreTFdKeyTyped

  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarBtn;
    private javax.swing.JLabel agregarLALbl;
    private javax.swing.JButton agregarTBtn;
    private javax.swing.JButton buscarLABtn;
    private javax.swing.JButton cancelarLABtn;
    private javax.swing.JButton crearTablaBtn;
    private javax.swing.JButton eliminarBtn;
    private javax.swing.JButton eliminarTBtn;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel listaAsistenciaLALbl;
    private javax.swing.JLabel listaCandidatosLALbl;
    private javax.swing.JLabel nombreLALbl;
    private javax.swing.JTextField nombreTFd;
    private javax.swing.JLabel nota_LI_Lbl;
    private javax.swing.JTable tablaLisFTbl;
    private javax.swing.JTable tablaLisITbl;
    // End of variables declaration//GEN-END:variables

    /**
     * Metodo que permite agregar los empleados en la tabla de asistencia
     */
    private void agregarEmpleadosTabla(int posicionLista) {
        boolean bandera = false;
        tablaLisFTbl.setEnabled(true);
        for (int j = 0; j < modelTablaEvF.getRowCount(); j++) {
            if (modelTablaEvI.getValueAt(posicionLista, 0).
                    equals(modelTablaEvF.getValueAt(j, 0))) {
                bandera = true;
            }
        }
        if (bandera == false) {
            Object[][] tableData = new Object[modelTablaEvF.
                    getRowCount() + 1][modelTablaEvF.getColumnCount()];
            //ciclo que pasa la informacion de la tabla de lista 
            //final para que al final sea agregado el nuevo empleado a 
            //esta matriz
            for (int k = 0; k < modelTablaEvF.getRowCount(); k++) {
                for (int j = 0; j < modelTablaEvF.getColumnCount(); j++) {
                    tableData[k][j] = modelTablaEvF.getValueAt(k, j);
                }
            }
            tableData[modelTablaEvF.getRowCount()][0] = modelTablaEvI.
                    getValueAt(posicionLista, 0);
            tableData[modelTablaEvF.getRowCount()][1] = modelTablaEvI.
                    getValueAt(posicionLista, 1);
            tableData[modelTablaEvF.getRowCount()][2] = modelTablaEvI.
                    getValueAt(posicionLista, 2);
            modelTablaEvF.setDataVector(tableData, titulosTablaEv);
            TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
            tablaLisFTbl.getColumnModel().removeColumn(tc);
            tablaLisFTbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            tablaLisFTbl.getColumnModel().getColumn(0).setPreferredWidth(10);
            tablaLisFTbl.getColumnModel().getColumn(1).setPreferredWidth(160);
            tablaLisFTbl.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        }
        visibilidadOpcT(true);
    }
    
    /**
     * Establece una visibilidad de las opciones de las flechas del panel para
     * enviar la informacion del usuairo.
     *
     * @param visibilidad
     */
    private void visibilidadOpcT(boolean visibilidad) {
        agregarBtn.setEnabled(visibilidad);
        agregarTBtn.setEnabled(visibilidad);
        eliminarBtn.setEnabled(visibilidad);
        eliminarTBtn.setEnabled(visibilidad);
    }
    
    @Override
    public void setMensaje(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje);
    }

    @Override
    public void setTabla(String[][] info) {
        //Se checa si la palabra TLE1 se encuentra dentro de la matriz
        info[0][0] = info[0][0].replaceAll("TLE1", "");
        //Se elimina la palabra TLE1 para que solo quede el id puro
        tablaLisITbl.setEnabled(true);
        modelTablaEvI.setDataVector(info, titulosTablaEv);

        TableColumn tc = tablaLisITbl.getColumnModel().getColumn(0);
        tablaLisITbl.getColumnModel().removeColumn(tc);

        tablaLisITbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaLisITbl.getColumnModel().getColumn(0).setPreferredWidth(10);
        tablaLisITbl.getColumnModel().getColumn(1).setPreferredWidth(160);
        tablaLisITbl.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        visibilidadOpcT(true);
    }

    @Override
    public void setInfo(List info) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setLista(List info, int i) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void llenarDatos(Object implementacionEvento) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    /**
     * Metodo que permite cerrar el JFrane dandole una advertencia al usuario,
     *
     */
    private void cerrar() {
        try {
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter() {
                public void windowClosing(WindowEvent e) {
                    confirmarSalida();
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Metodo que permite cerrar el JFrane dandole una advertencia al usuario,
     *
     */
    private void confirmarSalida() {
        Object[] opciones = {"Aceptar", "Cancelar"};
        int eleccion = JOptionPane.showOptionDialog(
                rootPane, "En realidad desea cerrar la lista de eventos?",
                "Mensaje de Confirmacion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, opciones, "Aceptar");
        if (eleccion == JOptionPane.YES_OPTION) {
            List<String> info = new ArrayList<String>();
            info.add("Desbloquear");
            com.setInfo(info);
            this.dispose();
        }
    }
    
    /**
     * Metodo que permite crear la lista de asistencia ya realizada.
     *
     * @param info
     */
    public void mandarTabla(String[][] info) {
        modelTablaEvF.setDataVector(info, titulosTablaEv);
        TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
        tablaLisFTbl.getColumnModel().removeColumn(tc);
        tablaLisFTbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaLisFTbl.getColumnModel().getColumn(0).setPreferredWidth(10);
        tablaLisFTbl.getColumnModel().getColumn(1).setPreferredWidth(160);
        tablaLisFTbl.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        tablaLisFTbl.setEnabled(true);
        visibilidadOpcT(true);
    }
}
