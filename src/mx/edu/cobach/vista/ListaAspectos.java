/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.edu.cobach.vista;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import mx.edu.cobach.persistencia.entidades.Competencia;
import mx.edu.cobach.vista.controlador.EncuestaControlador;

/**
 *
 * @author Alex
 */
public class ListaAspectos extends javax.swing.JFrame implements Comunicador {

    private Comunicador com;
    private ImageIcon imageLogo;
    private EncuestaControlador control;
    //Modelo del combo box de competencias
    private final DefaultComboBoxModel competenciaModel;
    private final DefaultTableModel aspectosModel, aspectosAModel;
    private final String[] titulosTabla = new String[]{"ID", "Aspectos"};
    
    /**
     * Este constructor recibe el parametro de comunicador, permitiendo que
     * mande los la tablas de la lista de aspectos
     *
     * @param com
     */
    public ListaAspectos(Comunicador com) {
        this.com = com;
        imageLogo = new ImageIcon(Capacisoft.class.getResource("/mx/edu/cobach/"
                + "vista/recursos/logo.png"));
        setTitle("CapaciSoft-Lista de Asistencia");
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        
        control = new EncuestaControlador(this);
        setIconImage(imageLogo.getImage());
        
        aspectosModel = new DefaultTableModel(titulosTabla, 0);
        tablaLisITbl.setModel(aspectosModel);
        tablaLisITbl.setColumnSelectionAllowed(false);
        tablaLisITbl.setDragEnabled(false);

        aspectosAModel = new DefaultTableModel(titulosTabla, 0);
        tablaLisFTbl.setModel(aspectosAModel);
        tablaLisFTbl.setColumnSelectionAllowed(false);
        tablaLisFTbl.setDragEnabled(false);
        
        competenciaModel = new DefaultComboBoxModel();
        competenciaCBx.setModel(competenciaModel);
        
        tabla();
        cerrar();
        
        control.setClass(Competencia.class);
        control.buscarTodosLista(1);
    }

    /**
     * Agrega los datos al modelo de la tabla, también se ocultara la columna id
     * y se le dara se redefinira el ancho de la columna 0.
     *
     * @param info
     */
    private void tabla() {        
        aspectosModel.setDataVector(null, titulosTabla);
        TableColumn tc = tablaLisITbl.getColumnModel().getColumn(0);
        tablaLisITbl.getColumnModel().removeColumn(tc);

        aspectosAModel.setDataVector(null, titulosTabla);
        tc = tablaLisFTbl.getColumnModel().getColumn(0);
        tablaLisFTbl.getColumnModel().removeColumn(tc);
    }
    
    /**
     * Metodo que permite cerrar el JFrane dandole una advertencia al usuario,
     *
     */
    private void cerrar() {
        try {
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter() {
                public void windowClosing(WindowEvent e) {
                    confirmarSalida();
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Metodo que permite cerrar el JFrane dandole una advertencia al usuario,
     *
     */
    private void confirmarSalida() {
        Object[] opciones = {"Aceptar", "Cancelar"};
        int eleccion = JOptionPane.showOptionDialog(
                rootPane, "En realidad desea cerrar la lista de aspectos?",
                "Mensaje de Confirmacion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, opciones, "Aceptar");
        if (eleccion == JOptionPane.YES_OPTION) {
            List<String> info = new ArrayList<String>();
            info.add("Desbloquear");
            com.setInfo(info);
            this.dispose();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        agregarLALbl = new javax.swing.JLabel();
        nota_LI_Lbl = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaLisFTbl = new javax.swing.JTable();
        listaAsistenciaLALbl = new javax.swing.JLabel();
        agregarBtn = new javax.swing.JButton();
        agregarTBtn = new javax.swing.JButton();
        eliminarBtn = new javax.swing.JButton();
        eliminarTBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaLisITbl = new javax.swing.JTable();
        listaCandidatosLALbl = new javax.swing.JLabel();
        crearTablaBtn = new javax.swing.JButton();
        cancelarLABtn = new javax.swing.JButton();
        competenciaCBx = new javax.swing.JComboBox();
        competenciaLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(715, 564));

        agregarLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        agregarLALbl.setText("Registro");

        nota_LI_Lbl.setText("Ingrese la información a almacenar");

        tablaLisFTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Numero del empleado", "Nombre del empleado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaLisFTbl.setEnabled(false);
        jScrollPane5.setViewportView(tablaLisFTbl);

        listaAsistenciaLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listaAsistenciaLALbl.setText("Lista de aspectos agregados");

        agregarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        agregarBtn.setText(">");
        agregarBtn.setToolTipText("Seleccioné un empleado para la lista de asistencia");
        agregarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBtnActionPerformed(evt);
            }
        });

        agregarTBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        agregarTBtn.setText(">>");
        agregarTBtn.setToolTipText("Agregar todos los empleados");
        agregarTBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarTBtnActionPerformed(evt);
            }
        });

        eliminarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        eliminarBtn.setText("<");
        eliminarBtn.setToolTipText("Seleccioné un empleado a eliminar");
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });

        eliminarTBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        eliminarTBtn.setText("<<");
        eliminarTBtn.setToolTipText("Eliminar todos los empleados");
        eliminarTBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarTBtnActionPerformed(evt);
            }
        });

        tablaLisITbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Numero del empleado", "Nombre del empleado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tablaLisITbl);

        listaCandidatosLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listaCandidatosLALbl.setText("Lista de aspectos");

        crearTablaBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        crearTablaBtn.setText("Crear Tabla");
        crearTablaBtn.setEnabled(false);
        crearTablaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearTablaBtnActionPerformed(evt);
            }
        });

        cancelarLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelarLABtn.setText("Cancelar");
        cancelarLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarLABtnActionPerformed(evt);
            }
        });

        competenciaCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        competenciaCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tecnología", "Comunicación", "Trabajo en equipo" }));
        competenciaCBx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                competenciaCBxItemStateChanged(evt);
            }
        });

        competenciaLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        competenciaLbl.setText("Tipo de Competencia:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(agregarTBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(eliminarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(eliminarTBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(agregarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(agregarLALbl)
                                    .addComponent(nota_LI_Lbl))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(listaCandidatosLALbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(listaAsistenciaLALbl)
                        .addGap(41, 41, 41))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(competenciaLbl)
                        .addGap(27, 27, 27)
                        .addComponent(competenciaCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(113, 113, 113))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(crearTablaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(agregarLALbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nota_LI_Lbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(competenciaLbl)
                    .addComponent(competenciaCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listaCandidatosLALbl)
                    .addComponent(listaAsistenciaLALbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(agregarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(agregarTBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarTBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(crearTablaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Este metodo agrega a los aspectos a la lista de aspectos
     * @param evt
     */
    private void agregarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBtnActionPerformed
        if (tablaLisITbl.getSelectedRow() >= 0) {
            agregarAspectosTabla(tablaLisITbl.getSelectedRow());
        }
        if (tablaLisFTbl.getRowCount() > 0) {
            crearTablaBtn.setEnabled(true);
        } else {
            crearTablaBtn.setEnabled(false);
        }
    }//GEN-LAST:event_agregarBtnActionPerformed

    /**
     * Metodo que permite agregar los aspectos en la tabla de aspectos agregados
     */
    private void agregarAspectosTabla(int posicionLista) {
        boolean bandera = false;
        tablaLisFTbl.setEnabled(true);
        for (int j = 0; j < aspectosAModel.getRowCount(); j++) {
            if (aspectosModel.getValueAt(posicionLista, 0).
                    equals(aspectosAModel.getValueAt(j, 0))) {
                bandera = true;
            }
        }
        if (bandera == false) {
            Object[][] tableData = new Object[aspectosAModel.
                    getRowCount() + 1][aspectosAModel.getColumnCount()];
            //ciclo que pasa la informacion de la tabla de lista 
            //final para que al final sea agregado el nuevo empleado a 
            //esta matriz
            for (int k = 0; k < aspectosAModel.getRowCount(); k++) {
                for (int j = 0; j < aspectosAModel.getColumnCount(); j++) {
                    tableData[k][j] = aspectosAModel.getValueAt(k, j);
                }
            }
            tableData[aspectosAModel.getRowCount()][0] = aspectosModel.
                    getValueAt(posicionLista, 0);
            tableData[aspectosAModel.getRowCount()][1] = aspectosModel.
                    getValueAt(posicionLista, 1);
            aspectosAModel.setDataVector(tableData, titulosTabla);
            TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
            tablaLisFTbl.getColumnModel().removeColumn(tc);
        }
    }
    
    private void agregarTBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarTBtnActionPerformed
        for (int i = 0; i < aspectosModel.getRowCount(); i++) {
            agregarAspectosTabla(i);
        }
        if (tablaLisFTbl.getRowCount() > 0) {
            crearTablaBtn.setEnabled(true);
        } else {
            crearTablaBtn.setEnabled(false);
        }
    }//GEN-LAST:event_agregarTBtnActionPerformed

    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        if (JOptionPane.showConfirmDialog(this, "¿Desea eliminar el aspecto de "
            + "la lista de aspectos?", "Precaucion",
            JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0) {
        if (tablaLisFTbl.getSelectedRow() >= 0) {
            int cont = 0;
            Object[][] tableData = new Object[tablaLisFTbl.
            getRowCount() - 1][aspectosAModel.getColumnCount()];
            for (int i = 0; i < tablaLisFTbl.getRowCount(); i++) {
                if (((String) aspectosAModel.getValueAt(i, 0)).
                    compareTo((String) aspectosAModel.getValueAt(
                        tablaLisFTbl.getSelectedRow(),
                        0)) != 0) {
                tableData[cont][0] = aspectosAModel.getValueAt(i, 0);
                tableData[cont][1] = aspectosAModel.getValueAt(i, 1);
                tableData[cont][2] = aspectosAModel.getValueAt(i, 2);
                cont++;
            }
        }
        aspectosAModel.setDataVector(tableData, titulosTabla);
        TableColumn tc = tablaLisITbl.getColumnModel().getColumn(0);
        tablaLisITbl.getColumnModel().removeColumn(tc);
        }
        }
        if (tablaLisFTbl.getRowCount() > 0) {
            crearTablaBtn.setEnabled(true);
        } else {
            crearTablaBtn.setEnabled(false);
        }
    }//GEN-LAST:event_eliminarBtnActionPerformed

    private void eliminarTBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarTBtnActionPerformed
        if (JOptionPane.showConfirmDialog(this, "¿Desea eliminar toda la lista "
            + "de aspectos?", "Precaucion",
            JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0) {
        aspectosModel.setDataVector(null, titulosTabla);
        TableColumn tc = tablaLisITbl.getColumnModel().getColumn(0);
        tablaLisITbl.getColumnModel().removeColumn(tc);
        }
        if (tablaLisFTbl.getRowCount() > 0) {
            crearTablaBtn.setEnabled(true);
        } else {
            crearTablaBtn.setEnabled(false);
        }
    }//GEN-LAST:event_eliminarTBtnActionPerformed

    private void crearTablaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearTablaBtnActionPerformed
        String[][] matriz = new String[aspectosAModel.getRowCount()][aspectosAModel.getColumnCount()];
        for (int k = 0; k < aspectosAModel.getRowCount(); k++) {
            for (int j = 0; j < aspectosAModel.getColumnCount(); j++) {
                matriz[k][j] = aspectosAModel.getValueAt(k, j) + "";
            }
        }
        matriz[0][0] = matriz[0][0] + "TLA1";
        com.setTabla(matriz);
        List<String> info = new ArrayList<String>();
        info.add("Desbloquear");
        com.setInfo(info);
        this.dispose();
    }//GEN-LAST:event_crearTablaBtnActionPerformed

    private void cancelarLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarLABtnActionPerformed
        if (tablaLisFTbl.getRowCount() > 0) {
            if (JOptionPane.showConfirmDialog(this,
                "¿Desea cancelar la realizacion "
                + "de la lista de aspectos?", "Precaucion",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0) {
            List<String> info = new ArrayList<String>();
            info.add("Desbloquear");
            com.setInfo(info);
            this.dispose();

        }
        } else {
            List<String> info = new ArrayList<String>();
            info.add("Desbloquear");
            com.setInfo(info);
            this.dispose();
        }
    }//GEN-LAST:event_cancelarLABtnActionPerformed

    private void competenciaCBxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_competenciaCBxItemStateChanged
        control.buscarPorCompetencia(competenciaCBx.getSelectedItem());
    }//GEN-LAST:event_competenciaCBxItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarBtn;
    private javax.swing.JLabel agregarLALbl;
    private javax.swing.JButton agregarTBtn;
    private javax.swing.JButton cancelarLABtn;
    private javax.swing.JComboBox competenciaCBx;
    private javax.swing.JLabel competenciaLbl;
    private javax.swing.JButton crearTablaBtn;
    private javax.swing.JButton eliminarBtn;
    private javax.swing.JButton eliminarTBtn;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel listaAsistenciaLALbl;
    private javax.swing.JLabel listaCandidatosLALbl;
    private javax.swing.JLabel nota_LI_Lbl;
    private javax.swing.JTable tablaLisFTbl;
    private javax.swing.JTable tablaLisITbl;
    // End of variables declaration//GEN-END:variables

    /**
     * Metodo sobrescrito de la clase comunicador mensaje de confirmación de
     * registro o modificacion exitosa.
     *
     * @param mensaje String con mensaje de confirmacion de registro.
     */
    @Override
    public void setMensaje(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje);
    }

    /**
     * Metodo que recibe una matriz, donde se obtendran sus valores para
     * añadirlos a la modelo de la tabla, también se ocultara la columna id y se
     * le dara se redefinira el ancho de la columna 0.
     *
     * @param info Matriz String para vaciar en tabla
     */
    @Override
    public void setTabla(String[][] info) {
        TableColumn columnaID;
        aspectosModel.setDataVector(info, titulosTabla);        
        //Esconder columna ID
        columnaID = tablaLisITbl.getColumnModel().getColumn(0);
        tablaLisITbl.getColumnModel().removeColumn(columnaID);        
    }

    @Override
    public void setInfo(List info) {
    }

     /**
     * Metodo sobrescrito de la clase comunicador que recibe una Lista con la
     * los resultados de una busqueda especifica y vaciarlo en los campos y
     * checkbox
     *
     * @param info Lista de Objeto con información de búsqueda.
     */
    @Override
    public void setLista(List info, int i) {
        if (info.isEmpty()) {
            return;
        }
        switch (i) {
            case 1:
                competenciaModel.removeAllElements();
                for(int j = 0; j < info.size(); j++){
                  competenciaModel.addElement(info.get(j));
                }
                competenciaCBx.setSelectedIndex(0);
                control.buscarPorCompetencia(competenciaCBx.getSelectedItem());
                break;
        }
    }

    @Override
    public void llenarDatos(Object evento) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    /**
     * Metodo que permite crear la lista de aspectos ya realizada.
     *
     * @param info
     */
    public void mandarTabla(String[][] info) {
        aspectosModel.setDataVector(info, titulosTabla);
        TableColumn columnaID = tablaLisITbl.getColumnModel().getColumn(0);
        tablaLisITbl.getColumnModel().removeColumn(columnaID);   
        tablaLisFTbl.setEnabled(true);
    }
}
