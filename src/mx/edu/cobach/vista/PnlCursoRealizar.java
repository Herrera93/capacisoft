/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.edu.cobach.vista;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import mx.edu.cobach.persistencia.entidades.Evento;
import mx.edu.cobach.persistencia.entidades.Departamento;
import mx.edu.cobach.persistencia.entidades.Empleado;
import mx.edu.cobach.persistencia.entidades.EnunciadoLogistica;
import mx.edu.cobach.persistencia.entidades.ImplementacionCurso;
import mx.edu.cobach.persistencia.entidades.ImplementacionCursoEnunciadoLogistica;
import mx.edu.cobach.persistencia.entidades.Plantel;
import mx.edu.cobach.persistencia.entidades.Proveedor;
import mx.edu.cobach.persistencia.entidades.Puesto;
import mx.edu.cobach.persistencia.entidades.Sede;
import mx.edu.cobach.vista.controlador.HelperEntidad;
import mx.edu.cobach.vista.controlador.ProgramarControlador;

/**
 *
 * @author liuts
 */
public class PnlCursoRealizar extends javax.swing.JPanel implements Comunicador {

    /**
     * Creates new form PnlCursoRealizar
     */
    private static ProgramarControlador controlProgramar;
    private int cursoProgramarId;
    private final DefaultComboBoxModel sedeModel;
    private final DefaultComboBoxModel proveedorModel;
    private final DefaultComboBoxModel tipoModel;
    private final DefaultComboBoxModel campoModel;
    private DefaultTableModel modelTablaEmI;
    private DefaultTableModel modelTablaEmF;
    private String[] titulosTablaEm = {"ID", "Numero del Empleado", "Nombre del Empleado"};
    private Evento curso;

    public PnlCursoRealizar() {
        initComponents();
        sedeModel = new DefaultComboBoxModel();
        proveedorModel = new DefaultComboBoxModel();
        tipoModel = new DefaultComboBoxModel();
        campoModel = new DefaultComboBoxModel();
         
        modelTablaEmI = new DefaultTableModel(titulosTablaEm, 0);
        tablaLisITbl.setModel(modelTablaEmI);
        tablaLisITbl.setColumnSelectionAllowed(false);
        tablaLisITbl.setDragEnabled(false);

        modelTablaEmF = new DefaultTableModel(titulosTablaEm, 0);
        tablaLisFTbl.setModel(modelTablaEmF);
        tablaLisFTbl.setColumnSelectionAllowed(false);
        tablaLisFTbl.setDragEnabled(false);

        tipoSedeGCBx.setModel(sedeModel);
        nombreGCBx.setModel(proveedorModel);
        tipoLACBx.setModel(tipoModel);
        campoModel.addElement("");
        campoModel.addElement("Nombre");
        campoModel.addElement("Departamento");
        campoModel.addElement("Puesto");
        campoModel.addElement("Sede");
        campoModel.addElement("Plantel");
        campoCBx.setModel(campoModel);
        controlProgramar = new ProgramarControlador(this, ImplementacionCurso.class);

        fechaIDCh.getJCalendar().setMinSelectableDate(new Date());
        fechaTDCh.getJCalendar().setMinSelectableDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        informacionTP = new javax.swing.JTabbedPane();
        generalPnl = new javax.swing.JPanel();
        nombreGLbl = new javax.swing.JLabel();
        fechaILbl = new javax.swing.JLabel();
        fechaTLbl = new javax.swing.JLabel();
        tipoGLbl = new javax.swing.JLabel();
        sedeGLbl = new javax.swing.JLabel();
        nombrePrLbl = new javax.swing.JLabel();
        descripcionLbl = new javax.swing.JLabel();
        nombreGTFd = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        descripcionGTAa = new javax.swing.JTextArea();
        tipoGCBx = new javax.swing.JComboBox();
        tipoSedeGCBx = new javax.swing.JComboBox();
        nombreGCBx = new javax.swing.JComboBox();
        guardarGBtn = new javax.swing.JButton();
        fechaIDCh = new com.toedter.calendar.JDateChooser();
        fechaTDCh = new com.toedter.calendar.JDateChooser();
        agregarGLbl = new javax.swing.JLabel();
        notaGLbl = new javax.swing.JLabel();
        capacidadSedeGLbl = new javax.swing.JLabel();
        listaPnl = new javax.swing.JPanel();
        campoLbl = new javax.swing.JLabel();
        campoCBx = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaLisITbl = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaLisFTbl = new javax.swing.JTable();
        guardarLABtn = new javax.swing.JButton();
        nombreLATFd = new javax.swing.JTextField();
        nombreLALbl = new javax.swing.JLabel();
        agregarLALbl = new javax.swing.JLabel();
        nota_LI_Lbl = new javax.swing.JLabel();
        agregarBtn = new javax.swing.JButton();
        agregarTBtn = new javax.swing.JButton();
        eliminarBtn = new javax.swing.JButton();
        eliminarTBtn = new javax.swing.JButton();
        seleccionLALbl = new javax.swing.JLabel();
        tipoLACBx = new javax.swing.JComboBox();
        buscarLABtn = new javax.swing.JButton();
        listaAsistenciaLALbl = new javax.swing.JLabel();
        listaCandidatosLALbl = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        informacionTP.setPreferredSize(new java.awt.Dimension(739, 472));

        nombreGLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreGLbl.setText("Nombre del evento:");

        fechaILbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fechaILbl.setText("Fecha inicial de evento:");

        fechaTLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fechaTLbl.setText("Fecha de terminación del evento:");

        tipoGLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoGLbl.setText("Tipo de evento:");

        sedeGLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sedeGLbl.setText("Sede del evento:");

        nombrePrLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombrePrLbl.setText("Nombre de Proveedor:");

        descripcionLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        descripcionLbl.setText("Descripción del evento:");

        nombreGTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreGTFd.setEnabled(false);

        descripcionGTAa.setColumns(20);
        descripcionGTAa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        descripcionGTAa.setRows(5);
        descripcionGTAa.setEnabled(false);
        jScrollPane1.setViewportView(descripcionGTAa);

        tipoGCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoGCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CONFERENCIA", "TALLER", "CURSO", "CURSO / TALLER", "PLATICA" }));
        tipoGCBx.setEnabled(false);

        tipoSedeGCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoSedeGCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        tipoSedeGCBx.setEnabled(false);
        tipoSedeGCBx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tipoSedeGCBxItemStateChanged(evt);
            }
        });

        nombreGCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreGCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        nombreGCBx.setEnabled(false);

        guardarGBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        guardarGBtn.setText("Guardar");
        guardarGBtn.setEnabled(false);
        guardarGBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarGBtnActionPerformed(evt);
            }
        });

        fechaIDCh.setDateFormatString("dd/MM/yyyy");
        fechaIDCh.setEnabled(false);

        fechaTDCh.setDateFormatString("dd/MM/yyyy");
        fechaTDCh.setEnabled(false);

        agregarGLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        agregarGLbl.setText("Agregar");

        notaGLbl.setText("Ingrese la información a almacenar");

        capacidadSedeGLbl.setText("Capacidad de la sede:");
        capacidadSedeGLbl.setEnabled(false);

        javax.swing.GroupLayout generalPnlLayout = new javax.swing.GroupLayout(generalPnl);
        generalPnl.setLayout(generalPnlLayout);
        generalPnlLayout.setHorizontalGroup(
            generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalPnlLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(generalPnlLayout.createSequentialGroup()
                        .addComponent(descripcionLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(guardarGBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))
                    .addGroup(generalPnlLayout.createSequentialGroup()
                        .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(generalPnlLayout.createSequentialGroup()
                                .addComponent(fechaTLbl)
                                .addGap(18, 18, 18)
                                .addComponent(fechaTDCh, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(agregarGLbl)
                                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generalPnlLayout.createSequentialGroup()
                                        .addComponent(fechaILbl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(fechaIDCh, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generalPnlLayout.createSequentialGroup()
                                        .addComponent(nombreGLbl)
                                        .addGap(102, 102, 102)
                                        .addComponent(nombreGTFd, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(notaGLbl)))
                        .addGap(59, 59, 59)
                        .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(generalPnlLayout.createSequentialGroup()
                                .addComponent(tipoGLbl)
                                .addGap(57, 57, 57)
                                .addComponent(tipoGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(generalPnlLayout.createSequentialGroup()
                                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nombrePrLbl)
                                    .addComponent(sedeGLbl))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tipoSedeGCBx, 0, 153, Short.MAX_VALUE)
                                    .addComponent(nombreGCBx, 0, 153, Short.MAX_VALUE)
                                    .addComponent(capacidadSedeGLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        generalPnlLayout.setVerticalGroup(
            generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalPnlLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(agregarGLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notaGLbl)
                .addGap(22, 22, 22)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipoGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoGLbl)
                    .addComponent(nombreGTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreGLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fechaIDCh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fechaILbl)
                    .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sedeGLbl)
                        .addComponent(tipoSedeGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(capacidadSedeGLbl)
                .addGap(39, 39, 39)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(generalPnlLayout.createSequentialGroup()
                        .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nombrePrLbl)
                            .addComponent(nombreGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(fechaTLbl)
                                .addComponent(fechaTDCh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(79, 79, 79)
                        .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(descripcionLbl)))
                    .addGroup(generalPnlLayout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(guardarGBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(44, 44, 44))
        );

        informacionTP.addTab("General", generalPnl);

        campoLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoLbl.setText("Selecciona un campo:");

        campoCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nombre", "Departamento", "Plantel", "Puesto" }));
        campoCBx.setEnabled(false);
        campoCBx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoCBxItemStateChanged(evt);
            }
        });

        tablaLisITbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Numero del empleado", "Nombre del empleado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaLisITbl.setEnabled(false);
        jScrollPane4.setViewportView(tablaLisITbl);

        tablaLisFTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Numero del empleado", "Nombre del empleado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaLisFTbl.setEnabled(false);
        jScrollPane5.setViewportView(tablaLisFTbl);

        guardarLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        guardarLABtn.setText("Guardar");
        guardarLABtn.setEnabled(false);
        guardarLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarLABtnActionPerformed(evt);
            }
        });

        nombreLATFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreLATFd.setEnabled(false);
        nombreLATFd.setMaximumSize(new java.awt.Dimension(6, 23));

        nombreLALbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreLALbl.setText("Nombre del Empleado:");

        agregarLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        agregarLALbl.setText("Agregar");

        nota_LI_Lbl.setText("Ingrese la información a almacenar");

        agregarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        agregarBtn.setText(">");
        agregarBtn.setToolTipText("Seleccioné un empleado para la lista de asistencia");
        agregarBtn.setEnabled(false);
        agregarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBtnActionPerformed(evt);
            }
        });

        agregarTBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        agregarTBtn.setText(">>");
        agregarTBtn.setToolTipText("Agregar todos los empleados");
        agregarTBtn.setEnabled(false);
        agregarTBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarTBtnActionPerformed(evt);
            }
        });

        eliminarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        eliminarBtn.setText("<");
        eliminarBtn.setToolTipText("Seleccioné un empleado a eliminar");
        eliminarBtn.setEnabled(false);
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });

        eliminarTBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        eliminarTBtn.setText("<<");
        eliminarTBtn.setToolTipText("Eliminar todos los empleados");
        eliminarTBtn.setEnabled(false);
        eliminarTBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarTBtnActionPerformed(evt);
            }
        });

        seleccionLALbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        seleccionLALbl.setText("Nombre del Departamento:");

        tipoLACBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoLACBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nombre", "Departamento", "Plantel", "Puesto" }));
        tipoLACBx.setEnabled(false);
        tipoLACBx.setMaximumSize(new java.awt.Dimension(117, 23));

        buscarLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buscarLABtn.setText("Buscar");
        buscarLABtn.setEnabled(false);
        buscarLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarLABtnActionPerformed(evt);
            }
        });

        listaAsistenciaLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listaAsistenciaLALbl.setText("Lista de asistencia");

        listaCandidatosLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listaCandidatosLALbl.setText("Lista de posibles candidatos");

        javax.swing.GroupLayout listaPnlLayout = new javax.swing.GroupLayout(listaPnl);
        listaPnl.setLayout(listaPnlLayout);
        listaPnlLayout.setHorizontalGroup(
            listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listaPnlLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nota_LI_Lbl)
                            .addComponent(agregarLALbl)
                            .addGroup(listaPnlLayout.createSequentialGroup()
                                .addComponent(campoLbl)
                                .addGap(18, 18, 18)
                                .addComponent(campoCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(listaPnlLayout.createSequentialGroup()
                        .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(listaPnlLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(listaPnlLayout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(eliminarTBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(agregarBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(agregarTBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(eliminarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)))
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listaPnlLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(31, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                        .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(listaPnlLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(buscarLABtn))
                            .addGroup(listaPnlLayout.createSequentialGroup()
                                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(seleccionLALbl)
                                    .addComponent(nombreLALbl))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nombreLATFd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tipoLACBx, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(16, 16, 16))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                        .addComponent(guardarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                        .addComponent(listaAsistenciaLALbl)
                        .addGap(111, 111, 111))))
            .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(listaPnlLayout.createSequentialGroup()
                    .addGap(72, 72, 72)
                    .addComponent(listaCandidatosLALbl)
                    .addContainerGap(488, Short.MAX_VALUE)))
        );
        listaPnlLayout.setVerticalGroup(
            listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listaPnlLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(agregarLALbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nota_LI_Lbl)
                    .addComponent(nombreLALbl)
                    .addComponent(nombreLATFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoLbl)
                    .addComponent(campoCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seleccionLALbl)
                    .addComponent(tipoLACBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buscarLABtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(listaAsistenciaLALbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listaPnlLayout.createSequentialGroup()
                        .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(guardarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                        .addComponent(agregarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(agregarTBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(eliminarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(eliminarTBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(129, 129, 129))))
            .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(listaPnlLayout.createSequentialGroup()
                    .addGap(170, 170, 170)
                    .addComponent(listaCandidatosLALbl)
                    .addContainerGap(363, Short.MAX_VALUE)))
        );

        informacionTP.addTab("Lista de asistencia", listaPnl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(informacionTP, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(informacionTP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Evento ejecutado al hacer click se buscara al empleado dependiendo de del
     * campo seleccionado
     *
     * @param evt Evento al presionar el boton
     */
    private void buscarLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarLABtnActionPerformed
        String campo = (String) campoCBx.getSelectedItem();
        switch (campo) {          
            case "Nombre":
                controlProgramar.setClass(Empleado.class);
                controlProgramar.buscarEmpN(nombreLATFd.getText());
                break;
            case "Departamento":
                controlProgramar.setClass(Empleado.class);
                controlProgramar.buscarEmpD((Departamento) tipoLACBx.getSelectedItem());
                break;
            case "Plantel":
                controlProgramar.setClass(Empleado.class);
                controlProgramar.buscarEmpPl((Plantel) tipoLACBx.getSelectedItem());
                break;
            case "Puesto":
                controlProgramar.setClass(Empleado.class);
                controlProgramar.buscarEmpPu((Puesto) tipoLACBx.getSelectedItem());
                break;
        }
    }//GEN-LAST:event_buscarLABtnActionPerformed
    /**
     * Evento ejecutado al hacer seleccionar un campo de la lista de posibles
     * busquedas por el usuario
     *
     * @param evt Evento al presionar el boton
     */
    private void campoCBxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoCBxItemStateChanged
        String campo = (String) campoCBx.getSelectedItem();
        switch (campo) {
            case "":
                visibilidadCam(false);
                break;
            case "Nombre":
                visibilidadCam(true);
                nombreLALbl.setText("Nombre del Empleado:");
                break;
            case "Departamento":
                visibilidadCam(true);
                controlProgramar.setClass(Departamento.class);
                controlProgramar.buscarTodosLista(3);
                seleccionLALbl.setText("Nombre del Departamento:");
                break;
            case "Plantel":
                visibilidadCam(true);
                controlProgramar.setClass(Plantel.class);
                controlProgramar.buscarTodosLista(3);
                seleccionLALbl.setText("Nombre del Plantel:");
                break;
            case "Puesto":
                visibilidadCam(true);
                controlProgramar.setClass(Puesto.class);
                controlProgramar.buscarTodosLista(3);
                seleccionLALbl.setText("Nombre del Puesto:");
                break;
        }
    }//GEN-LAST:event_campoCBxItemStateChanged
    /**
     * Evento ejecutado al hacer click agregara al empleado de la lista de
     * posibles candidatos
     *
     * @param evt Evento al presionar el boton
     */
    private void agregarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBtnActionPerformed
        int row = tablaLisITbl.getSelectedRow();
        int id = Integer.parseInt((String) modelTablaEmI.getValueAt(row, 0));
        controlProgramar.setClass(Empleado.class);
        controlProgramar.buscarEmpId(id, Empleado.class);
    }//GEN-LAST:event_agregarBtnActionPerformed
    /**
     * Evento ejecutado al hacer click agregara a todos los empleados a la lista
     * de asistencia
     *
     * @param evt Evento al presionar el boton
     */
    private void agregarTBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarTBtnActionPerformed
        int nRow = tablaLisITbl.getRowCount();
        for (int i = 0; i < nRow; i++) {
            int id = Integer.parseInt((String) modelTablaEmI.getValueAt(i, 0));
            controlProgramar.setClass(Empleado.class);
            controlProgramar.buscarEmpId(id, Empleado.class);
        }

    }//GEN-LAST:event_agregarTBtnActionPerformed
    /**
     * Evento ejecutado al hacer click eliminando al empleado seleccionado en la
     * lista de asistenciatablaLisFTb.
     *
     * @param evt Evento al presionar el boton
     */
    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        int nRow = tablaLisFTbl.getRowCount();
        int nCol = tablaLisFTbl.getColumnCount();
        int row = tablaLisFTbl.getSelectedRow();
        int cont = 0;
        String id = (String) modelTablaEmF.getValueAt(row, 0);
        Object[][] tableData = new Object[nRow - 1][nCol + 1];
        for (int i = 0; i < nRow; i++) {
            if (((String) modelTablaEmF.getValueAt(i, 0)).compareTo(id) != 0) {
                tableData[cont][0] = modelTablaEmF.getValueAt(i, 0);
                tableData[cont][1] = modelTablaEmF.getValueAt(i, 1);
                tableData[cont][2] = modelTablaEmF.getValueAt(i, 2);
                cont++;
            }
        }
        modelTablaEmF.setDataVector(tableData, titulosTablaEm);
        TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
        tablaLisFTbl.getColumnModel().removeColumn(tc);
        visibilidadOpcT(true);
    }//GEN-LAST:event_eliminarBtnActionPerformed
    /**
     * Evento ejecutado al hacer click eliminando a todas las personas de la
     * lista de asistencia tablaLisFTb.
     *
     * @param evt Evento al presionar el boton
     */
    private void eliminarTBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarTBtnActionPerformed
        String[][] datosTabla = new String[0][0];
        modelTablaEmF.setDataVector(datosTabla, titulosTablaEm);
        TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
        tablaLisFTbl.getColumnModel().removeColumn(tc);
    }//GEN-LAST:event_eliminarTBtnActionPerformed
    /**
     * Evento ejecutado al hacer click mandando a un metodo que guarde la
     * informacion o la modificque.
     *
     * @param evt Evento al presionar el boton
     */
    private void guardarLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarLABtnActionPerformed
        guarMod();
    }//GEN-LAST:event_guardarLABtnActionPerformed
    /**
     * Evento ejecutado al hacer click mandando a un metodo que guarde la
     * informacion o la modificque.
     *
     * @param evt Evento al presionar el boton
     */
    private void guardarGBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarGBtnActionPerformed
        guarMod();
    }//GEN-LAST:event_guardarGBtnActionPerformed
    /**
     * Evento ejecutado para obtener y mostrar la capacidad de la sede
     * @param evt 
     */
    private void tipoSedeGCBxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tipoSedeGCBxItemStateChanged
        Sede sede = (Sede) tipoSedeGCBx.getSelectedItem();
        if(sede != null){
            if(sede.getNombre().equals("")){
                capacidadSedeGLbl.setText("Capacidad de la sede: ");
            }else{
                capacidadSedeGLbl.setText("Capacidad de la sede: "+sede.getCapacidad());
            }
        }
    }//GEN-LAST:event_tipoSedeGCBxItemStateChanged
    /**
     * Metodo que recibe el curso del catalogo para llenar parte de la
     * informacion general del curso a llevar a cabo
     *
     * @param curso
     */
    public void buscarCurso(Evento curso) {
        this.curso = curso;
        controlProgramar.buscarCurId(curso.getId(), Evento.class);
    }

    /**
     * Metodo que permite mandar a obtener la informacion de todos las sedes y
     * proveedores registrados informacion o la modificque.
     *
     * @param evt Evento al presionar el boton
     */
    public void llenarTodo() {
        controlProgramar.setClass(Sede.class);
        controlProgramar.buscarTodosLista(1);
        controlProgramar.setClass(Proveedor.class);
        controlProgramar.buscarTodosLista(2);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarBtn;
    private javax.swing.JLabel agregarGLbl;
    private javax.swing.JLabel agregarLALbl;
    private javax.swing.JButton agregarTBtn;
    private javax.swing.JButton buscarLABtn;
    private javax.swing.JComboBox campoCBx;
    private javax.swing.JLabel campoLbl;
    private javax.swing.JLabel capacidadSedeGLbl;
    private javax.swing.JTextArea descripcionGTAa;
    private javax.swing.JLabel descripcionLbl;
    private javax.swing.JButton eliminarBtn;
    private javax.swing.JButton eliminarTBtn;
    private com.toedter.calendar.JDateChooser fechaIDCh;
    private javax.swing.JLabel fechaILbl;
    private com.toedter.calendar.JDateChooser fechaTDCh;
    private javax.swing.JLabel fechaTLbl;
    private javax.swing.JPanel generalPnl;
    private javax.swing.JButton guardarGBtn;
    private javax.swing.JButton guardarLABtn;
    private javax.swing.JTabbedPane informacionTP;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel listaAsistenciaLALbl;
    private javax.swing.JLabel listaCandidatosLALbl;
    private javax.swing.JPanel listaPnl;
    private javax.swing.JComboBox nombreGCBx;
    private javax.swing.JLabel nombreGLbl;
    private javax.swing.JTextField nombreGTFd;
    private javax.swing.JLabel nombreLALbl;
    private javax.swing.JTextField nombreLATFd;
    private javax.swing.JLabel nombrePrLbl;
    private javax.swing.JLabel notaGLbl;
    private javax.swing.JLabel nota_LI_Lbl;
    private javax.swing.JLabel sedeGLbl;
    private javax.swing.JLabel seleccionLALbl;
    private javax.swing.JTable tablaLisFTbl;
    private javax.swing.JTable tablaLisITbl;
    private javax.swing.JComboBox tipoGCBx;
    private javax.swing.JLabel tipoGLbl;
    private javax.swing.JComboBox tipoLACBx;
    private javax.swing.JComboBox tipoSedeGCBx;
    // End of variables declaration//GEN-END:variables
    /**
     * Metodo sobrescrito de la clase comunicador mensaje de confirmación de
     * registro o modificacion exitosa.
     *
     * @param mensaje String con mensaje de confirmacion de registro.
     */
    @Override
    public void setMensaje(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje);
    }

    /**
     * Metodo que recibe una matriz, donde se obtendran sus valores para
     * añadirlos a la modelo de la tabla, también se ocultara la columna id y se
     * le dara se redefinira el ancho de la columna 0.
     *
     * @param info Matriz String para vaciar en tabla
     */
    @Override
    public void setTabla(String[][] info) {
        if (info[0][0].contains("TLE1")) { //Se checa si la palabra TLE1 se encuentra dentro de la matriz
            info[0][0] = info[0][0].replaceAll("TLE1", ""); //Se elimina la palabra TLE1 para que solo quede el id puro
            tablaLisITbl.setEnabled(true);
            modelTablaEmI.setDataVector(info, titulosTablaEm);
            TableColumn tc = tablaLisITbl.getColumnModel().getColumn(0);
            tablaLisITbl.getColumnModel().removeColumn(tc);
            visibilidadOpcT(true);
        } else if (info[0][0].contains("TLE2")) { //Se checa si la palabra TLE1 se encuentra dentro de la matriz
            info[0][0] = info[0][0].replaceAll("TLE2", "");//Se elimina la palabra TLE1 para que solo quede el id puro
            int nRow = tablaLisFTbl.getRowCount();
            int nCol = tablaLisFTbl.getColumnCount();
            boolean bandera = false;
            tablaLisFTbl.setEnabled(true);
            //ciclo que identifica si ya existe el empleado en la lista de 
            //asistencia, si se encuentra entonces la bandera cambiara a true y
            //no se agregara
            for (int i = 0; i < nRow; i++) {
                if (info[0][0].equals(modelTablaEmF.getValueAt(i, 0))) {
                    bandera = true;
                }
            }
            if (bandera == false) {
                nRow = modelTablaEmF.getRowCount();
                nCol = modelTablaEmF.getColumnCount();
                Object[][] tableData = new Object[nRow + 1][nCol];
                //ciclo que pasa la informacion de la tabla de lista 
                //final para que al final sea agregado el nuevo empleado a 
                //esta matriz
                for (int i = 0; i < nRow; i++) {
                    for (int j = 0; j < nCol; j++) {
                        tableData[i][j] = modelTablaEmF.getValueAt(i, j);
                    }
                }
                tableData[nRow][0] = info[0][0];
                tableData[nRow][1] = info[0][1];
                tableData[nRow][2] = info[0][2];
                modelTablaEmF.setDataVector(tableData, titulosTablaEm);

                TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
                tablaLisFTbl.getColumnModel().removeColumn(tc);
                visibilidadOpcT(true);
            } else {

            }
        }
    }

    /**
     * Metodo sobrescrito de la clase Comunicador
     *
     * @param info
     * @param i
     */
    @Override
    public void setInfo(List info) {
        agregarGLbl.setText("Agregar");
        agregarLALbl.setText("Agregar");
        guardarGBtn.setText("Guardar");
        guardarLABtn.setText("Guardar");
        nombreGTFd.setText(info.get(1).toString());
        descripcionGTAa.setText(info.get(2).toString());
        if (info.get(3).equals("CONFERENCIA")) {
            tipoGCBx.setSelectedIndex(0);
        }else if (info.get(3).equals("TALLER")) {
            tipoGCBx.setSelectedIndex(1);
        }else if (info.get(3).equals("CURSO")){
            tipoGCBx.setSelectedIndex(2);
        }else if (info.get(3).equals("CURSO / TALLER")){
            tipoGCBx.setSelectedIndex(3);
        }else if (info.get(3).equals("PLATICA")){
            tipoGCBx.setSelectedIndex(4);
        }
    }

    /**
     * Metodo sobrescrito de la clase comunicador que recibe una Lista con la
     * los resultados de una busqueda especifica y vaciarlo en los campos y
     * checkbox
     *
     * @param info Lista de Objeto con información de búsqueda.
     */
    @Override
    public void setLista(List info, int i) {
        if (info.isEmpty()) {
            return;
        }
        switch (i) {
            case 1:
                sedeModel.removeAllElements();
                Sede sede = new Sede();
                sede.setNombre("");
                sedeModel.addElement(sede);
                for (int j = 0; j < info.size(); j++) {
                    sedeModel.addElement(info.get(j));
                }
                break;
            case 2:
                proveedorModel.removeAllElements();
                Proveedor proveedor = new Proveedor();
                proveedor.setPrimerNombre("");
                proveedor.setSegundoNombre("");
                proveedor.setApellidoPaterno("");
                proveedor.setApellidoMaterno("");
                proveedorModel.addElement(proveedor);
                for (int j = 0; j < info.size(); j++) {
                    proveedorModel.addElement(info.get(j));
                }
                break;
            case 3:
                tipoModel.removeAllElements();
                for (int j = 0; j < info.size(); j++) {
                    tipoModel.addElement(info.get(j));
                }
                break;
        }
    }

    /**
     * Establece una visibilidad de las opciones del panel del usuario
     *
     * @param visibilidad
     */
    public void visibilidad(boolean visibilidad) {
        fechaIDCh.setEnabled(visibilidad);
        fechaTDCh.setEnabled(visibilidad);
        tipoSedeGCBx.setEnabled(visibilidad);
        nombreGCBx.setEnabled(visibilidad);
        guardarGBtn.setEnabled(visibilidad);
        campoCBx.setEnabled(visibilidad);
        guardarLABtn.setEnabled(visibilidad);
    }

    /**
     * Establece una visibilidad al seleccionar que tipo de busqueda para el
     * empleado se realizara
     *
     * @param visibilidad
     */
    private void visibilidadCam(boolean visibilidad) {
        tipoLACBx.setEnabled(visibilidad);
        nombreLATFd.setEnabled(visibilidad);
        buscarLABtn.setEnabled(visibilidad);
    }

    /**
     * Establece una visibilidad de las opciones de las flechas del panel para
     * enviar la informacion del usuairo.
     *
     * @param visibilidad
     */
    private void visibilidadOpcT(boolean visibilidad) {
        agregarBtn.setEnabled(visibilidad);
        agregarTBtn.setEnabled(visibilidad);
        eliminarBtn.setEnabled(visibilidad);
        eliminarTBtn.setEnabled(visibilidad);
    }

    /**
     * Establece una opcion para guardar o modificar la informacion para
     * mandarla a la base de datos
     *
     * @param visibilidad
     */
    private void guarMod() {
        HashSet<Empleado> lisEmpleado = new HashSet();
        List<Object> atributos = new ArrayList();
        if (validacion() == false) {
            if (guardarGBtn.getText().equals("Modificar")) {
                atributos.add(cursoProgramarId);
            }
            atributos.add(curso);
            atributos.add(fechaIDCh.getDate());
            atributos.add(fechaTDCh.getDate());
            atributos.add(true);
            atributos.add(tipoSedeGCBx.getSelectedItem());
            atributos.add(nombreGCBx.getSelectedItem());
            for (int x = 0; x < tablaLisFTbl.getRowCount(); x++) {
                Empleado empleado = new Empleado();
                empleado.setId(Integer.parseInt((String) modelTablaEmF.
                        getValueAt(x, 0)));
                lisEmpleado.add(empleado);
            }
            atributos.add(lisEmpleado);
            controlProgramar.setClass(ImplementacionCurso.class);
            if (guardarGBtn.getText().equals("Guardar")) {
                controlProgramar.alta(HelperEntidad.getProgramar(atributos, "Guardar", "Activo"));
            } else {
                controlProgramar.alta(HelperEntidad.getProgramar(atributos, "Modificar", "Activo"));
            }
        }
    }

    /**
     * Este metodo obtiene la informacion del curso a realizar del
     * PnlProgramarCurso para que este la pueda modificar
     *
     * @param info
     */
    public void obtenerMod(List info) {
        ImplementacionCurso cursoImplementado = new ImplementacionCurso();
        agregarGLbl.setText("Modificar");
        agregarLALbl.setText("Modificar");
        guardarGBtn.setText("Modificar");
        guardarLABtn.setText("Modificar");
        cursoProgramarId = Integer.parseInt(info.get(0).toString());
        curso = (Evento) info.get(1);
        nombreGTFd.setText(info.get(2).toString());
        descripcionGTAa.setText(info.get(3).toString());
        if (info.get(4).equals("CONFERENCIA")) {
            tipoGCBx.setSelectedIndex(0);
        }else if (info.get(4).equals("TALLER")) {
            tipoGCBx.setSelectedIndex(1);
        }else if (info.get(4).equals("CURSO")){
            tipoGCBx.setSelectedIndex(2);
        }else if (info.get(4).equals("CURSO / TALLER")){
            tipoGCBx.setSelectedIndex(3);
        }else if (info.get(4).equals("PLATICA")){
            tipoGCBx.setSelectedIndex(4);
        }
        fechaIDCh.setDate((Date) info.get(5));
        fechaTDCh.setDate((Date) info.get(6));
        sedeModel.setSelectedItem(info.get(7));
        proveedorModel.setSelectedItem(info.get(8));
        
        String[][] datosTabla = new String[0][0];
        modelTablaEmI.setDataVector(datosTabla, titulosTablaEm);
        TableColumn tc = tablaLisITbl.getColumnModel().getColumn(0);
        tablaLisFTbl.getColumnModel().removeColumn(tc);
        modelTablaEmF.setDataVector(datosTabla, titulosTablaEm);
        tc = tablaLisFTbl.getColumnModel().getColumn(0);
        tablaLisFTbl.getColumnModel().removeColumn(tc);
        
        cursoImplementado.setEmpleados((Set<Empleado>)info.get(9));
        Iterator itr = cursoImplementado.getEmpleados().iterator();       
        for(int x=0;x < cursoImplementado.getEmpleados().size();x++){
            int id = Integer.parseInt(itr.next().toString());
            controlProgramar.setClass(Empleado.class);
            controlProgramar.buscarEmpId(id, Empleado.class);
        }
    }

    /**
     * Metodo que regresa un true si se encontraron informacion sin completar, o
     * errores en la informacion, como es mostrado en el caso de prueba
     *
     * @return
     */
    private boolean validacion() {
        Sede campoSede = (Sede) tipoSedeGCBx.getSelectedItem();
        Proveedor campoProveedor = (Proveedor) nombreGCBx.getSelectedItem();

        if (fechaIDCh.getDate() == null) {
            JOptionPane.showMessageDialog(this, "No lleno el campo de la fecha"
                    + " inicial");
            return true;
        } else if (fechaTDCh.getDate() == null) {
            JOptionPane.showMessageDialog(this, "No lleno el campo de la fecha"
                    + " Final");
            return true;
        } else if (campoSede.getNombre().equals("")) {
            JOptionPane.showMessageDialog(this, "No selecciono una sede");
            return true;
        } else if (campoProveedor.toString().equals("")) {
            JOptionPane.showMessageDialog(this, "No selecciono un proveedor");
            return true;
        } else if (tablaLisFTbl.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No se encontraron empleados"
                    + "en la lista de asistencia");
            return true;
        }
        return false;
    }

}
