/*//GEN-FIRST:event_cancelar2BtnActionPerformed
 * To change this template, choose Tools | Templates//GEN-LAST:event_cancelar2BtnActionPerformed
 * and open the template in the editor.
 */
package mx.edu.cobach.vista;

import java.awt.Color;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import mx.edu.cobach.persistencia.entidades.Adscripcion;
import mx.edu.cobach.persistencia.entidades.Departamento;
import mx.edu.cobach.persistencia.entidades.Direccion;
import mx.edu.cobach.persistencia.entidades.Empleado;
import mx.edu.cobach.persistencia.entidades.Plantel;
 import mx.edu.cobach.persistencia.entidades.Puesto;
import mx.edu.cobach.vista.controlador.EmpleadoControlador;
import mx.edu.cobach.vista.controlador.HelperEntidad;

/**
 *
 * @author Fernando
 */
public class PnlEmpleadoAdministrativo extends javax.swing.JPanel implements
        Comunicador, FocusListener {

    private final DefaultTableModel model;
    private final DefaultComboBoxModel puestoModel, plantelModel, dptoModel,
            adscripModel, adscBuscarModel, direccionModel;
    private final String[] titulosTabla;
    private final EmpleadoControlador control;
    private String idEmpleadoActual;
    private final Border BORDER_ORIGINAL;
    private final Border BORDER_ORIGINAL_CBX;
    private boolean almacenando = false;
    private boolean buscando = false;
    private boolean problema = false;

    /**
     * Constructor del PnlEmpleadoAdministrativo e instancia la clase EmpleadoControlador. 
     * Se crea modelo de la tabla y se realiza la busqueda 
     */
    public PnlEmpleadoAdministrativo() 
   {
        this.titulosTabla = new String[]{"Numero", "Nombre", "Eliminar"};
        initComponents();
        model = new DefaultTableModel(titulosTabla, 5) {
            @Override
            public boolean isCellEditable(int row, int col) {
                if (col == 2) {
                    return true;
                } else {
                    return false;
                }
            }
        };
        tablaTbl.setModel(model);
        tablaTbl.setColumnSelectionAllowed(false);
        tablaTbl.setDragEnabled(false);
        control = new EmpleadoControlador(this, Empleado.class);
        puestoModel = new DefaultComboBoxModel();
        plantelModel = new DefaultComboBoxModel();
        dptoModel = new DefaultComboBoxModel();
        adscripModel = new DefaultComboBoxModel();
        direccionModel= new DefaultComboBoxModel();
        adscBuscarModel = new DefaultComboBoxModel();
        puestoCBx.setModel(puestoModel);
        plantelCBx.setModel(plantelModel);
        departamentoCBx.setModel(dptoModel);
        adscCBx.setModel(adscripModel);
        direccionCBx.setModel(direccionModel);
        adscBuscarCBx.setModel(adscBuscarModel);
        numeroTFd.addFocusListener(this);
        primerNombreTFd.addFocusListener(this);
        primerApellidoTFd.addFocusListener(this);
        correoTFd.addFocusListener(this);
        puestoCBx.addFocusListener(this);
        adscCBx.addFocusListener(this);
        plantelCBx.addFocusListener(this);
        departamentoCBx.addFocusListener(this);
        direccionCBx.addFocusListener(this);        
        BORDER_ORIGINAL = numeroTFd.getBorder();
        BORDER_ORIGINAL_CBX = puestoCBx.getBorder();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        opcionPnl = new javax.swing.JPanel();
        nombreBuscarLbl = new javax.swing.JLabel();
        adscBuscarLbl = new javax.swing.JLabel();
        nombreBuscarTFd = new javax.swing.JTextField();
        tablaSPn = new javax.swing.JScrollPane();
        tablaTbl = new javax.swing.JTable();
        buscarBtn = new javax.swing.JButton();
        agregarBtn = new javax.swing.JButton();
        adscBuscarCBx = new javax.swing.JComboBox();
        opcionMsjLbl = new javax.swing.JLabel();
        opcionLbl = new javax.swing.JLabel();
        tablaMsjLbl = new javax.swing.JLabel();
        informacionTBn = new javax.swing.JTabbedPane();
        informacion1Pnl = new javax.swing.JPanel();
        numeroLbl = new javax.swing.JLabel();
        correoELbl = new javax.swing.JLabel();
        numeroTFd = new javax.swing.JTextField();
        correoTFd = new javax.swing.JTextField();
        primerNombreLbl = new javax.swing.JLabel();
        primerNombreTFd = new javax.swing.JTextField();
        segNombreTFd = new javax.swing.JTextField();
        segNombreLbl = new javax.swing.JLabel();
        segApellidoTFd = new javax.swing.JTextField();
        segApellidoLbl = new javax.swing.JLabel();
        primerApellidoTFd = new javax.swing.JTextField();
        primerApellidoLbl = new javax.swing.JLabel();
        registroLbl = new javax.swing.JLabel();
        registroMsjLbl = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        validNumLbl = new javax.swing.JLabel();
        validNombLbl = new javax.swing.JLabel();
        validApellLbl = new javax.swing.JLabel();
        validCorreoLbl = new javax.swing.JLabel();
        cancelarBtn = new javax.swing.JButton();
        siguienteBtn = new javax.swing.JButton();
        informacion2Pnl = new javax.swing.JPanel();
        puestoCBx = new javax.swing.JComboBox();
        validPuestoLbl = new javax.swing.JLabel();
        puestoLbll = new javax.swing.JLabel();
        adscLbl = new javax.swing.JLabel();
        direccionLbl = new javax.swing.JLabel();
        plantelCBx = new javax.swing.JComboBox();
        adscCBx = new javax.swing.JComboBox();
        departamentoCBx = new javax.swing.JComboBox();
        validAdsLbl = new javax.swing.JLabel();
        validPlantelLbl = new javax.swing.JLabel();
        validDptoLbl = new javax.swing.JLabel();
        plantelLbl = new javax.swing.JLabel();
        guardarBtn = new javax.swing.JButton();
        direccionLbl1 = new javax.swing.JLabel();
        direccionCBx = new javax.swing.JComboBox();
        validDirLbl = new javax.swing.JLabel();
        regresarBtn = new javax.swing.JButton();
        cancelar2Btn = new javax.swing.JButton();

        opcionPnl.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        opcionPnl.setMaximumSize(new java.awt.Dimension(408, 587));
        opcionPnl.setMinimumSize(new java.awt.Dimension(408, 587));
        opcionPnl.setPreferredSize(new java.awt.Dimension(408, 587));

        nombreBuscarLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreBuscarLbl.setText("Nombre del empledo:");

        adscBuscarLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        adscBuscarLbl.setText("Adscripción del empleado:");

        nombreBuscarTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        tablaTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Numero", "Nombre", "Eliminar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaTblMouseClicked(evt);
            }
        });
        tablaSPn.setViewportView(tablaTbl);
        if (tablaTbl.getColumnModel().getColumnCount() > 0) {
            tablaTbl.getColumnModel().getColumn(0).setResizable(false);
            tablaTbl.getColumnModel().getColumn(1).setResizable(false);
            tablaTbl.getColumnModel().getColumn(2).setResizable(false);
        }

        buscarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        agregarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        agregarBtn.setText("Agregar");
        agregarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBtnActionPerformed(evt);
            }
        });

        adscBuscarCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        adscBuscarCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Buscar Todos", "Plantel", "Departamento" }));

        opcionMsjLbl.setText("<html>Seleccione el botón \"Agregar\" para habilitar la sección de registro,<br>si desea  realizar una búsqueda seleccione el botón \"Buscar\"</html>");

        opcionLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        opcionLbl.setText("Opciones ");

        tablaMsjLbl.setText("<html>Para Modificar seleccione un número del empleado de la columna<br> \"Numero\", para eliminar selecciona el cuadro eliminar de la columna Eliminar del empleado que desee</html> ");

        javax.swing.GroupLayout opcionPnlLayout = new javax.swing.GroupLayout(opcionPnl);
        opcionPnl.setLayout(opcionPnlLayout);
        opcionPnlLayout.setHorizontalGroup(
            opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(opcionPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(opcionPnlLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(opcionPnlLayout.createSequentialGroup()
                                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(agregarBtn)
                                    .addComponent(adscBuscarLbl)
                                    .addComponent(nombreBuscarLbl))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(adscBuscarCBx, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nombreBuscarTFd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buscarBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                            .addGroup(opcionPnlLayout.createSequentialGroup()
                                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(opcionLbl)
                                    .addComponent(opcionMsjLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(opcionPnlLayout.createSequentialGroup()
                        .addComponent(tablaSPn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(tablaMsjLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)))
        );
        opcionPnlLayout.setVerticalGroup(
            opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, opcionPnlLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(opcionLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opcionMsjLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreBuscarLbl)
                    .addComponent(nombreBuscarTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adscBuscarLbl)
                    .addComponent(adscBuscarCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agregarBtn)
                    .addComponent(buscarBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tablaMsjLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tablaSPn, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        informacion1Pnl.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        informacion1Pnl.setPreferredSize(new java.awt.Dimension(786, 425));

        numeroLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        numeroLbl.setText("Num. Empleado:");

        correoELbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        correoELbl.setText("Correo electrónico :");

        numeroTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        numeroTFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numeroTFdKeyTyped(evt);
            }
        });

        correoTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        correoTFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                correoTFdKeyTyped(evt);
            }
        });

        primerNombreLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        primerNombreLbl.setText("Primer nombre:");

        primerNombreTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        primerNombreTFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                primerNombreTFdKeyTyped(evt);
            }
        });

        segNombreTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        segNombreLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        segNombreLbl.setText("Segundo nombre:");

        segApellidoTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        segApellidoLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        segApellidoLbl.setText("Segundo apellido:");

        primerApellidoTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        primerApellidoTFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                primerApellidoTFdKeyTyped(evt);
            }
        });

        primerApellidoLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        primerApellidoLbl.setText("Primer apellido:");

        registroLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        registroLbl.setText("Registro");

        registroMsjLbl.setText("<html>Ingrese la información a almacenar, para salir o cancelar el registro presione el botón \"Cancelar\"</html>");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("@cobachbc.edu.mx");

        validNumLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validNumLbl.setForeground(new java.awt.Color(213, 216, 222));
        validNumLbl.setText("Este campo es obligatorio");

        validNombLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validNombLbl.setForeground(new java.awt.Color(213, 216, 222));
        validNombLbl.setText("Este campo es obligatorio");

        validApellLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validApellLbl.setForeground(new java.awt.Color(213, 216, 222));
        validApellLbl.setText("Este campo es obligatorio");

        validCorreoLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validCorreoLbl.setForeground(new java.awt.Color(213, 216, 222));
        validCorreoLbl.setText("Este campo es obligatorio");

        cancelarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelarBtn.setText("Cancelar");
        cancelarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarBtnActionPerformed(evt);
            }
        });

        siguienteBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        siguienteBtn.setText("Siguiente");
        siguienteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguiente(evt);
            }
        });

        javax.swing.GroupLayout informacion1PnlLayout = new javax.swing.GroupLayout(informacion1Pnl);
        informacion1Pnl.setLayout(informacion1PnlLayout);
        informacion1PnlLayout.setHorizontalGroup(
            informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informacion1PnlLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(primerApellidoLbl)
                    .addGroup(informacion1PnlLayout.createSequentialGroup()
                        .addGroup(informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(numeroLbl)
                            .addComponent(primerNombreLbl)
                            .addComponent(segNombreLbl)
                            .addComponent(segApellidoLbl)
                            .addComponent(correoELbl))
                        .addGap(40, 40, 40)
                        .addGroup(informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(validCorreoLbl)
                            .addGroup(informacion1PnlLayout.createSequentialGroup()
                                .addGroup(informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cancelarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(segNombreTFd, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(validNumLbl)
                                            .addComponent(validNombLbl)
                                            .addComponent(segApellidoTFd)
                                            .addComponent(validApellLbl)
                                            .addComponent(primerNombreTFd)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informacion1PnlLayout.createSequentialGroup()
                                                .addComponent(correoTFd, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(numeroTFd, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                                        .addComponent(primerApellidoTFd, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(siguienteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(registroMsjLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(registroLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );
        informacion1PnlLayout.setVerticalGroup(
            informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informacion1PnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(registroLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(registroMsjLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numeroTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numeroLbl))
                .addGap(4, 4, 4)
                .addComponent(validNumLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(primerNombreTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(primerNombreLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validNombLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(segNombreTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(segNombreLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(primerApellidoLbl)
                    .addComponent(primerApellidoTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validApellLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(segApellidoTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(segApellidoLbl))
                .addGap(32, 32, 32)
                .addGroup(informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(correoELbl)
                    .addComponent(correoTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validCorreoLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addGroup(informacion1PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(siguienteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelarBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                .addGap(44, 44, 44))
        );

        informacionTBn.addTab("General", informacion1Pnl);

        puestoCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        puestoCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        puestoCBx.setToolTipText("Seleccioné el puesto que esta asigando el empleado");

        validPuestoLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validPuestoLbl.setForeground(new java.awt.Color(213, 216, 222));
        validPuestoLbl.setText("Este campo es obligatorio");

        puestoLbll.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        puestoLbll.setText("Puesto:");

        adscLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        adscLbl.setText("Adscripción: ");

        direccionLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        direccionLbl.setText("Direccion");

        plantelCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        plantelCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        plantelCBx.setToolTipText("Seleccioné el plantel que esta asigando el empleado");
        plantelCBx.setEnabled(false);

        adscCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        adscCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Plantel", "Departamento" }));
        adscCBx.setToolTipText("Seleccioné la  adscripción que esta asigando el empleado");
        adscCBx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adscCBxActionPerformed(evt);
            }
        });

        departamentoCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        departamentoCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        departamentoCBx.setToolTipText("Seleccioné el departamento que esta asigando el empleado");
        departamentoCBx.setEnabled(false);

        validAdsLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validAdsLbl.setForeground(new java.awt.Color(213, 216, 222));
        validAdsLbl.setText("Este campo es obligatorio");

        validPlantelLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validPlantelLbl.setForeground(new java.awt.Color(213, 216, 222));
        validPlantelLbl.setText("Este campo es obligatorio");

        validDptoLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validDptoLbl.setForeground(new java.awt.Color(213, 216, 222));
        validDptoLbl.setText("Este campo es obligatorio");

        plantelLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        plantelLbl.setText("Plantel:");

        guardarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        guardarBtn.setText("Guardar");
        guardarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBtnActionPerformed(evt);
            }
        });

        direccionLbl1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        direccionLbl1.setText("Dirección");

        direccionCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        direccionCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        direccionCBx.setEnabled(false);

        validDirLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validDirLbl.setForeground(new java.awt.Color(213, 216, 222));
        validDirLbl.setText("Este campo es obligatorio");

        regresarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        regresarBtn.setText("Regresar");
        regresarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresar(evt);
            }
        });

        cancelar2Btn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelar2Btn.setText("Cancelar");
        cancelar2Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar2BtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout informacion2PnlLayout = new javax.swing.GroupLayout(informacion2Pnl);
        informacion2Pnl.setLayout(informacion2PnlLayout);
        informacion2PnlLayout.setHorizontalGroup(
            informacion2PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informacion2PnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(regresarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cancelar2Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(guardarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
            .addGroup(informacion2PnlLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(informacion2PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(plantelLbl)
                    .addComponent(puestoLbll)
                    .addComponent(direccionLbl)
                    .addComponent(adscLbl)
                    .addComponent(direccionLbl1))
                .addGap(101, 101, 101)
                .addGroup(informacion2PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(validDptoLbl)
                    .addComponent(departamentoCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(validPuestoLbl)
                    .addComponent(puestoCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(validAdsLbl)
                    .addComponent(validPlantelLbl)
                    .addComponent(adscCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plantelCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(validDirLbl)
                    .addComponent(direccionCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        informacion2PnlLayout.setVerticalGroup(
            informacion2PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informacion2PnlLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addGroup(informacion2PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(puestoLbll)
                    .addComponent(puestoCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validPuestoLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informacion2PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adscCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adscLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validAdsLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informacion2PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(direccionLbl1)
                    .addComponent(departamentoCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validDptoLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informacion2PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plantelCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plantelLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validPlantelLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informacion2PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(direccionCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(direccionLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validDirLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                .addGroup(informacion2PnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regresarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelar2Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guardarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );

        informacionTBn.addTab("Adscripcion", informacion2Pnl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(opcionPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(informacionTBn))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(opcionPnl, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
            .addComponent(informacionTBn, javax.swing.GroupLayout.Alignment.TRAILING)
        );
    }// </editor-fold>                        

    /**
     * Evento ejecutado al hacer click en el boton,obteniendo el texto de los
     * campos validando que estos no esten vacios, manda llamar un metodo
     * dependiendo del texto asignado al boton.
     *
     * @param evt Evento al presionar el boton
     */
    private void guardarBtnActionPerformed(java.awt.event.ActionEvent evt) {                                           
        almacenando = true;
        if(validacion()){
            //Se añaden la informacion de los campos a la lista de objetos
            List<Object> atributos = new ArrayList<>();
            atributos.add(numeroTFd.getText());
            atributos.add(primerNombreTFd.getText());
            atributos.add(segNombreTFd.getText());
            atributos.add(primerApellidoTFd.getText());
            if (segApellidoTFd.getText().isEmpty()) {
                atributos.add("");
            } else {
                atributos.add(segApellidoTFd.getText());
            }
            atributos.add(puestoCBx.getSelectedItem());
            atributos.add(correoTFd.getText() + "@cobachbc.edu.mx");
            atributos.add(adscCBx.getSelectedItem());
            atributos.add(plantelCBx.getSelectedItem());
            atributos.add(departamentoCBx.getSelectedItem());
            atributos.add(direccionCBx.getSelectedItem());

            buscando = true;
            problema = false;
            control.buscarTodos();
            if(!problema){
                //Se selecciona el metodo que se va manadar llamar, obteniendo el texto 
                //contenido en el boton.
                if (!guardarBtn.getText().equalsIgnoreCase("modificar")) {
                    control.alta(HelperEntidad.getEmpleado(atributos));
                } else {
                    atributos.add(idEmpleadoActual);
                    control.modificacion(HelperEntidad.getEmpleado(atributos));
                }
                limpiar();
                control.buscarTodos();
            }
        }
        almacenando = false;
    }                                          

    private boolean validacion(){
        boolean resultado = false;
        if(primerNombreTFd.getText().isEmpty() 
            || primerApellidoTFd.getText().isEmpty()
            || correoTFd.getText().isEmpty()
            || puestoCBx.getSelectedIndex() == 0
            || adscCBx.getSelectedIndex() == 0) 
            setMensaje("Debe ingresar los datos solicitados");
        else if (adscCBx.getSelectedIndex() == 1 
            && departamentoCBx.getSelectedIndex() == 0)
            setMensaje("Debe ingresar los datos solicitados");
        else if (adscCBx.getSelectedIndex() == 2 
            && plantelCBx.getSelectedIndex() == 0)
            setMensaje("Debe ingresar los datos solicitados");
        else if (adscCBx.getSelectedIndex() == 3 
            && direccionCBx.getSelectedIndex() == 0)
            setMensaje("Debe ingresar los datos solicitados");
        else
            resultado = true;
        return resultado;
    }
    
    /**
     * Evento ejecutado al presionar el botón, habilita y limpia los campos para
     * realizar un nuevo registro, modifica el texto contenido en los labels.
     *
     * @param evt Evento al presionar el botón
     */
    private void agregarBtnActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if(informacionTBn.isVisible()){
            if (JOptionPane.showConfirmDialog(this, "La información que"
                    + " esta modificando se perdera,¿Aun así desea cancelarla?",
                    "Precaucion", JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE) == 0) {
                limpiar();
                informacionTBn.setVisible(true);
            }
        } else { 
            limpiar();
            informacionTBn.setVisible(true);
        }
    }                                          

    /**
     * Evento ejecutado al hace click en la tabla, se calcula en que columna y
     * renglon se llevo a cabo el click, en caso de ser en la columna eliminar
     * se presentara l a opcion de eliminar el registro correspondiente al
     * renglon.
     *
     * @param evt Evento al hacer click
     */
    private void tablaTblMouseClicked(java.awt.event.MouseEvent evt) {                                      
        //Obtenelos el renglon y columna donde se hizo click
        int row = tablaTbl.rowAtPoint(evt.getPoint());
        int col = tablaTbl.columnAtPoint(evt.getPoint());
        if (col == 0) {
            String id = (String) model.getValueAt(row, 0);
            if(informacionTBn.isVisible()){
                if (JOptionPane.showConfirmDialog(this, "La información que"
                    + " esta modificando se perdera ¿Aun así desea cancelarla?",
                    "Precaucion", JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE) == 0) {
                    limpiar();
                    control.buscar(id);
                    guardarBtn.setText("Modificar");
                    tablaTbl.clearSelection();
                    informacionTBn.setVisible(true);
                }
            } else {
                limpiar();
                control.buscar(id);
                guardarBtn.setText("Modificar");
                tablaTbl.clearSelection();
                informacionTBn.setVisible(true);
            }
        } else if (col == 2) {
            //System.out.println("ID: " + model.getValueAt(row, 0));
            //Preguntamos si esta seguro de la eliminacion
            String id = (String)model.getValueAt(row, 0);
            if(control.buscarImplementaciones(id)){
                setMensaje("No se puede eliminar un emleado que este asignado a un evento");
                model.setValueAt(false, row, 2);
                tablaTbl.clearSelection();
            }else if(guardarBtn.getText().equals("Modificar") && idEmpleadoActual.equals(id)){
                JOptionPane.showMessageDialog(this, "No se puede eliminar el empleado que esta"
                    + " modificando actualmente.","Precaución", JOptionPane.ERROR_MESSAGE);
                model.setValueAt(false, row, 2);
                tablaTbl.clearSelection();
            }else if(JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar este registro?",
                    "Precaución", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0){
                //Obtenemos ID de la columna escondidaFV
                control.baja(id);
                control.buscarTodos();
            } else {
                model.setValueAt(false, row, 2);
                tablaTbl.clearSelection();
            }
        }
        tablaTbl.clearSelection();
    }                                     

    /**
     * Evento que se ejecuta cuandore se presiona el boton Buscar, donde se
     * limpian los campos, se obtiene el valor por que se va a agregar.
     *
     * @param evt
     */
    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        //Se limpian los campos
        
        if (!nombreBuscarTFd.getText().isEmpty()) {
            control.buscarPorNombre(nombreBuscarTFd.getText());
        } else if (adscBuscarCBx.getSelectedIndex() == 0) {
            control.buscarTodos();
        } else {
            control.buscarPorAdscripcion((Adscripcion) adscBuscarCBx.getSelectedItem());
        }
    }                                         

    /**
     * Evento que se ejecuta al presionar el boton Cancelar el cual va a limpiar
     * todos lo campos del panel info y los desahabilitara para realizar otra
     * accion.
     *
     * @param evt
     */
    private void cancelarBtnActionPerformed(java.awt.event.ActionEvent evt) {                                            
        //Se limpian los campos
        if (JOptionPane.showConfirmDialog(this, "La información que"
            + " esta modificando se perdera,¿Aun así desea cancelarla?",
            "Precaucion", JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE) == 0) {
            limpiar();
        }

    }                                           

    /**
     * El este evento se produce cuando se intenta teclear en el campo numero,
     * donde solo se permitira el uso de numeros.
     *
     * @param evt
     */
    private void numeroTFdKeyTyped(java.awt.event.KeyEvent evt) {                                   
        char car = evt.getKeyChar();
        if (numeroTFd.getText().length() >= 10) {
            evt.consume();
        }
        if ((car < '0' || car > '9')
                && (car != (char) KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }                                  

    /**
     * Este evento se se produce cuando se intenta teclear en el campo
     * primerNombre, donde solo se permitira el uso de letras y espacios.
     *
     * @param evt
     */
    private void primerNombreTFdKeyTyped(java.awt.event.KeyEvent evt) {                                         
        char car = evt.getKeyChar();
        if (primerNombreTFd.getText().length() >= 20) {
            evt.consume();
        }
        if ((car < 'a' || car > 'z') && (car < 'A' || car > 'Z')
                && car != 'á' //Minúsculas             
                && car != 'é'
                && car != 'í'
                && car != 'ó'
                && car != 'ú'
                && car != 'Á' //Mayúsculas             
                && car != 'É'
                && car != 'Í'
                && car != 'Ó'
                && car != 'Ú'
                && car != 'ñ'
                && car != 'Ñ') {
            evt.consume();
        }
    }                                        

    /**
     * Este evento se se produce cuando se intenta teclear en el campo
     * primerApellido, donde solo se permitira el uso de letras y espacios.
     *
     * @param evt
     */
    private void primerApellidoTFdKeyTyped(java.awt.event.KeyEvent evt) {                                           
        char car = evt.getKeyChar();
        if (primerApellidoTFd.getText().length() >= 20) {
            evt.consume();
        }
        if ((car < 'a' || car > 'z') && (car < 'A' || car > 'Z')
                && car != 'á' //Minúsculas             
                && car != 'é'
                && car != 'í'
                && car != 'ó'
                && car != 'ú'
                && car != 'Á' //Mayúsculas             
                && car != 'É'
                && car != 'Í'
                && car != 'Ó'
                && car != 'Ú'
                && car != 'ñ'
                && car != 'Ñ'
                && (car != (char) KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }                                          

    /**
     * El este evento se produce cuando se intenta teclear en el campo numero,
     * donde solo se permitira el uso de numeros.
     *
     * @param evt
     */
    private void correoTFdKeyTyped(java.awt.event.KeyEvent evt) {                                   
        if (correoTFd.getText().length() >= 45) {
            evt.consume();
        }
    }                                  

    /**
     * Evento ejecutado al presionar el botón, destactiva y activa los paneles
     * dentro del JTabbedPane.
     *
     * @param evt Evento al presionar el botón
     */
    private void regresarBtnActionPerformed(java.awt.event.ActionEvent evt) {                                            
        informacionTBn.setEnabledAt(0, true);
        informacionTBn.setEnabledAt(1, false);
        informacionTBn.setSelectedIndex(0);
    }                                           
        
    /**
     * Evento que se ejecuta al presionar el boton Cancelar el cual va a limpiar
     * todos lo campos del panel info y los desahabilitara para realizar otra
     * accion.
     *
     * @param evt
     */
    private void cancelar2BtnActionPerformed(java.awt.event.ActionEvent evt) {                                             
        //Se limpian los campos
        if (JOptionPane.showConfirmDialog(this, "La información que"
            + " esta modificando se perdera,¿Aun así desea cancelarla?",
            "Precaucion", JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE) == 0) {
            limpiar();
        }
    }                                            

    /**
     * Evento ejecutado al presionar el botón, destactiva y activa los paneles
     * dentro del JTabbedPane.
     *
     * @param evt Evento al presionar el botón
     */
    private void siguienteBtnActionPerformed(java.awt.event.ActionEvent evt) {                                             
        informacionTBn.setEnabledAt(0, false);
        informacionTBn.setEnabledAt(1, true);
        informacionTBn.setSelectedIndex(1);
    }                                            

    /**
     * Evento ejecutado al registrar cambio de seleccion en el adscCBx ComboBox, 
     * habilitando otros ComboBox
     *
     * @param evt Evento al cambiar la seleccion en el ComboBox
     */
    private void adscCBxActionPerformed(java.awt.event.ActionEvent evt) {                                        
        if(adscCBx.getSelectedIndex() > 0){
            plantelCBx.setSelectedIndex(0);
            departamentoCBx.setSelectedIndex(0);
            direccionCBx.setSelectedIndex(0);
            plantelCBx.setBorder(BORDER_ORIGINAL_CBX);
            validPlantelLbl.setForeground(new Color(213, 216, 222));
            departamentoCBx.setBorder(BORDER_ORIGINAL_CBX);
            validDptoLbl.setForeground(new Color(213, 216, 222));
            direccionCBx.setBorder(BORDER_ORIGINAL_CBX);
            validDirLbl.setForeground(new Color(213, 216, 222));
        }
        if (adscCBx.getSelectedIndex() == 0) {
            plantelCBx.setEnabled(false);
            departamentoCBx.setEnabled(false);
            direccionCBx.setEnabled(false);
        } else if (adscCBx.getSelectedIndex() == 1) {
            plantelCBx.setEnabled(false);
            departamentoCBx.setEnabled(true);
            direccionCBx.setEnabled(false);
        } else if (adscCBx.getSelectedIndex() == 2) {
            departamentoCBx.setEnabled(false);
            plantelCBx.setEnabled(true);
            direccionCBx.setEnabled(false);
        } else if (adscCBx.getSelectedIndex() == 3) {
            departamentoCBx.setEnabled(false);
            plantelCBx.setEnabled(false);
            direccionCBx.setEnabled(true);
        }
    }                                       

    /**
     * Evento que se ejecuta al presionar el boton Cancelar el cual va a limpiar
     * todos lo campos del panel info y los desahabilitara para realizar otra
     * accion.
     *
     * @param evt
     */
    private void cancelarBtn2ActionPerformed(java.awt.event.ActionEvent evt) {                                             
        //Se limpian los campos
        informacionTBn.setEnabledAt(0, true);
        informacionTBn.setEnabledAt(1, false);
        informacionTBn.setSelectedIndex(0);
        numeroTFd.setText("");
        primerNombreTFd.setText("");
        segNombreTFd.setText("");
        primerApellidoTFd.setText("");
        segApellidoTFd.setText("");
        correoTFd.setText("");
        adscCBx.setSelectedIndex(0);
        plantelCBx.setSelectedIndex(0);
        departamentoCBx.setSelectedIndex(0);
        guardarBtn.setText("Guardar");
        numeroTFd.setBorder(BORDER_ORIGINAL);
        primerNombreTFd.setBorder(BORDER_ORIGINAL);
        primerApellidoTFd.setBorder(BORDER_ORIGINAL);
        correoTFd.setBorder(BORDER_ORIGINAL);
        validNumLbl.setForeground(new Color(213, 216, 222));
        validNombLbl.setForeground(new Color(213, 216, 222));
        validApellLbl.setForeground(new Color(213, 216, 222));
        validCorreoLbl.setForeground(new Color(213, 216, 222));
    }                                            

    /**
     * Evento que se ejecuta al presionar el boton Regresar el cual hace la 
     * transicion de un panel a otro
     * @param evt
     */
    private void regresar(java.awt.event.ActionEvent evt) {                          
        informacionTBn.setEnabledAt(0, true);
        informacionTBn.setEnabledAt(1, false);
        informacionTBn.setSelectedIndex(0);
    }                         

    /**
     * Evento ejecutado al presionar el botón, activa y desactiva los paneles de
     * los paneles de empleado administrativo.
     * @param evt Evento al presionar el boton
     */
    private void siguiente(java.awt.event.ActionEvent evt) {                           
        informacionTBn.setEnabledAt(0, false);
        informacionTBn.setEnabledAt(1, true);
        informacionTBn.setSelectedIndex(1);
    }                          


    // Variables declaration - do not modify                     
    private javax.swing.JComboBox adscBuscarCBx;
    private javax.swing.JLabel adscBuscarLbl;
    private javax.swing.JComboBox adscCBx;
    private javax.swing.JLabel adscLbl;
    private javax.swing.JButton agregarBtn;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JButton cancelar2Btn;
    private javax.swing.JButton cancelarBtn;
    private javax.swing.JLabel correoELbl;
    private javax.swing.JTextField correoTFd;
    private javax.swing.JComboBox departamentoCBx;
    private javax.swing.JComboBox direccionCBx;
    private javax.swing.JLabel direccionLbl;
    private javax.swing.JLabel direccionLbl1;
    private javax.swing.JButton guardarBtn;
    private javax.swing.JPanel informacion1Pnl;
    private javax.swing.JPanel informacion2Pnl;
    private javax.swing.JTabbedPane informacionTBn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel nombreBuscarLbl;
    private javax.swing.JTextField nombreBuscarTFd;
    private javax.swing.JLabel numeroLbl;
    private javax.swing.JTextField numeroTFd;
    private javax.swing.JLabel opcionLbl;
    private javax.swing.JLabel opcionMsjLbl;
    private javax.swing.JPanel opcionPnl;
    private javax.swing.JComboBox plantelCBx;
    private javax.swing.JLabel plantelLbl;
    private javax.swing.JLabel primerApellidoLbl;
    private javax.swing.JTextField primerApellidoTFd;
    private javax.swing.JLabel primerNombreLbl;
    private javax.swing.JTextField primerNombreTFd;
    private javax.swing.JComboBox puestoCBx;
    private javax.swing.JLabel puestoLbll;
    private javax.swing.JLabel registroLbl;
    private javax.swing.JLabel registroMsjLbl;
    private javax.swing.JButton regresarBtn;
    private javax.swing.JLabel segApellidoLbl;
    private javax.swing.JTextField segApellidoTFd;
    private javax.swing.JLabel segNombreLbl;
    private javax.swing.JTextField segNombreTFd;
    private javax.swing.JButton siguienteBtn;
    private javax.swing.JLabel tablaMsjLbl;
    private javax.swing.JScrollPane tablaSPn;
    private javax.swing.JTable tablaTbl;
    private javax.swing.JLabel validAdsLbl;
    private javax.swing.JLabel validApellLbl;
    private javax.swing.JLabel validCorreoLbl;
    private javax.swing.JLabel validDirLbl;
    private javax.swing.JLabel validDptoLbl;
    private javax.swing.JLabel validNombLbl;
    private javax.swing.JLabel validNumLbl;
    private javax.swing.JLabel validPlantelLbl;
    private javax.swing.JLabel validPuestoLbl;
    // End of variables declaration                   

    
    private void limpiar(){
        informacionTBn.setEnabledAt(0, true);
        informacionTBn.setEnabledAt(1, false);
        informacionTBn.setSelectedIndex(0);
        numeroTFd.setText("");
        primerNombreTFd.setText("");
        segNombreTFd.setText("");
        primerApellidoTFd.setText("");
        segApellidoTFd.setText("");
        correoTFd.setText("");
        adscCBx.setSelectedIndex(0);
        plantelCBx.setSelectedIndex(0);
        departamentoCBx.setSelectedIndex(0);
        direccionCBx.setSelectedIndex(0);
        guardarBtn.setText("Guardar");
        numeroTFd.setBorder(BORDER_ORIGINAL);
        primerNombreTFd.setBorder(BORDER_ORIGINAL);
        primerApellidoTFd.setBorder(BORDER_ORIGINAL);
        correoTFd.setBorder(BORDER_ORIGINAL);
        validNumLbl.setForeground(new Color(213, 216, 222));
        validNombLbl.setForeground(new Color(213, 216, 222));
        validApellLbl.setForeground(new Color(213, 216, 222));
        informacionTBn.setVisible(false);
    }
    
    /**
     * Metodo sobrescrito de la clase comunicador mensaje de confirmación de
     * registro exitoso.
     *
     * @param mensaje String con mensaje de confirmacion de registro.
     */
    @Override
    public void setMensaje(String mensaje) {
        switch (mensaje) {
            case "El numero de empleado ya existe":
                numeroTFd.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(new Color(255, 106, 106)),
                        BORDER_ORIGINAL));
                validNumLbl.setText("El numero del empleado ya existe");
                validNumLbl.setForeground(new Color(240, 0, 0));
                break;
            case "Se ha guardado existosamente":
                JOptionPane.showMessageDialog(this, mensaje,
                        "Informacion", JOptionPane.INFORMATION_MESSAGE);
                break;
            case "Se ha modificado existosamente":
                JOptionPane.showMessageDialog(this, mensaje,
                        "Informacion", JOptionPane.INFORMATION_MESSAGE);
                break;
            default:
                JOptionPane.showMessageDialog(this, mensaje,
                        "Informacion", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    /**
     * Metodo que recibe una matriz, donde se obtendran sus valores para
     * añadirlos a la modelo de la tabla, también se ocultara la columna id y se
     * le dara se redefinira el ancho de la columna 0.
     *
     * @param info Matriz String para vaciar en tabla
     */
    @Override
    public void setTabla(String[][] info) {
        if(buscando){
            buscando = false;
            if(info != null){
                for(int x = 0; x < info.length; x++){
                    if(guardarBtn.getText().equals("Modificar") &&
                        info[x][0].equals(idEmpleadoActual)){
                        continue;
                    }
                    if(info[x][0].equals(numeroTFd.getText())){
                        if(almacenando){
                            setMensaje("Ya existe un empleado con numero\n"+info[x][0]);
                        }
                        problema = true;
                        break;
                    }
                }
            }
        }else if(info == null){
            setMensaje("No se encontraron coincidencias");
        }else{
            model.setDataVector(info, titulosTabla);
            TableColumn tc = tablaTbl.getColumnModel().getColumn(2);
            tc.setCellEditor(tablaTbl.getDefaultEditor(Boolean.class));
            tc.setCellRenderer(tablaTbl.getDefaultRenderer(Boolean.class));
            //Esconder columna ID
            tablaTbl.getColumnModel().getColumn(1).setPreferredWidth(330);
        }
    }

    /**
     * Metodo sobrescrito de la clase Comunicador, agrega al modelo de los ComboBox
     * la información que proviende de las entidades.
     * 
     * @param info
     * @param i
     */
    @Override
    public void setLista(List info, int i) {
        if (info.isEmpty()) {
            return;
        }
        switch (i) {
            case 1:
                puestoModel.removeAllElements();
                for (int j = 0; j < info.size(); j++) {
                    puestoModel.addElement(info.get(j));
                }
                puestoModel.insertElementAt(new Puesto(), 0);
                Puesto obj =(Puesto)puestoModel.getElementAt(1);
                puestoCBx.setSelectedIndex(0);
                break;
            case 2:
                plantelModel.removeAllElements();
                for (int j = 0; j < info.size(); j++) {
                    plantelModel.addElement(info.get(j));
                }
                plantelModel.insertElementAt(new Plantel(), 0);
                plantelCBx.setSelectedIndex(0);
                break;
            case 3:
                dptoModel.removeAllElements();
                for (int j = 0; j < info.size(); j++) {
                    dptoModel.addElement(info.get(j));
                }
                dptoModel.insertElementAt(new Departamento(), 0);
                departamentoCBx.setSelectedIndex(0);
                break;
            case 4:
                adscripModel.removeAllElements();
                adscBuscarModel.removeAllElements();
                adscBuscarModel.addElement(new Adscripcion());
                for (int j = 0; j < info.size(); j++) {
                    adscripModel.addElement(info.get(j));
                    adscBuscarModel.addElement(info.get(j));
                }
                adscripModel.insertElementAt(new Departamento(), 0);
                adscBuscarModel.insertElementAt("BUSCAR TODOS", 0);
                adscCBx.setSelectedIndex(0);
                adscBuscarCBx.setSelectedIndex(0);
                break;
            case 5:
                direccionModel.removeAllElements();
                for (int j = 0; j < info.size(); j++) {
                    direccionModel.addElement(info.get(j));
                }
                direccionModel.insertElementAt(new Direccion(), 0);
                adscCBx.setSelectedIndex(0);
                break;
            default: break;
        }
    }

    /**
     * Metodo se manda hacer consultas de tablas y e insertar los valores en los
     * modelos de los ComboBox
     */
    public void llenarTodo() {
        nombreBuscarTFd.setText("");
        control.buscarTodos();
        control.setClass(Puesto.class);
        control.buscarTodosLista(1);
        control.setClass(Plantel.class);
        control.buscarTodosLista(2);
        control.setClass(Departamento.class);
        control.buscarTodosLista(3);
        control.setClass(Adscripcion.class);
        control.buscarTodosLista(4);
        control.setClass(Direccion.class);
        control.buscarTodosLista(5);
        control.setClass(Empleado.class);
        limpiar();
    }

    /**
     * Metodo sobrescrito de la clase comunicador que recibe una Lista con la
     * los resultados de una busqueda especifica y vaciarlo en los campos y
     * checkbox
     *
     * @param info Lista de Objeto con información de búsqueda.
     */
    @Override
    public void setInfo(List info) {
        idEmpleadoActual = (String) info.get(0);
        numeroTFd.setText(idEmpleadoActual);
        primerNombreTFd.setText((String) info.get(1));
        segNombreTFd.setText((String) info.get(2));
        primerApellidoTFd.setText((String) info.get(3));
        segApellidoTFd.setText((String) info.get(4));
        puestoModel.setSelectedItem(info.get(5));
        String[] correo = ((String) info.get(6)).split("@");
        correoTFd.setText(correo[0]);
        plantelModel.setSelectedItem(info.get(7));
        adscripModel.setSelectedItem(info.get(8));
        dptoModel.setSelectedItem(info.get(9));
        direccionModel.setSelectedItem(info.get(10));
        adscCBx.setEnabled(true);
        if(info.get(9) != null){
            departamentoCBx.setEnabled(true);
        }else if(info.get(7) != null){
            plantelCBx.setEnabled(true);
        }else if(info.get(10) != null){
            direccionCBx.setEnabled(true);
        }
        puestoCBx.setEnabled(true);
        guardarBtn.setText("Modificar");
    }

    
    /**
     * Evento ejecutado al ganar un campo el foco, donde manda cambiar el borde
     * a la configuracion inicial.
     * @param e Evento al perder foco
     */
    @Override
    public void focusGained(FocusEvent e) {
        Object fuente = e.getSource();
        if (fuente == numeroTFd) {
            numeroTFd.setBorder(BORDER_ORIGINAL);
            validNumLbl.setForeground(new Color(213, 216, 222));
        } else if (fuente == primerNombreTFd) {
            primerNombreTFd.setBorder(BORDER_ORIGINAL);
            validNombLbl.setForeground(new Color(213, 216, 222));
        } else if (fuente == primerApellidoTFd) {
            primerApellidoTFd.setBorder(BORDER_ORIGINAL);
            validApellLbl.setForeground(new Color(213, 216, 222));
        } else if (fuente == correoTFd) {
            correoTFd.setBorder(BORDER_ORIGINAL);
            validCorreoLbl.setForeground(new Color(213, 216, 222));
        } else if (fuente == adscCBx){
            adscCBx.setBorder(BORDER_ORIGINAL_CBX);
            validAdsLbl.setForeground(new Color(213, 216, 222));
        } else if (fuente == puestoCBx){
            puestoCBx.setBorder(BORDER_ORIGINAL_CBX);
            validPuestoLbl.setForeground(new Color(213, 216, 222));
        } else if (fuente == departamentoCBx){
            departamentoCBx.setBorder(BORDER_ORIGINAL_CBX);
            validDptoLbl.setForeground(new Color(213, 216, 222));
        } else if (fuente == plantelCBx){
            plantelCBx.setBorder(BORDER_ORIGINAL_CBX);
            validPlantelLbl.setForeground(new Color(213, 216, 222));
        } else if (fuente == direccionCBx){
            direccionCBx.setBorder(BORDER_ORIGINAL_CBX);
            validDirLbl.setForeground(new Color(213, 216, 222));
        }
    }

    /**
     * Evento ejecutado al perder un campo el foco, donde manda cambiar el borde
     * de color a rojo y colocando un mensaje para indicando que el campo es 
     * obligatorio
     * @param e Evento al perder foco
     */
    @Override
    public void focusLost(FocusEvent e) {
        Object fuente = e.getSource();
        if (fuente == numeroTFd) {
            if (numeroTFd.getText().isEmpty()) {
                numeroTFd.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(new Color(255, 106, 106)),
                        BORDER_ORIGINAL));
                validNumLbl.setText("Este campo es obligatorio");
                validNumLbl.setForeground(new Color(240, 0, 0));
            } else {
                control.validarPorNumero(Integer.parseInt(numeroTFd.getText()));
//                numeroTFd.setBorder(BORDER_ORIGINAL);
//                validNumLbl.setForeground(new Color(213, 216, 222));

            }
        } else if (fuente == primerNombreTFd) {
            if (primerNombreTFd.getText().isEmpty()) {
                primerNombreTFd.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(new Color(255, 106, 106)),
                        BORDER_ORIGINAL));
                validNombLbl.setForeground(new Color(240, 0, 0));
            }
        } else if (fuente == primerApellidoTFd) {
            if (primerApellidoTFd.getText().isEmpty()) {
                primerApellidoTFd.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(new Color(255, 106, 106)),
                        BORDER_ORIGINAL));
                validApellLbl.setForeground(new Color(240, 0, 0));
            }
        } else if (fuente == correoTFd) {
            if (correoTFd.getText().isEmpty()) {
                correoTFd.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(new Color(255, 106, 106)),
                        BORDER_ORIGINAL));
                validCorreoLbl.setForeground(new Color(240, 0, 0));
            }
        } else if (fuente == puestoCBx){
            if(puestoCBx.getSelectedIndex() == 0){
                puestoCBx.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(new Color(255, 106, 106)),
                        BORDER_ORIGINAL_CBX));
                validPuestoLbl.setForeground(new Color(240, 0, 0));
            }
        } else if (fuente == adscCBx) {
            if(adscCBx.getSelectedIndex() == 0){
                adscCBx.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(new Color(255, 106, 106)),
                        BORDER_ORIGINAL_CBX));
                validAdsLbl.setForeground(new Color(240, 0, 0));
            }
        } else if (fuente == plantelCBx) {
            if(plantelCBx.getSelectedIndex() == 0){
                plantelCBx.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(new Color(255, 106, 106)),
                        BORDER_ORIGINAL_CBX));
                validPlantelLbl.setForeground(new Color(240, 0, 0));
            }
        } else if (fuente == departamentoCBx) {
            if(departamentoCBx.getSelectedIndex() == 0){
                departamentoCBx.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(new Color(255, 106, 106)),
                        BORDER_ORIGINAL_CBX));
                validDptoLbl.setForeground(new Color(240, 0, 0));
            }
        } else if (fuente == direccionCBx) {
            if(direccionCBx.getSelectedIndex() == 0){
                direccionCBx.setBorder(BorderFactory.createCompoundBorder(
                        BorderFactory.createLineBorder(new Color(255, 106, 106)),
                        BORDER_ORIGINAL_CBX));
                validDirLbl.setForeground(new Color(240, 0, 0));
            }
        }
    }

    /**
     * Metodo sobrescrito de la clase comunicador mensaje de confirmación de
     * registro exitoso, modificacion o eliminación.
     *
     * @param evento objecto de eventos 
     */
    @Override
    public void llenarDatos(Object evento) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}

