/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.edu.cobach.vista;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import mx.edu.cobach.persistencia.entidades.Evento;
import mx.edu.cobach.persistencia.entidades.Departamento;
import mx.edu.cobach.persistencia.entidades.Direccion;
import mx.edu.cobach.persistencia.entidades.Empleado;
import mx.edu.cobach.persistencia.entidades.EnunciadoLogistica;
import mx.edu.cobach.persistencia.entidades.ImplementacionEvento;
import mx.edu.cobach.persistencia.entidades.ImplementacionEventoEnunciadoLogistica;
import mx.edu.cobach.persistencia.entidades.Plantel;
import mx.edu.cobach.persistencia.entidades.Proveedor;
import mx.edu.cobach.persistencia.entidades.Puesto;
import mx.edu.cobach.persistencia.entidades.Sede;
import mx.edu.cobach.vista.controlador.HelperEntidad;
import mx.edu.cobach.vista.controlador.ImplementarEventoControlador;

/**
 * Esta clase mostrara la interfaz de los eventos a realizar, agregando el
 * proveedor del eventp, la sede sus respectivas fechas igual o inferiores a la
 * actual y la lista de asistencia
 *
 * @author liuts
 */
public class PnlEventoRealizado extends javax.swing.JPanel implements Comunicador {

    /**
     * Creates new form PnlEventoRealizado
     */
    private static ImplementarEventoControlador control;
    private int eventoProgramarId;
    private final DefaultComboBoxModel sedeModel;
    private final DefaultComboBoxModel proveedorModel;
    private final DefaultComboBoxModel tipoModel;
    private final DefaultComboBoxModel campoModel;
    private DefaultTableModel modelTablaEn;
    private DefaultTableModel modelTablaEmI;
    private DefaultTableModel modelTablaEmF;
    private String[] titulosTablaEn = {"ID", "Tipo", "Enunciado",
        "Calificación"};
    private String[] titulosTablaEm = {"ID", "Numero del Empleado",
        "Nombre del Empleado"};
    private Evento evento;
    private boolean cambio = false;

    public PnlEventoRealizado() {
        initComponents();
        sedeModel = new DefaultComboBoxModel();
        proveedorModel = new DefaultComboBoxModel();
        tipoModel = new DefaultComboBoxModel();
        campoModel = new DefaultComboBoxModel();

        modelTablaEn = new DefaultTableModel(titulosTablaEn, 0);
        enunciadoTbl.setModel(modelTablaEn);
        enunciadoTbl.setColumnSelectionAllowed(false);
        enunciadoTbl.setDragEnabled(false);

        modelTablaEmI = new DefaultTableModel(titulosTablaEm, 0);
        tablaLisITbl.setModel(modelTablaEmI);
        tablaLisITbl.setColumnSelectionAllowed(false);
        tablaLisITbl.setDragEnabled(false);

        modelTablaEmF = new DefaultTableModel(titulosTablaEm, 0);
        tablaLisFTbl.setModel(modelTablaEmF);
        tablaLisFTbl.setColumnSelectionAllowed(false);
        tablaLisFTbl.setDragEnabled(false);

        tipoSedeGCBx.setModel(sedeModel);
        nombreGCBx.setModel(proveedorModel);
        tipoLACBx.setModel(tipoModel);
        campoModel.addElement("");
        campoModel.addElement("Nombre");
        campoModel.addElement("Departamento");
        campoModel.addElement("Puesto");
        campoModel.addElement("Plantel");
        campoModel.addElement("Departamento Y Nombre_Empleado");
        campoModel.addElement("Puestos Y Nombre_Empleado");
        campoModel.addElement("Plantel Y Nombre_Empleado");
        campoModel.addElement("Direccion Y Nombre_Empleado");
        campoCBx.setModel(campoModel);
        control = new ImplementarEventoControlador(this, ImplementacionEvento.class);
        fechaIDCh.getJCalendar().setMaxSelectableDate(new Date());
        fechaTDCh.getJCalendar().setMaxSelectableDate(new Date());
        tabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        informacionTP = new javax.swing.JTabbedPane();
        generalPnl = new javax.swing.JPanel();
        nombreGLbl = new javax.swing.JLabel();
        fechaILbl = new javax.swing.JLabel();
        fechaTLbl = new javax.swing.JLabel();
        tipoGLbl = new javax.swing.JLabel();
        sedeGLbl = new javax.swing.JLabel();
        nombrePrLbl = new javax.swing.JLabel();
        descripcionLbl = new javax.swing.JLabel();
        nombreGTFd = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        descripcionGTAa = new javax.swing.JTextArea();
        tipoGCBx = new javax.swing.JComboBox();
        tipoSedeGCBx = new javax.swing.JComboBox();
        nombreGCBx = new javax.swing.JComboBox();
        guardarGBtn = new javax.swing.JButton();
        fechaIDCh = new com.toedter.calendar.JDateChooser();
        fechaTDCh = new com.toedter.calendar.JDateChooser();
        agregarGLbl = new javax.swing.JLabel();
        notaGLbl = new javax.swing.JLabel();
        cancelarGBtn = new javax.swing.JButton();
        listaPnl = new javax.swing.JPanel();
        campoLbl = new javax.swing.JLabel();
        campoCBx = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaLisITbl = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaLisFTbl = new javax.swing.JTable();
        guardarLABtn = new javax.swing.JButton();
        nombreLATFd = new javax.swing.JTextField();
        nombreLALbl = new javax.swing.JLabel();
        listaAsistenciaLALbl = new javax.swing.JLabel();
        nota_LI_Lbl = new javax.swing.JLabel();
        agregarBtn = new javax.swing.JButton();
        agregarTBtn = new javax.swing.JButton();
        eliminarBtn = new javax.swing.JButton();
        eliminarTBtn = new javax.swing.JButton();
        seleccionLALbl = new javax.swing.JLabel();
        tipoLACBx = new javax.swing.JComboBox();
        buscarLABtn = new javax.swing.JButton();
        agregarLALbl = new javax.swing.JLabel();
        listaCandidatosLALbl = new javax.swing.JLabel();
        cancelarLABtn = new javax.swing.JButton();
        calificacionPnl = new javax.swing.JPanel();
        guardarCBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        enunciadoTbl = new javax.swing.JTable();
        agregarCLbl = new javax.swing.JLabel();
        nota_CL_Lbl = new javax.swing.JLabel();
        cancelarCBtn = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        informacionTP.setPreferredSize(new java.awt.Dimension(739, 472));

        nombreGLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreGLbl.setText("Nombre del evento:");

        fechaILbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fechaILbl.setText("Fecha inicial de evento:");

        fechaTLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fechaTLbl.setText("Fecha de terminación del evento:");

        tipoGLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoGLbl.setText("Tipo de evento:");

        sedeGLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sedeGLbl.setText("Sede del evento:");

        nombrePrLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombrePrLbl.setText("Nombre de Proveedor:");

        descripcionLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        descripcionLbl.setText("Descripcion del evento:");

        nombreGTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreGTFd.setEnabled(false);

        descripcionGTAa.setColumns(20);
        descripcionGTAa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        descripcionGTAa.setRows(5);
        descripcionGTAa.setEnabled(false);
        jScrollPane1.setViewportView(descripcionGTAa);

        tipoGCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoGCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CONFERENCIA", "TALLER", "CURSO", "CURSO / TALLER", "PLATICA" }));
        tipoGCBx.setEnabled(false);
        tipoGCBx.setMaximumSize(new java.awt.Dimension(100, 23));

        tipoSedeGCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoSedeGCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        tipoSedeGCBx.setEnabled(false);
        tipoSedeGCBx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tipoSedeGCBxItemStateChanged(evt);
            }
        });

        nombreGCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreGCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        nombreGCBx.setEnabled(false);
        nombreGCBx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nombreGCBxItemStateChanged(evt);
            }
        });

        guardarGBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        guardarGBtn.setText("Guardar");
        guardarGBtn.setEnabled(false);
        guardarGBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarGBtnActionPerformed(evt);
            }
        });

        fechaIDCh.setDateFormatString("dd/MM/yyyy");
        fechaIDCh.setEnabled(false);

        fechaTDCh.setDateFormatString("dd/MM/yyyy");
        fechaTDCh.setEnabled(false);

        agregarGLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        agregarGLbl.setText("Agregar");

        notaGLbl.setText("Ingrese la información a almacenar");

        cancelarGBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelarGBtn.setText("Cancelar");
        cancelarGBtn.setEnabled(false);
        cancelarGBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarGBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout generalPnlLayout = new javax.swing.GroupLayout(generalPnl);
        generalPnl.setLayout(generalPnlLayout);
        generalPnlLayout.setHorizontalGroup(
            generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalPnlLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(generalPnlLayout.createSequentialGroup()
                        .addComponent(sedeGLbl)
                        .addGap(32, 32, 32)
                        .addComponent(tipoSedeGCBx, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(nombrePrLbl)
                        .addGap(18, 18, 18)
                        .addComponent(nombreGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(generalPnlLayout.createSequentialGroup()
                        .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(generalPnlLayout.createSequentialGroup()
                                .addGap(459, 459, 459)
                                .addComponent(cancelarGBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(guardarGBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(generalPnlLayout.createSequentialGroup()
                                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(agregarGLbl)
                                    .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(fechaILbl)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generalPnlLayout.createSequentialGroup()
                                            .addComponent(nombreGLbl)
                                            .addGap(304, 304, 304)))
                                    .addComponent(notaGLbl))
                                .addGap(123, 123, 123)
                                .addComponent(tipoGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(generalPnlLayout.createSequentialGroup()
                                .addComponent(descripcionLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(generalPnlLayout.createSequentialGroup()
                                        .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(nombreGTFd, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(generalPnlLayout.createSequentialGroup()
                                                .addComponent(fechaIDCh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(14, 14, 14)))
                                        .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(generalPnlLayout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addComponent(tipoGLbl))
                                            .addGroup(generalPnlLayout.createSequentialGroup()
                                                .addGap(11, 11, 11)
                                                .addComponent(fechaTLbl)
                                                .addGap(18, 18, 18)
                                                .addComponent(fechaTDCh, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(11, Short.MAX_VALUE))))
        );
        generalPnlLayout.setVerticalGroup(
            generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalPnlLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(agregarGLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notaGLbl)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(generalPnlLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tipoGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tipoGLbl)
                            .addComponent(nombreGTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nombreGLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(fechaIDCh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(fechaILbl))
                            .addComponent(fechaTDCh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(generalPnlLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fechaTLbl)))
                .addGap(70, 70, 70)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombrePrLbl)
                    .addComponent(sedeGLbl)
                    .addComponent(tipoSedeGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(79, 79, 79)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descripcionLbl)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarGBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarGBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );

        informacionTP.addTab("General", generalPnl);

        campoLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoLbl.setText("Selecciona un campo:");

        campoCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nombre", "Departamento", "Plantel", "Puesto" }));
        campoCBx.setEnabled(false);
        campoCBx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                campoCBxItemStateChanged(evt);
            }
        });

        tablaLisITbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Numero del empleado", "Nombre del empleado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaLisITbl.setEnabled(false);
        jScrollPane4.setViewportView(tablaLisITbl);
        if (tablaLisITbl.getColumnModel().getColumnCount() > 0) {
            tablaLisITbl.getColumnModel().getColumn(0).setResizable(false);
            tablaLisITbl.getColumnModel().getColumn(1).setResizable(false);
        }

        tablaLisFTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Numero del empleado", "Nombre del empleado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaLisFTbl.setEnabled(false);
        jScrollPane5.setViewportView(tablaLisFTbl);
        if (tablaLisFTbl.getColumnModel().getColumnCount() > 0) {
            tablaLisFTbl.getColumnModel().getColumn(0).setResizable(false);
            tablaLisFTbl.getColumnModel().getColumn(1).setResizable(false);
        }

        guardarLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        guardarLABtn.setText("Guardar");
        guardarLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarLABtnActionPerformed(evt);
            }
        });

        nombreLATFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreLATFd.setEnabled(false);
        nombreLATFd.setMaximumSize(new java.awt.Dimension(6, 23));
        nombreLATFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreLATFdKeyTyped(evt);
            }
        });

        nombreLALbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreLALbl.setText("Nombre del Empleado:");
        nombreLALbl.setAutoscrolls(true);

        listaAsistenciaLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listaAsistenciaLALbl.setText("Lista de asistencia");

        nota_LI_Lbl.setText("Ingrese la información a almacenar");

        agregarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        agregarBtn.setText(">");
        agregarBtn.setToolTipText("Seleccioné un empleado para la lista de asistencia");
        agregarBtn.setEnabled(false);
        agregarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBtnActionPerformed(evt);
            }
        });

        agregarTBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        agregarTBtn.setText(">>");
        agregarTBtn.setToolTipText("Agregar todos los empleados");
        agregarTBtn.setEnabled(false);
        agregarTBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarTBtnActionPerformed(evt);
            }
        });

        eliminarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        eliminarBtn.setText("<");
        eliminarBtn.setToolTipText("Seleccioné un empleado a eliminar");
        eliminarBtn.setEnabled(false);
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });

        eliminarTBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        eliminarTBtn.setText("<<");
        eliminarTBtn.setToolTipText("Eliminar todos los empleados");
        eliminarTBtn.setEnabled(false);
        eliminarTBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarTBtnActionPerformed(evt);
            }
        });

        seleccionLALbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        seleccionLALbl.setText("Nombre del Departamento:");
        seleccionLALbl.setAutoscrolls(true);

        tipoLACBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoLACBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nombre", "Departamento", "Plantel", "Puesto" }));
        tipoLACBx.setAutoscrolls(true);
        tipoLACBx.setEnabled(false);
        tipoLACBx.setMaximumSize(new java.awt.Dimension(117, 23));

        buscarLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buscarLABtn.setText("Buscar");
        buscarLABtn.setAutoscrolls(true);
        buscarLABtn.setEnabled(false);
        buscarLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarLABtnActionPerformed(evt);
            }
        });

        agregarLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        agregarLALbl.setText("Agregar");

        listaCandidatosLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listaCandidatosLALbl.setText("Lista de posibles candidados");

        cancelarLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelarLABtn.setText("Cancelar");
        cancelarLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarLABtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listaPnlLayout = new javax.swing.GroupLayout(listaPnl);
        listaPnl.setLayout(listaPnlLayout);
        listaPnlLayout.setHorizontalGroup(
            listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(cancelarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(guardarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(listaCandidatosLALbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(listaAsistenciaLALbl)
                .addGap(117, 117, 117))
            .addGroup(listaPnlLayout.createSequentialGroup()
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listaPnlLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(listaPnlLayout.createSequentialGroup()
                        .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(listaPnlLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(agregarLALbl)
                                    .addComponent(campoLbl)
                                    .addComponent(nota_LI_Lbl)))
                            .addGroup(listaPnlLayout.createSequentialGroup()
                                .addContainerGap(34, Short.MAX_VALUE)
                                .addComponent(campoCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(50, 50, 50)))
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listaPnlLayout.createSequentialGroup()
                        .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(agregarTBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(agregarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(eliminarBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eliminarTBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(25, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                        .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buscarLABtn)
                            .addGroup(listaPnlLayout.createSequentialGroup()
                                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(seleccionLALbl)
                                    .addComponent(nombreLALbl))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tipoLACBx, 0, 226, Short.MAX_VALUE)
                                    .addComponent(nombreLATFd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(25, 25, 25))))
        );
        listaPnlLayout.setVerticalGroup(
            listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listaPnlLayout.createSequentialGroup()
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listaPnlLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(agregarLALbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nota_LI_Lbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addComponent(campoCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(listaPnlLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nombreLALbl)
                            .addComponent(nombreLATFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(seleccionLALbl)
                            .addComponent(tipoLACBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(buscarLABtn)))
                .addGap(18, 18, 18)
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listaAsistenciaLALbl, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(listaCandidatosLALbl, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                        .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(guardarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancelarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                        .addComponent(agregarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(agregarTBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(eliminarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(eliminarTBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(128, 128, 128))))
        );

        informacionTP.addTab("Lista de asistencia", null, listaPnl, "");

        guardarCBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        guardarCBtn.setText("Guardar");
        guardarCBtn.setEnabled(false);
        guardarCBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarCBtnActionPerformed(evt);
            }
        });

        enunciadoTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Tipo", "Enunciado", "Calificación"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        enunciadoTbl.setEnabled(false);
        jScrollPane2.setViewportView(enunciadoTbl);
        if (enunciadoTbl.getColumnModel().getColumnCount() > 0) {
            enunciadoTbl.getColumnModel().getColumn(0).setResizable(false);
            enunciadoTbl.getColumnModel().getColumn(1).setResizable(false);
            enunciadoTbl.getColumnModel().getColumn(2).setResizable(false);
        }

        agregarCLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        agregarCLbl.setText("Agregar");

        nota_CL_Lbl.setText("Ingrese la información a almacenar");

        cancelarCBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelarCBtn.setText("Cancelar");
        cancelarCBtn.setEnabled(false);
        cancelarCBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarCBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout calificacionPnlLayout = new javax.swing.GroupLayout(calificacionPnl);
        calificacionPnl.setLayout(calificacionPnlLayout);
        calificacionPnlLayout.setHorizontalGroup(
            calificacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, calificacionPnlLayout.createSequentialGroup()
                .addGroup(calificacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(calificacionPnlLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelarCBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(guardarCBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(calificacionPnlLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(calificacionPnlLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(calificacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nota_CL_Lbl)
                    .addComponent(agregarCLbl))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        calificacionPnlLayout.setVerticalGroup(
            calificacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, calificacionPnlLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(agregarCLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nota_CL_Lbl)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(calificacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarCBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarCBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        informacionTP.addTab("Calificación de logística ", calificacionPnl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(informacionTP, javax.swing.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(informacionTP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Evento ejecutado al hacer seleccionar un campo de la lista de posibles
     * busquedas por el usuario
     *
     * @param evt Evento al presionar el boton
     */
    private void campoCBxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_campoCBxItemStateChanged
        switch ((String) campoCBx.getSelectedItem()) {
            case "":
                visibilidadBusNombre(false);
                visibilidadBusTipo(false);
                break;
            case "Nombre":
                visibilidadBusTipo(false);
                visibilidadBusNombre(true);
                break;
            case "Departamento":
                visibilidadBusNombre(false);
                visibilidadBusTipo(true);
                control.setClass(Departamento.class);
                control.buscarTodosLista(3);
                seleccionLALbl.setText("Nombre del Departamento:");
                break;
            case "Plantel":
                visibilidadBusNombre(false);
                visibilidadBusTipo(true);
                control.setClass(Plantel.class);
                control.buscarTodosLista(3);
                seleccionLALbl.setText("Nombre del Plantel:");
                break;
            case "Puesto":
                visibilidadBusNombre(false);
                visibilidadBusTipo(true);
                control.setClass(Puesto.class);
                control.buscarTodosLista(3);
                seleccionLALbl.setText("Nombre del Puesto:");
                break;

            case "Direccion":
                visibilidadBusNombre(false);
                visibilidadBusTipo(true);
                control.setClass(Direccion.class);
                control.buscarTodosLista(3);
                seleccionLALbl.setText("Nombre del Direccion:");
                break;
            case "Departamento Y Nombre_Empleado":
                visibilidadBusNombre(true);
                visibilidadBusTipo(true);
                control.setClass(Departamento.class);
                control.buscarTodosLista(3);
                seleccionLALbl.setText("Nombre del Departamento:");
                break;
            case "Plantel Y Nombre_Empleado":
                visibilidadBusNombre(true);
                visibilidadBusTipo(true);
                control.setClass(Plantel.class);
                control.buscarTodosLista(3);
                seleccionLALbl.setText("Nombre del Plantel:");
                break;
            case "Puestos Y Nombre_Empleado":
                visibilidadBusNombre(true);
                visibilidadBusTipo(true);
                control.setClass(Puesto.class);
                control.buscarTodosLista(3);
                seleccionLALbl.setText("Nombre del Puesto:");
                break;
            case "Direccion Y Nombre_Empleado":
                visibilidadBusNombre(true);
                visibilidadBusTipo(true);
                control.setClass(Direccion.class);
                control.buscarTodosLista(3);
                seleccionLALbl.setText("Nombre del Direccion:");
                break;
        }
    }//GEN-LAST:event_campoCBxItemStateChanged
    /**
     * Evento ejecutado al hacer click se buscara al empleado dependiendo de del
     * campo seleccionado
     *
     * @param evt Evento al presionar el boton
     */
    private void buscarLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarLABtnActionPerformed
        control.setClass(Empleado.class);
        switch ((String) campoCBx.getSelectedItem()) {
            case "Nombre":
                if (nombreLATFd.getText().equals("")) {
                    control.buscarEmpN(nombreLATFd.getText());
                } else {
                    control.buscarTodos();
                }
                break;
            case "Departamento":
                control.buscarEmpD((Departamento) tipoLACBx.getSelectedItem());
                break;
            case "Plantel":
                control.buscarEmpPl((Plantel) tipoLACBx.getSelectedItem());
                break;
            case "Puesto":
                control.buscarEmpPu((Puesto) tipoLACBx.getSelectedItem());
                break;
            case "Direccion":
                control.buscarEmpDi((Direccion) tipoLACBx.getSelectedItem());
                break;
            case "Departamento Y Nombre_Empleado":
                control.buscarEmpPorDepartamentoNEmpleado((Departamento) tipoLACBx.getSelectedItem(), nombreLATFd.getText());
                break;
            case "Plantel Y Nombre_Empleado":
                control.buscarEmpPorPlantelNEmpleado((Plantel) tipoLACBx.getSelectedItem(), nombreLATFd.getText());
                break;
            case "Puesto Y Nombre_Empleado":
                control.buscarEmpPorPuestoNEmpleado((Puesto) tipoLACBx.getSelectedItem(), nombreLATFd.getText());
                break;
            case "Direccion Y Nombre_Empleado":
                control.buscarEmpPorDireccionEmpleado((Direccion) tipoLACBx.getSelectedItem(),nombreLATFd.getText());                    
                break;
        }
    }//GEN-LAST:event_buscarLABtnActionPerformed
    /**
     * Evento ejecutado al hacer click agregara al empleado de la lista de
     * posibles candidatos
     *
     * @param evt Evento al presionar el boton
     */
    private void agregarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBtnActionPerformed
        if (tablaLisITbl.getSelectedRow() >= 0) {
            agregarEmpleadosTabla(Integer.parseInt((String) modelTablaEmI
                    .getValueAt(tablaLisITbl.getSelectedRow(), 0)));
        }
    }//GEN-LAST:event_agregarBtnActionPerformed
    /**
     * Evento ejecutado al hacer click eliminando al empleado seleccionado en la
     * lista de asistenciatablaLisFTb.
     *
     * @param evt Evento al presionar el boton
     */
    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        if (JOptionPane.showConfirmDialog(this, "¿Desea eliminar al empleado de "
                + "la lista de asistencia?", "Precaucion",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0) {
            this.cambio = true;
            if (tablaLisFTbl.getSelectedRow() >= 0) {
                int cont = 0;
                Object[][] tableData = new Object[tablaLisFTbl.getRowCount() - 1][modelTablaEmF.getColumnCount()];
                for (int i = 0; i < tablaLisFTbl.getRowCount(); i++) {
                    if (((String) modelTablaEmF.getValueAt(i, 0)).
                            compareTo((String) modelTablaEmF.getValueAt(tablaLisFTbl.getSelectedRow(), 0)) != 0) {
                        tableData[cont][0] = modelTablaEmF.getValueAt(i, 0);
                        tableData[cont][1] = modelTablaEmF.getValueAt(i, 1);
                        tableData[cont][2] = modelTablaEmF.getValueAt(i, 2);
                        cont++;
                    }
                }
                modelTablaEmF.setDataVector(tableData, titulosTablaEm);
                TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
                tablaLisFTbl.getColumnModel().removeColumn(tc);
            }
        }
    }//GEN-LAST:event_eliminarBtnActionPerformed

    /**
     * Evento ejecutado al hacer click agregara a todos los empleados a la lista
     * de asistencia
     *
     * @param evt Evento al presionar el boton
     */
    private void agregarTBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarTBtnActionPerformed
        for (int i = 0; i < modelTablaEmI.getRowCount(); i++) {
            agregarEmpleadosTabla(i);
        }
    }//GEN-LAST:event_agregarTBtnActionPerformed
    /**
     * Evento ejecutado al hacer click eliminando a todas las personas de la
     * lista de asistencia tablaLisFTb.
     *
     * @param evt Evento al presionar el boton
     */
    private void eliminarTBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarTBtnActionPerformed
        if (JOptionPane.showConfirmDialog(this, "¿Desea eliminar toda la lista "
                + "de asistencia?", "Precaucion",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0) {
            this.cambio = true;
            modelTablaEmF.setDataVector(null, titulosTablaEm);
            TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
            tablaLisFTbl.getColumnModel().removeColumn(tc);
        }
    }//GEN-LAST:event_eliminarTBtnActionPerformed

    /**
     * Metodo que permite agregar los empleados en la tabla de asistencia
     */
    private void agregarEmpleadosTabla(int valor) {
        boolean bandera = false;
        this.cambio = true;
        tablaLisFTbl.setEnabled(true);
        for (int j = 0; j < modelTablaEmF.getRowCount(); j++) {
            if (modelTablaEmI.getValueAt(valor, 0).equals(modelTablaEmF.getValueAt(j, 0))) {
                bandera = true;
            }
        }
        if (bandera == false) {
            Object[][] tableData = new Object[modelTablaEmF.getRowCount() + 1][modelTablaEmF.getColumnCount()];
            //ciclo que pasa la informacion de la tabla de lista 
            //final para que al final sea agregado el nuevo empleado a 
            //esta matriz
            for (int k = 0; k < modelTablaEmF.getRowCount(); k++) {
                for (int j = 0; j < modelTablaEmF.getColumnCount(); j++) {
                    tableData[k][j] = modelTablaEmF.getValueAt(k, j);
                }
            }
            tableData[modelTablaEmF.getRowCount()][0] = modelTablaEmI.getValueAt(valor, 0);
            tableData[modelTablaEmF.getRowCount()][1] = modelTablaEmI.getValueAt(valor, 1);
            tableData[modelTablaEmF.getRowCount()][2] = modelTablaEmI.getValueAt(valor, 2);
            modelTablaEmF.setDataVector(tableData, titulosTablaEm);
            TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
            tablaLisFTbl.getColumnModel().removeColumn(tc);
        }
        visibilidadOpcT(true);
    }

    /**
     * Evento ejecutado al hacer click mandando a un metodo que guarde la
     * informacion o la modificque.
     *
     * @param evt Evento al presionar el boton
     */
    private void guardarLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarLABtnActionPerformed
        guarMod();
    }//GEN-LAST:event_guardarLABtnActionPerformed
    /**
     * Evento ejecutado al hacer click mandando a un metodo que guarde la
     * informacion o la modificque.
     *
     * @param evt Evento al presionar el boton
     */
    private void guardarCBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarCBtnActionPerformed
        guarMod();
    }//GEN-LAST:event_guardarCBtnActionPerformed
    /**
     * Evento ejecutado al hacer click mandando a un metodo que guarde la
     * informacion o la modificque.
     *
     * @param evt Evento al presionar el boton
     */
    private void guardarGBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarGBtnActionPerformed
        guarMod();
    }//GEN-LAST:event_guardarGBtnActionPerformed
    /**
     * Metodo que valida que el usuario no escriba numeros en el JTextField
     *
     * @param evt
     */
    private void nombreLATFdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreLATFdKeyTyped
        if (Character.isLetter(evt.getKeyChar()) || Character.isISOControl(evt.getKeyChar())
                || Character.isWhitespace(evt.getKeyChar())) {
            evt = evt;
        } else {
            evt.consume();
        }
    }//GEN-LAST:event_nombreLATFdKeyTyped
    /**
     * Este metodo sirve para cancelar el registro o la modificacion de un
     * evento
     *
     * @param evt
     */
    private void cancelarGBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarGBtnActionPerformed
        cancelar();
    }//GEN-LAST:event_cancelarGBtnActionPerformed
    /**
     * Este metodo sirve para cancelar el registro o la modificacion de un
     * evento
     *
     * @param evt
     */
    private void cancelarLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarLABtnActionPerformed
        cancelar();
    }//GEN-LAST:event_cancelarLABtnActionPerformed
    /**
     * Este metodo sirve para cancelar el registro o la modificacion de un
     * evento
     *
     * @param evt
     */
    private void cancelarCBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarCBtnActionPerformed
        cancelar();
    }//GEN-LAST:event_cancelarCBtnActionPerformed

    /**
     * Este metodo sirve para cancelar el proceso de registro o modificacion de
     * un evento
     */
    private void cancelar() {
        int opcion;
        if (guardarGBtn.getText() == "Guardar") {
            opcion = JOptionPane.showConfirmDialog(this, "¿Desea cancelar el "
                    + "registro del evento?", "Precaucion",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        } else {
            opcion = JOptionPane.showConfirmDialog(this, "¿Desea cancelar la "
                    + "modificacion del evento?", "Precaucion",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        }
        if (opcion == 0) {
            this.setVisible(false);
            limpiarCampos();
        }
    }

    /**
     * Metodo para indicar que a habido un cambio en la el panel
     *
     * @param evt
     */
    private void tipoSedeGCBxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tipoSedeGCBxItemStateChanged
        if ((Sede) tipoSedeGCBx.getSelectedItem() != null) {
            if (tipoSedeGCBx.getSelectedItem().toString().compareTo("") != 0) {
                this.cambio = true;
            }
        }
    }//GEN-LAST:event_tipoSedeGCBxItemStateChanged
    /**
     * Metodo para indicar que a habido un cambio en la el panel
     *
     * @param evt
     */
    private void nombreGCBxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nombreGCBxItemStateChanged
        if ((Proveedor) nombreGCBx.getSelectedItem() != null) {
            if (((Proveedor) nombreGCBx.getSelectedItem()).getId() != null) {
                this.cambio = true;
            }
        }
    }//GEN-LAST:event_nombreGCBxItemStateChanged
    /**
     * Metodo que permite mandar a obtener la informacion de todos las sedes y
     * proveedores registrados informacion o la modificque.
     *
     * @param evt Evento al presionar el boton
     */
    public void llenarTodo() {
        tabla();
        control.setClass(Sede.class);
        control.buscarTodosLista(1);
        control.setClass(Proveedor.class);
        control.buscarTodosLista(2);
        control.setClass(EnunciadoLogistica.class);
        control.buscarEncuesta();
        cambio = false;
    }

    /**
     * Metodo que recibe el evento del catalogo para llenar parte de la
     * informacion general del evento a llevar a cabo
     *
     * @param evento
     */
    public void llenarEvento(Evento evento) {
        this.evento = evento;
        agregarGLbl.setText("Agregar evento a realizar");
        agregarLALbl.setText("Agregar evento a realizar");
        guardarGBtn.setText("Guardar");
        guardarLABtn.setText("Guardar");
        nombreGTFd.setText(evento.getNombre());
        descripcionGTAa.setText(evento.getDescripcion());
        if (evento.getTipoEvento().equals("CONFERENCIA")) {
            tipoGCBx.setSelectedIndex(0);
        } else if (evento.getTipoEvento().equals("TALLER")) {
            tipoGCBx.setSelectedIndex(1);
        } else if (evento.getTipoEvento().equals("CURSO")) {
            tipoGCBx.setSelectedIndex(2);
        } else if (evento.getTipoEvento().equals("CURSO / TALLER")) {
            tipoGCBx.setSelectedIndex(3);
        } else if (evento.getTipoEvento().equals("PLATICA")) {
            tipoGCBx.setSelectedIndex(4);
        }
        control.setClass(Sede.class);
        control.buscarTodosLista(1);
        control.setClass(Proveedor.class);
        control.buscarTodosLista(2);
        control.setClass(EnunciadoLogistica.class);
        control.buscarEncuesta();
        cambio = false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarBtn;
    private javax.swing.JLabel agregarCLbl;
    private javax.swing.JLabel agregarGLbl;
    private javax.swing.JLabel agregarLALbl;
    private javax.swing.JButton agregarTBtn;
    private javax.swing.JButton buscarLABtn;
    private javax.swing.JPanel calificacionPnl;
    private javax.swing.JComboBox campoCBx;
    private javax.swing.JLabel campoLbl;
    private javax.swing.JButton cancelarCBtn;
    private javax.swing.JButton cancelarGBtn;
    private javax.swing.JButton cancelarLABtn;
    private javax.swing.JTextArea descripcionGTAa;
    private javax.swing.JLabel descripcionLbl;
    private javax.swing.JButton eliminarBtn;
    private javax.swing.JButton eliminarTBtn;
    private javax.swing.JTable enunciadoTbl;
    private com.toedter.calendar.JDateChooser fechaIDCh;
    private javax.swing.JLabel fechaILbl;
    private com.toedter.calendar.JDateChooser fechaTDCh;
    private javax.swing.JLabel fechaTLbl;
    private javax.swing.JPanel generalPnl;
    private javax.swing.JButton guardarCBtn;
    private javax.swing.JButton guardarGBtn;
    private javax.swing.JButton guardarLABtn;
    private javax.swing.JTabbedPane informacionTP;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel listaAsistenciaLALbl;
    private javax.swing.JLabel listaCandidatosLALbl;
    private javax.swing.JPanel listaPnl;
    private javax.swing.JComboBox nombreGCBx;
    private javax.swing.JLabel nombreGLbl;
    private javax.swing.JTextField nombreGTFd;
    private javax.swing.JLabel nombreLALbl;
    private javax.swing.JTextField nombreLATFd;
    private javax.swing.JLabel nombrePrLbl;
    private javax.swing.JLabel notaGLbl;
    private javax.swing.JLabel nota_CL_Lbl;
    private javax.swing.JLabel nota_LI_Lbl;
    private javax.swing.JLabel sedeGLbl;
    private javax.swing.JLabel seleccionLALbl;
    private javax.swing.JTable tablaLisFTbl;
    private javax.swing.JTable tablaLisITbl;
    private javax.swing.JComboBox tipoGCBx;
    private javax.swing.JLabel tipoGLbl;
    private javax.swing.JComboBox tipoLACBx;
    private javax.swing.JComboBox tipoSedeGCBx;
    // End of variables declaration//GEN-END:variables
    /**
     * Metodo sobrescrito de la clase comunicador mensaje de confirmación de
     * registro o modificacion exitosa.
     *
     * @param mensaje String con mensaje de confirmacion de registro.
     */
    @Override
    public void setMensaje(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje);
    }

    /**
     * Metodo que recibe una matriz, donde se obtendran sus valores para
     * añadirlos a la modelo de la tabla, también se ocultara la columna id y se
     * le dara se redefinira el ancho de la columna 0.
     *
     * @param info Matriz String para vaciar en tabla
     */
    @Override
    public void setTabla(String[][] info) {
        if (info[0][0].contains("TLE1")) {
            //Se checa si la palabra TLE1 se encuentra dentro de la matriz
            info[0][0] = info[0][0].replaceAll("TLE1", "");
            //Se elimina la palabra TLE1 para que solo quede el id puro
            tablaLisITbl.setEnabled(true);
            modelTablaEmI.setDataVector(info, titulosTablaEm);

            TableColumn tc = tablaLisITbl.getColumnModel().getColumn(0);
            tablaLisITbl.getColumnModel().removeColumn(tc);
            visibilidadOpcT(true);

        } else if (info[0][0].contains("TLE2")) {
            info[0][0] = info[0][0].replaceAll("TLE2", "");
            modelTablaEmF.setDataVector(info, titulosTablaEm);
            TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
            tablaLisFTbl.getColumnModel().removeColumn(tc);
        } else if (info[0][0].contains(
                "TLE3")) {
            //Se checa si la palabra TLE3 se encuentra dentro de la matriz
            info[0][0] = info[0][0].replaceAll("TLE3", "");
            //Se elimina la palabra TLE3 para que solo quede el id puro
            enunciadoTbl.setEnabled(true);
            modelTablaEn.setDataVector(info, titulosTablaEn);
            //Contador que decrementa del 10 a 1 para agregarlos a la
            //califiacion de logistica
            JComboBox comboBox = new JComboBox();
            for (int numero = 10; numero > 0; numero--) {
                comboBox.addItem(numero + "");
            }
            TableColumn tc = enunciadoTbl.getColumnModel().getColumn(3);
            tc.setCellEditor(new DefaultCellEditor(comboBox));
            DefaultTableCellRenderer renderer
                    = new DefaultTableCellRenderer();
            renderer.setToolTipText("Califica a la logistica");
            tc.setCellRenderer(renderer);
            tc = enunciadoTbl.getColumnModel().getColumn(0);
            enunciadoTbl.getColumnModel().removeColumn(tc);
        } else if (info[0][0].contains(
                "TLE4")) {
            //Se checa si la palabra TLE4 se encuentra dentro de la matriz
            info[0][0] = info[0][0].replaceAll("TLE4", "");
            //Se elimina la palabra TLE4 para que solo quede el id puro

            Object[][] tableData = new Object[enunciadoTbl.getRowCount()][enunciadoTbl.getColumnCount() + 1];
            for (int i = 0; i < enunciadoTbl.getRowCount(); i++) {
                tableData[i][0] = info[i][0];
                tableData[i][1] = modelTablaEn.getValueAt(i, 1);
                tableData[i][2] = modelTablaEn.getValueAt(i, 2);
                tableData[i][3] = info[i][3];
            }

            enunciadoTbl.setEnabled(true);
            modelTablaEn.setDataVector(tableData, titulosTablaEn);
            //Contador que decrementa del 10 a 1 para agregarlos a la
            //califiacion de logistica
            JComboBox comboBox = new JComboBox();
            for (int numero = 10; numero > 0; numero--) {
                comboBox.addItem(numero + "");
            }
            TableColumn tc = enunciadoTbl.getColumnModel().getColumn(3);
            tc.setCellEditor(new DefaultCellEditor(comboBox));
            DefaultTableCellRenderer renderer
                    = new DefaultTableCellRenderer();
            renderer.setToolTipText("Califica a la logistica");
            tc.setCellRenderer(renderer);
            tc = enunciadoTbl.getColumnModel().getColumn(0);
            enunciadoTbl.getColumnModel().removeColumn(tc);
        }
    }

    /**
     * Metodo sobrescrito de la clase Comunicador
     *
     * @param info
     * @param i
     */
    @Override
    public void setInfo(List info) {

    }

    /**
     * Agrega los datos al modelo de la tabla, también se ocultara la columna id
     * y se le dara se redefinira el ancho de la columna 0.
     *
     * @param info
     */
    private void tabla() {
        modelTablaEmI.setDataVector(null, titulosTablaEm);
        TableColumn tc = tablaLisITbl.getColumnModel().getColumn(0);
        tablaLisITbl.getColumnModel().removeColumn(tc);

        modelTablaEmF.setDataVector(null, titulosTablaEm);
        tc = tablaLisFTbl.getColumnModel().getColumn(0);
        tablaLisFTbl.getColumnModel().removeColumn(tc);

        modelTablaEn.setDataVector(null, titulosTablaEn);
        tc = enunciadoTbl.getColumnModel().getColumn(0);
        enunciadoTbl.getColumnModel().removeColumn(tc);
    }

    /**
     * Metodo sobrescrito de la clase comunicador que recibe una Lista con la
     * los resultados de una busqueda especifica y vaciarlo en los campos y
     * checkbox
     *
     * @param info Lista de Objeto con información de búsqueda.
     */
    @Override
    public void setLista(List info, int i) {
        if (info.isEmpty()) {
            return;
        }
        switch (i) {
            case 1:
                sedeModel.removeAllElements();
                sedeModel.addElement(new Sede(""));
                for (Object j : info) {
                    sedeModel.addElement(j);
                }
                break;
            case 2:
                proveedorModel.removeAllElements();
                proveedorModel.addElement(new Proveedor("", "", "", ""));
                for (Object j : info) {
                    proveedorModel.addElement(j);
                }
                break;
            case 3:
                tipoModel.removeAllElements();
                for (Object j : info) {
                    tipoModel.addElement(j);
                }
                break;
        }
    }

    /**
     * Establece una visibilidad de las opciones del panel del usuario
     *
     * @param visibilidad
     */
    public void visibilidad(boolean visibilidad) {
        fechaIDCh.setEnabled(visibilidad);
        fechaTDCh.setEnabled(visibilidad);
        tipoSedeGCBx.setEnabled(visibilidad);
        nombreGCBx.setEnabled(visibilidad);
        guardarGBtn.setEnabled(visibilidad);
        cancelarGBtn.setEnabled(visibilidad);
        campoCBx.setEnabled(visibilidad);
        guardarLABtn.setEnabled(visibilidad);
        cancelarLABtn.setEnabled(visibilidad);
        enunciadoTbl.setEnabled(visibilidad);
        guardarCBtn.setEnabled(visibilidad);
        cancelarCBtn.setEnabled(visibilidad);
    }

    /**
     * Metodo para hacer visible o imvisible la busqueda por nombre
     *
     * @param visibilidad
     */
    public void visibilidadBusNombre(boolean visibilidad) {
        nombreLATFd.setEnabled(visibilidad);
        buscarLABtn.setEnabled(visibilidad);
    }

    /**
     * Metodo para hacer visible o invisible la busqueda por
     * plantel,departamento, puesto
     *
     * @param visibilidad
     */
    public void visibilidadBusTipo(boolean visibilidad) {
        tipoLACBx.setEnabled(visibilidad);
        buscarLABtn.setEnabled(visibilidad);
    }

    /**
     * Establece una visibilidad de las opciones de las flechas del panel para
     * enviar la informacion del usuairo.
     *
     * @param visibilidad
     */
    private void visibilidadOpcT(boolean visibilidad) {
        agregarBtn.setEnabled(visibilidad);
        agregarTBtn.setEnabled(visibilidad);
        eliminarBtn.setEnabled(visibilidad);
        eliminarTBtn.setEnabled(visibilidad);
    }

    /**
     * Establece una opcion para guardar o modificar la informacion para
     * mandarla a la base de datos
     *
     * @param visibilidad
     */
    private void guarMod() {
        HashSet<Empleado> lisEmpleado = new HashSet();
        List<Object> eventoImplementar = new ArrayList();
        List<Object> calificacion = new ArrayList();
        ImplementacionEvento implementacionEvento = new ImplementacionEvento();

        if (validacion() == false) {
            if (fechaTDCh.getDate() == null) {
                fechaTDCh.setDate(fechaIDCh.getDate());
            }
            if (guardarGBtn.getText().equals("Modificar")) {
                eventoImplementar.add(eventoProgramarId);
            }
            eventoImplementar.add(evento);
            eventoImplementar.add(fechaIDCh.getDate());
            eventoImplementar.add(fechaTDCh.getDate());
            eventoImplementar.add(false);
            eventoImplementar.add(tipoSedeGCBx.getSelectedItem());
            eventoImplementar.add(nombreGCBx.getSelectedItem());
            for (int x = 0; x < tablaLisFTbl.getRowCount(); x++) {
                Empleado empleado = new Empleado();
                empleado.setId(Integer.parseInt((String) modelTablaEmF.
                        getValueAt(x, 0)));
                lisEmpleado.add(empleado);
            }
            eventoImplementar.add(lisEmpleado);
            for (int x = 0; x < enunciadoTbl.getRowCount(); x++) {
                ImplementacionEventoEnunciadoLogistica calificacionLog
                        = new ImplementacionEventoEnunciadoLogistica();
                EnunciadoLogistica enunciado = new EnunciadoLogistica();
                ImplementacionEvento evento = new ImplementacionEvento();
                enunciado.setId(x + 1);
                calificacionLog.setEnunciadoLogistica(enunciado);
                calificacionLog.setCalificacion(Integer.parseInt((String) modelTablaEn.
                        getValueAt(x, 3)));
                if (guardarGBtn.getText().equals("Modificar")) {
                    calificacionLog.setId(Integer.parseInt((String) modelTablaEn.
                            getValueAt(x, 0)));
                    evento.setId(eventoProgramarId);
                    calificacionLog.setImplementacionEvento(evento);
                }
                calificacion.add(calificacionLog);
            }
            control.setClass(ImplementacionEvento.class);
            if (guardarGBtn.getText().equals("Guardar")) {
                implementacionEvento = HelperEntidad.getImplementarEvento(eventoImplementar, "Guardar");
                control.guardarOModificarEventoImplementado(implementacionEvento,
                        calificacion, "Guardar");
            } else {
                implementacionEvento = HelperEntidad.getImplementarEvento(eventoImplementar, "Modificar");
                control.guardarOModificarEventoImplementado(implementacionEvento,
                        calificacion, "Modificar");
            }
            limpiarCampos();
            this.cambio = false;
        }
    }

    /**
     * Este metodo obtiene la informacion del evento a realizar del
     * PnlProgramarEvento para que este la pueda modificar
     *
     * @param info
     */
    public void obtenerMod(List info) {
        ImplementacionEvento eventoImplementado = new ImplementacionEvento();
        agregarGLbl.setText("Modificar evento realizado");
        agregarLALbl.setText("Modificar evento realizado");
        agregarCLbl.setText("Modificar evento realizado");
        guardarCBtn.setText("Modificar");
        guardarGBtn.setText("Modificar");
        guardarLABtn.setText("Modificar");
        eventoProgramarId = Integer.parseInt(info.get(0).toString());
        evento = (Evento) info.get(1);
        nombreGTFd.setText(info.get(2).toString());
        descripcionGTAa.setText(info.get(3).toString());
        if (info.get(4).equals("CONFERENCIA")) {
            tipoGCBx.setSelectedIndex(0);
        } else if (info.get(4).equals("TALLER")) {
            tipoGCBx.setSelectedIndex(1);
        } else if (info.get(4).equals("CURSO")) {
            tipoGCBx.setSelectedIndex(2);
        } else if (info.get(4).equals("CURSO / TALLER")) {
            tipoGCBx.setSelectedIndex(3);
        } else if (info.get(4).equals("PLATICA")) {
            tipoGCBx.setSelectedIndex(4);
        }
        fechaIDCh.setDate((Date) info.get(5));
        fechaTDCh.setDate((Date) info.get(6));
        sedeModel.setSelectedItem(info.get(7));
        proveedorModel.setSelectedItem(info.get(8));
        eventoImplementado.setEmpleados((Set<Empleado>) info.get(9));
        Iterator itr = eventoImplementado.getEmpleados().iterator();
        eventoImplementado.setId(eventoProgramarId);
        Object[][] tableData = new Object[eventoImplementado.getEmpleados().size()][modelTablaEmF.getColumnCount()];
        for (int x = 0; x < eventoImplementado.getEmpleados().size(); x++) {
            Empleado empleado = (Empleado) itr.next();
            
            tableData[x][0] = empleado.getId()+"";
            tableData[x][1] = empleado.getNumero()+"";
            if(empleado.getSegundoNombre()==null){
                tableData[x][2] = empleado.getPrimerNombre()+ " "+ empleado.getApellidoPaterno()+" "+ empleado.getApellidoMaterno();
            
            }else{
                tableData[x][2] = empleado.getPrimerNombre()+ " "+ empleado.getSegundoNombre()+" "+ empleado.getApellidoPaterno()+" "+ empleado.getApellidoMaterno();
            
            }
            
            /*
            ;
            control.setClass(Empleado.class);
            control.buscarEmpId(empleado.getId(), Empleado.class);*/
        }
        control.setClass(ImplementacionEventoEnunciadoLogistica.class);
        control.bucarCalificacionMod(eventoImplementado);
    }

    /**
     * Metodo que regresa un true si se encontraron informacion sin completar, o
     * errores en la informacion, como es mostrado en el caso de prueba
     *
     * @return
     */
    private boolean validacion() {
        if (fechaIDCh.getDate() == null) {
            JOptionPane.showMessageDialog(this, "No lleno el campo de la fecha"
                    + " inicial");
            return true;
        } else if (tipoSedeGCBx.getSelectedItem().toString().equals("")) {
            JOptionPane.showMessageDialog(this, "No selecciono una sede");
            return true;
        } else if (((Proveedor) nombreGCBx.getSelectedItem()).getId() == null) {
            JOptionPane.showMessageDialog(this, "No selecciono un proveedor");
            return true;
        } else if (tablaLisFTbl.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No se encontraron empleados"
                    + "en la lista de asistencia");
            return true;
        } else if (fechaTDCh.getDate() != null) {
            if (fechaIDCh.getDate().after(fechaTDCh.getDate())) {
                JOptionPane.showMessageDialog(this, "Error en las fechas de"
                        + " evento.La fecha de inicio es mayor que la fecha de"
                        + " terminacion");
                return true;
            }
        }
        for (int i = 0; i < enunciadoTbl.getRowCount(); i++) {
            if (((Object) modelTablaEn.getValueAt(i, 3)) == null) {
                JOptionPane.showMessageDialog(this, "No se a completado la "
                        + "calificacion de la logistica");
                return true;
            }
        }
        return false;

    }

    /**
     * Este metodo sirve para limpiar los campos del panel de evento
     */
    public void limpiarCampos() {
        this.cambio = false;
        this.setVisible(false);
        fechaIDCh.setDate(null);
        fechaTDCh.setDate(null);
        descripcionGTAa.setText("");
        tabla();
    }

    /**
     * Variable que regresa un booleano si se le agrego informacion al evento o
     * modifico
     *
     * @return regresa un booleano que indica si el evento sufrio cambios
     */
    public boolean isCambio() {
        return this.cambio;
    }

    @Override
    public void llenarDatos(Object evento) {
    }
}
