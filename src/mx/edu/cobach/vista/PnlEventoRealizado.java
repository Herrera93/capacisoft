/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.edu.cobach.vista;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import mx.edu.cobach.persistencia.entidades.Evento;
import mx.edu.cobach.persistencia.entidades.Departamento;
import mx.edu.cobach.persistencia.entidades.Direccion;
import mx.edu.cobach.persistencia.entidades.Empleado;
import mx.edu.cobach.persistencia.entidades.EnunciadoLogistica;
import mx.edu.cobach.persistencia.entidades.ImplementacionEvento;
import mx.edu.cobach.persistencia.entidades.ImplementacionEventoEnunciadoLogistica;
import mx.edu.cobach.persistencia.entidades.Plantel;
import mx.edu.cobach.persistencia.entidades.Proveedor;
import mx.edu.cobach.persistencia.entidades.Puesto;
import mx.edu.cobach.persistencia.entidades.Sede;
import mx.edu.cobach.vista.controlador.HelperEntidad;
import mx.edu.cobach.vista.controlador.ImplementarEventoControlador;

/**
 * Esta clase mostrara la interfaz de los eventos a realizar, agregando el
 * proveedor del eventp, la sede sus respectivas fechas igual o inferiores a la
 * actual y la lista de asistencia
 *
 * @author liuts
 */
public class PnlEventoRealizado extends javax.swing.JPanel implements Comunicador {

    /**
     * Creates new form PnlEventoRealizado
     */
    private static ImplementarEventoControlador control;
    private int eventoProgramarId;
    private final DefaultComboBoxModel sedeModel;
    private final DefaultComboBoxModel proveedorModel;
    private DefaultTableModel modelTablaEn;
    private DefaultTableModel modelTablaEmI;
    private DefaultTableModel modelTablaEmF;
    private String[] titulosTablaEn = {"ID", "Tipo", "Enunciado",
        "Calificación"};
    private String[] titulosTablaEm = {"ID", "Numero",
        "Nombre del Empleado"};
    private Evento evento;
    private boolean cambio = false;

    public PnlEventoRealizado() {
        initComponents();
        sedeModel = new DefaultComboBoxModel();
        proveedorModel = new DefaultComboBoxModel();

        modelTablaEn = new DefaultTableModel(titulosTablaEn, 0);
        enunciadoTbl.setModel(modelTablaEn);
        enunciadoTbl.setColumnSelectionAllowed(false);
        enunciadoTbl.setDragEnabled(false);

        modelTablaEmF = new DefaultTableModel(titulosTablaEm, 0);
        tablaLisFTbl.setModel(modelTablaEmF);
        tablaLisFTbl.setColumnSelectionAllowed(false);
        tablaLisFTbl.setDragEnabled(false);

        tipoSedeGCBx.setModel(sedeModel);
        nombreGCBx.setModel(proveedorModel);
        control = new ImplementarEventoControlador(this, ImplementacionEvento.class);
        fechaIDCh.getJCalendar().setMaxSelectableDate(new Date());
        fechaTDCh.getJCalendar().setMaxSelectableDate(new Date());
        informacionTP.setEnabledAt(0, true);
        informacionTP.setEnabledAt(1, false);
        informacionTP.setEnabledAt(2, false);
        informacionTP.setSelectedIndex(0);
        tabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        informacionTP = new javax.swing.JTabbedPane();
        generalPnl = new javax.swing.JPanel();
        nombreGLbl = new javax.swing.JLabel();
        fechaILbl = new javax.swing.JLabel();
        fechaTLbl = new javax.swing.JLabel();
        tipoGLbl = new javax.swing.JLabel();
        sedeGLbl = new javax.swing.JLabel();
        nombrePrLbl = new javax.swing.JLabel();
        nombreGTFd = new javax.swing.JTextField();
        tipoGCBx = new javax.swing.JComboBox();
        tipoSedeGCBx = new javax.swing.JComboBox();
        nombreGCBx = new javax.swing.JComboBox();
        siguienteGBtn = new javax.swing.JButton();
        fechaIDCh = new com.toedter.calendar.JDateChooser();
        fechaTDCh = new com.toedter.calendar.JDateChooser();
        agregarGLbl = new javax.swing.JLabel();
        notaGLbl = new javax.swing.JLabel();
        cancelarGBtn = new javax.swing.JButton();
        listaPnl = new javax.swing.JPanel();
        campoLbl = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaLisFTbl = new javax.swing.JTable();
        siguienteLABtn = new javax.swing.JButton();
        listaAsistenciaLALbl = new javax.swing.JLabel();
        nota_LI_Lbl = new javax.swing.JLabel();
        buscarLABtn = new javax.swing.JButton();
        agregarLALbl = new javax.swing.JLabel();
        cancelarLABtn = new javax.swing.JButton();
        regresarLABtn = new javax.swing.JButton();
        calificacionPnl = new javax.swing.JPanel();
        guardarCBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        enunciadoTbl = new javax.swing.JTable();
        agregarCLbl = new javax.swing.JLabel();
        nota_CL_Lbl = new javax.swing.JLabel();
        cancelarCBtn = new javax.swing.JButton();
        regresarCBtn = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        informacionTP.setPreferredSize(new java.awt.Dimension(739, 472));

        nombreGLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreGLbl.setText("Nombre del evento:");

        fechaILbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fechaILbl.setText("Fecha inicial de evento*:");

        fechaTLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fechaTLbl.setText("Fecha de terminación del evento*:");

        tipoGLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoGLbl.setText("Tipo de evento:");

        sedeGLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sedeGLbl.setText("Sede del evento*:");

        nombrePrLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombrePrLbl.setText("Nombre de Proveedor*:");

        nombreGTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreGTFd.setEnabled(false);

        tipoGCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoGCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CONFERENCIA", "TALLER", "CURSO", "CURSO / TALLER", "PLATICA" }));
        tipoGCBx.setEnabled(false);
        tipoGCBx.setMaximumSize(new java.awt.Dimension(100, 23));

        tipoSedeGCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoSedeGCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        tipoSedeGCBx.setEnabled(false);
        tipoSedeGCBx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tipoSedeGCBxItemStateChanged(evt);
            }
        });

        nombreGCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreGCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        nombreGCBx.setEnabled(false);
        nombreGCBx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nombreGCBxItemStateChanged(evt);
            }
        });

        siguienteGBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        siguienteGBtn.setText("Siguiente");
        siguienteGBtn.setEnabled(false);
        siguienteGBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteGBtnActionPerformed(evt);
            }
        });

        fechaIDCh.setDateFormatString("dd/MM/yyyy");
        fechaIDCh.setEnabled(false);

        fechaTDCh.setDateFormatString("dd/MM/yyyy");
        fechaTDCh.setEnabled(false);

        agregarGLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        agregarGLbl.setText("Agregar");

        notaGLbl.setText("Ingrese la información a almacenar");

        cancelarGBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelarGBtn.setText("Cancelar");
        cancelarGBtn.setEnabled(false);
        cancelarGBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarGBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout generalPnlLayout = new javax.swing.GroupLayout(generalPnl);
        generalPnl.setLayout(generalPnlLayout);
        generalPnlLayout.setHorizontalGroup(
            generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalPnlLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(generalPnlLayout.createSequentialGroup()
                        .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nombreGLbl)
                            .addComponent(agregarGLbl)
                            .addComponent(notaGLbl)
                            .addGroup(generalPnlLayout.createSequentialGroup()
                                .addGap(459, 459, 459)
                                .addComponent(cancelarGBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(siguienteGBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sedeGLbl)
                                    .addComponent(nombrePrLbl)
                                    .addComponent(fechaILbl)
                                    .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(nombreGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, generalPnlLayout.createSequentialGroup()
                                                    .addComponent(fechaTLbl)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(fechaTDCh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGroup(generalPnlLayout.createSequentialGroup()
                                                    .addGap(221, 221, 221)
                                                    .addComponent(fechaIDCh, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(generalPnlLayout.createSequentialGroup()
                                                .addGap(171, 171, 171)
                                                .addComponent(tipoSedeGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tipoGCBx, 0, 439, Short.MAX_VALUE)
                                    .addComponent(nombreGTFd))))
                        .addContainerGap(28, Short.MAX_VALUE))
                    .addGroup(generalPnlLayout.createSequentialGroup()
                        .addComponent(tipoGLbl)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        generalPnlLayout.setVerticalGroup(
            generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalPnlLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(agregarGLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notaGLbl)
                .addGap(22, 22, 22)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreGTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreGLbl))
                .addGap(18, 18, 18)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipoGLbl)
                    .addComponent(tipoGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fechaIDCh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fechaILbl))
                .addGap(29, 29, 29)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fechaTLbl)
                    .addComponent(fechaTDCh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sedeGLbl)
                    .addComponent(tipoSedeGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombrePrLbl)
                    .addComponent(nombreGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(siguienteGBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarGBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );

        informacionTP.addTab("General", generalPnl);

        campoLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campoLbl.setText("Seleccione la opcion de generar lista de asistencia para agregar los empleados que desee que asistan al evento");

        tablaLisFTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Numero del empleado", "Nombre del empleado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaLisFTbl.setEnabled(false);
        jScrollPane5.setViewportView(tablaLisFTbl);
        if (tablaLisFTbl.getColumnModel().getColumnCount() > 0) {
            tablaLisFTbl.getColumnModel().getColumn(0).setResizable(false);
            tablaLisFTbl.getColumnModel().getColumn(1).setResizable(false);
        }

        siguienteLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        siguienteLABtn.setText("Siguiente");
        siguienteLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteLABtnActionPerformed(evt);
            }
        });

        listaAsistenciaLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listaAsistenciaLALbl.setText("Lista de asistencia");

        nota_LI_Lbl.setText("Ingrese la información a almacenar");

        buscarLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buscarLABtn.setText("Generar lista de asistencia");
        buscarLABtn.setAutoscrolls(true);
        buscarLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarLABtnActionPerformed(evt);
            }
        });

        agregarLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        agregarLALbl.setText("Agregar");

        cancelarLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelarLABtn.setText("Cancelar");
        cancelarLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarLABtnActionPerformed(evt);
            }
        });

        regresarLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        regresarLABtn.setText("Regresar");
        regresarLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarLABtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listaPnlLayout = new javax.swing.GroupLayout(listaPnl);
        listaPnl.setLayout(listaPnlLayout);
        listaPnlLayout.setHorizontalGroup(
            listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(regresarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(cancelarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(siguienteLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(listaAsistenciaLALbl)
                .addGap(315, 315, 315))
            .addGroup(listaPnlLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agregarLALbl)
                    .addComponent(nota_LI_Lbl)
                    .addComponent(campoLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 689, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        listaPnlLayout.setVerticalGroup(
            listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listaPnlLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(agregarLALbl)
                .addGap(18, 18, 18)
                .addComponent(nota_LI_Lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buscarLABtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(listaAsistenciaLALbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(siguienteLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(regresarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );

        informacionTP.addTab("Lista de asistencia", null, listaPnl, "");

        guardarCBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        guardarCBtn.setText("Guardar");
        guardarCBtn.setEnabled(false);
        guardarCBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarCBtnActionPerformed(evt);
            }
        });

        enunciadoTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Tipo", "Enunciado", "Calificación"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        enunciadoTbl.setEnabled(false);
        jScrollPane2.setViewportView(enunciadoTbl);
        if (enunciadoTbl.getColumnModel().getColumnCount() > 0) {
            enunciadoTbl.getColumnModel().getColumn(0).setResizable(false);
            enunciadoTbl.getColumnModel().getColumn(1).setResizable(false);
            enunciadoTbl.getColumnModel().getColumn(2).setResizable(false);
        }

        agregarCLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        agregarCLbl.setText("Agregar");

        nota_CL_Lbl.setText("Ingrese la información a almacenar");

        cancelarCBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelarCBtn.setText("Cancelar");
        cancelarCBtn.setEnabled(false);
        cancelarCBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarCBtnActionPerformed(evt);
            }
        });

        regresarCBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        regresarCBtn.setText("Regresar");
        regresarCBtn.setEnabled(false);
        regresarCBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regresarCBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout calificacionPnlLayout = new javax.swing.GroupLayout(calificacionPnl);
        calificacionPnl.setLayout(calificacionPnlLayout);
        calificacionPnlLayout.setHorizontalGroup(
            calificacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, calificacionPnlLayout.createSequentialGroup()
                .addGroup(calificacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(calificacionPnlLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(regresarCBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(cancelarCBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(guardarCBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(calificacionPnlLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(calificacionPnlLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(calificacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nota_CL_Lbl)
                    .addComponent(agregarCLbl))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        calificacionPnlLayout.setVerticalGroup(
            calificacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, calificacionPnlLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(agregarCLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nota_CL_Lbl)
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(calificacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarCBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarCBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(regresarCBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        informacionTP.addTab("Calificación de logística ", calificacionPnl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(informacionTP, javax.swing.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(informacionTP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

   /**
     * Evento ejecutado al hacer click se buscara al empleado dependiendo de del
     * campo seleccionado
     *
     * @param evt Evento al presionar el boton
     */
    private void buscarLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarLABtnActionPerformed
        ListaAsistencia lista = new ListaAsistencia(this,ImplementacionEvento.class);
        lista.setVisible(true);
        String[][] matriz = new String[modelTablaEmF.getRowCount()][modelTablaEmF.getColumnCount()];
        for (int k = 0; k < modelTablaEmF.getRowCount(); k++) {
            for (int j = 0; j < modelTablaEmF.getColumnCount(); j++) {
                matriz[k][j] = modelTablaEmF.getValueAt(k, j) + "";
            }
        }
        if(tablaLisFTbl.getRowCount() > 0){
            lista.mandarTabla(matriz);
        }
    }//GEN-LAST:event_buscarLABtnActionPerformed
    /**
     * Evento ejecutado al hacer click mandando a un metodo que guarde la
     * informacion o la modificque.
     *
     * @param evt Evento al presionar el boton
     */
    private void siguienteLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteLABtnActionPerformed
        informacionTP.setEnabledAt(0, false);
        informacionTP.setEnabledAt(1, false);
        informacionTP.setEnabledAt(2, true);
        informacionTP.setSelectedIndex(2);
    }//GEN-LAST:event_siguienteLABtnActionPerformed
    /**
     * Evento ejecutado al hacer click mandando a un metodo que guarde la
     * informacion o la modificque.
     *
     * @param evt Evento al presionar el boton
     */
    private void guardarCBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarCBtnActionPerformed
        guarMod();
    }//GEN-LAST:event_guardarCBtnActionPerformed
    /**
     * Evento ejecutado al hacer click mandando a un metodo que guarde la
     * informacion o la modificque.
     *
     * @param evt Evento al presionar el boton
     */
    private void siguienteGBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteGBtnActionPerformed
        informacionTP.setEnabledAt(0, false);
        informacionTP.setEnabledAt(1, true);
        informacionTP.setEnabledAt(2, false);
        informacionTP.setSelectedIndex(1);
    }//GEN-LAST:event_siguienteGBtnActionPerformed

   /**
     * Este metodo sirve para cancelar el registro o la modificacion de un
     * evento
     *
     * @param evt
     */
    private void cancelarGBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarGBtnActionPerformed
        cancelar();
    }//GEN-LAST:event_cancelarGBtnActionPerformed
    /**
     * Este metodo sirve para cancelar el registro o la modificacion de un
     * evento
     *
     * @param evt
     */
    private void cancelarLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarLABtnActionPerformed
        cancelar();
    }//GEN-LAST:event_cancelarLABtnActionPerformed
    /**
     * Este metodo sirve para cancelar el registro o la modificacion de un
     * evento
     *
     * @param evt
     */
    private void cancelarCBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarCBtnActionPerformed
        cancelar();
    }//GEN-LAST:event_cancelarCBtnActionPerformed

    /**
     * Este metodo sirve para cancelar el proceso de registro o modificacion de
     * un evento
     */
    private void cancelar() {
        int opcion;
        if (guardarCBtn.getText() == "Guardar") {
            opcion = JOptionPane.showConfirmDialog(this, "¿Desea cancelar el "
                    + "registro del evento?", "Precaucion",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        } else {
            opcion = JOptionPane.showConfirmDialog(this, "¿Desea cancelar la "
                    + "modificacion del evento?", "Precaucion",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        }
        if (opcion == 0) {
            this.setVisible(false);
            limpiarCampos();
        }
    }

    /**
     * Metodo para indicar que a habido un cambio en la el panel
     *
     * @param evt
     */
    private void tipoSedeGCBxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tipoSedeGCBxItemStateChanged
        if ((Sede) tipoSedeGCBx.getSelectedItem() != null) {
            if (tipoSedeGCBx.getSelectedItem().toString().compareTo("") != 0) {
                this.cambio = true;
            }
        }
    }//GEN-LAST:event_tipoSedeGCBxItemStateChanged
    /**
     * Metodo para indicar que a habido un cambio en la el panel
     *
     * @param evt
     */
    private void nombreGCBxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nombreGCBxItemStateChanged
        if ((Proveedor) nombreGCBx.getSelectedItem() != null) {
            if (((Proveedor) nombreGCBx.getSelectedItem()).getId() != null) {
                this.cambio = true;
            }
        }
    }//GEN-LAST:event_nombreGCBxItemStateChanged

    private void regresarLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarLABtnActionPerformed
        informacionTP.setEnabledAt(0, true);
        informacionTP.setEnabledAt(1, false);
        informacionTP.setEnabledAt(2, false);
        informacionTP.setSelectedIndex(0);
    }//GEN-LAST:event_regresarLABtnActionPerformed

    private void regresarCBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regresarCBtnActionPerformed
        informacionTP.setEnabledAt(0, false);
        informacionTP.setEnabledAt(1, true);
        informacionTP.setEnabledAt(2, false);
        informacionTP.setSelectedIndex(1);
    }//GEN-LAST:event_regresarCBtnActionPerformed
    /**
     * Metodo que permite mandar a obtener la informacion de todos las sedes y
     * proveedores registrados informacion o la modificque.
     *
     * @param evt Evento al presionar el boton
     */
    public void llenarTodo() {
        tabla();
        control.setClass(Sede.class);
        control.buscarTodosLista(1);
        control.setClass(Proveedor.class);
        control.buscarTodosLista(2);
        control.setClass(EnunciadoLogistica.class);
        control.buscarEncuesta();
        cambio = false;
        informacionTP.setEnabledAt(0, true);
        informacionTP.setEnabledAt(1, false);
        informacionTP.setEnabledAt(2, false);
        informacionTP.setSelectedIndex(0);
    }

    /**
     * Metodo que recibe el evento del catalogo para llenar parte de la
     * informacion general del evento a llevar a cabo
     *
     * @param evento
     */
    public void llenarEvento(Evento evento) {
        this.evento = evento;
        agregarGLbl.setText("Agregar evento a realizar");
        agregarLALbl.setText("Agregar evento a realizar");
        guardarCBtn.setText("Guardar");
        nombreGTFd.setText(evento.getNombre());
        if (evento.getTipoEvento().equals("CONFERENCIA")) {
            tipoGCBx.setSelectedIndex(0);
        } else if (evento.getTipoEvento().equals("TALLER")) {
            tipoGCBx.setSelectedIndex(1);
        } else if (evento.getTipoEvento().equals("CURSO")) {
            tipoGCBx.setSelectedIndex(2);
        } else if (evento.getTipoEvento().equals("CURSO / TALLER")) {
            tipoGCBx.setSelectedIndex(3);
        } else if (evento.getTipoEvento().equals("PLATICA")) {
            tipoGCBx.setSelectedIndex(4);
        }
        control.setClass(Sede.class);
        control.buscarTodosLista(1);
        control.setClass(Proveedor.class);
        control.buscarTodosLista(2);
        control.setClass(EnunciadoLogistica.class);
        control.buscarEncuesta();
        cambio = false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel agregarCLbl;
    private javax.swing.JLabel agregarGLbl;
    private javax.swing.JLabel agregarLALbl;
    private javax.swing.JButton buscarLABtn;
    private javax.swing.JPanel calificacionPnl;
    private javax.swing.JLabel campoLbl;
    private javax.swing.JButton cancelarCBtn;
    private javax.swing.JButton cancelarGBtn;
    private javax.swing.JButton cancelarLABtn;
    private javax.swing.JTable enunciadoTbl;
    private com.toedter.calendar.JDateChooser fechaIDCh;
    private javax.swing.JLabel fechaILbl;
    private com.toedter.calendar.JDateChooser fechaTDCh;
    private javax.swing.JLabel fechaTLbl;
    private javax.swing.JPanel generalPnl;
    private javax.swing.JButton guardarCBtn;
    private javax.swing.JTabbedPane informacionTP;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel listaAsistenciaLALbl;
    private javax.swing.JPanel listaPnl;
    private javax.swing.JComboBox nombreGCBx;
    private javax.swing.JLabel nombreGLbl;
    private javax.swing.JTextField nombreGTFd;
    private javax.swing.JLabel nombrePrLbl;
    private javax.swing.JLabel notaGLbl;
    private javax.swing.JLabel nota_CL_Lbl;
    private javax.swing.JLabel nota_LI_Lbl;
    private javax.swing.JButton regresarCBtn;
    private javax.swing.JButton regresarLABtn;
    private javax.swing.JLabel sedeGLbl;
    private javax.swing.JButton siguienteGBtn;
    private javax.swing.JButton siguienteLABtn;
    private javax.swing.JTable tablaLisFTbl;
    private javax.swing.JComboBox tipoGCBx;
    private javax.swing.JLabel tipoGLbl;
    private javax.swing.JComboBox tipoSedeGCBx;
    // End of variables declaration//GEN-END:variables
    /**
     * Metodo sobrescrito de la clase comunicador mensaje de confirmación de
     * registro o modificacion exitosa.
     *
     * @param mensaje String con mensaje de confirmacion de registro.
     */
    @Override
    public void setMensaje(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje);
    }

    /**
     * Metodo que recibe una matriz, donde se obtendran sus valores para
     * añadirlos a la modelo de la tabla, también se ocultara la columna id y se
     * le dara se redefinira el ancho de la columna 0.
     *
     * @param info Matriz String para vaciar en tabla
     */
    @Override
    public void setTabla(String[][] info) {
        if (info[0][0].contains("TLE1")) {
            info[0][0] = info[0][0].replaceAll("TLE1", "");
            modelTablaEmF.setDataVector(info, titulosTablaEm);
            TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
            tablaLisFTbl.getColumnModel().removeColumn(tc);
        } else if (info[0][0].contains(
                "TLE3")) {
            //Se checa si la palabra TLE3 se encuentra dentro de la matriz
            info[0][0] = info[0][0].replaceAll("TLE3", "");
            //Se elimina la palabra TLE3 para que solo quede el id puro
            enunciadoTbl.setEnabled(true);
            modelTablaEn.setDataVector(info, titulosTablaEn);
            //Contador que decrementa del 10 a 1 para agregarlos a la
            //califiacion de logistica
            JComboBox comboBox = new JComboBox();
            for (int numero = 10; numero > 0; numero--) {
                comboBox.addItem(numero + "");
            }
            TableColumn tc = enunciadoTbl.getColumnModel().getColumn(3);
            tc.setCellEditor(new DefaultCellEditor(comboBox));
            DefaultTableCellRenderer renderer
                    = new DefaultTableCellRenderer();
            renderer.setToolTipText("Califica a la logistica");
            tc.setCellRenderer(renderer);
            tc = enunciadoTbl.getColumnModel().getColumn(0);
            enunciadoTbl.getColumnModel().removeColumn(tc);
            enunciadoTbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            enunciadoTbl.getColumnModel().getColumn(0).setPreferredWidth(600);
            enunciadoTbl.getColumnModel().getColumn(1).setPreferredWidth(200);
            enunciadoTbl.getColumnModel().getColumn(2).setPreferredWidth(200);
            enunciadoTbl.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        } else if (info[0][0].contains(
                "TLE4")) {
            //Se checa si la palabra TLE4 se encuentra dentro de la matriz
            info[0][0] = info[0][0].replaceAll("TLE4", "");
            //Se elimina la palabra TLE4 para que solo quede el id puro

            Object[][] tableData = new Object[enunciadoTbl.getRowCount()][enunciadoTbl.getColumnCount() + 1];
            for (int i = 0; i < enunciadoTbl.getRowCount(); i++) {
                tableData[i][0] = info[i][0];
                tableData[i][1] = modelTablaEn.getValueAt(i, 1);
                tableData[i][2] = modelTablaEn.getValueAt(i, 2);
                tableData[i][3] = info[i][3];
            }

            enunciadoTbl.setEnabled(true);
            modelTablaEn.setDataVector(tableData, titulosTablaEn);
            //Contador que decrementa del 10 a 1 para agregarlos a la
            //califiacion de logistica
            JComboBox comboBox = new JComboBox();
            for (int numero = 10; numero > 0; numero--) {
                comboBox.addItem(numero + "");
            }
            TableColumn tc = enunciadoTbl.getColumnModel().getColumn(3);
            tc.setCellEditor(new DefaultCellEditor(comboBox));
            DefaultTableCellRenderer renderer
                    = new DefaultTableCellRenderer();
            renderer.setToolTipText("Califica a la logistica");
            tc.setCellRenderer(renderer);
            tc = enunciadoTbl.getColumnModel().getColumn(0);
            enunciadoTbl.getColumnModel().removeColumn(tc);
            enunciadoTbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            enunciadoTbl.getColumnModel().getColumn(0).setPreferredWidth(600);
            enunciadoTbl.getColumnModel().getColumn(1).setPreferredWidth(200);
            enunciadoTbl.getColumnModel().getColumn(2).setPreferredWidth(200);
            enunciadoTbl.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        }
    }

    /**
     * Metodo sobrescrito de la clase Comunicador
     *
     * @param info
     * @param i
     */
    @Override
    public void setInfo(List info) {

    }

    /**
     * Agrega los datos al modelo de la tabla, también se ocultara la columna id
     * y se le dara se redefinira el ancho de la columna 0.
     *
     * @param info
     */
    private void tabla() {
        
        modelTablaEmF.setDataVector(null, titulosTablaEm);
        TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
        tablaLisFTbl.getColumnModel().removeColumn(tc);
        tablaLisFTbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaLisFTbl.getColumnModel().getColumn(0).setPreferredWidth(10);
        tablaLisFTbl.getColumnModel().getColumn(1).setPreferredWidth(160);
        tablaLisFTbl.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

        modelTablaEn.setDataVector(null, titulosTablaEn);
        tc = enunciadoTbl.getColumnModel().getColumn(0);
        enunciadoTbl.getColumnModel().removeColumn(tc);
        enunciadoTbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        enunciadoTbl.getColumnModel().getColumn(0).setPreferredWidth(1200);
        enunciadoTbl.getColumnModel().getColumn(1).setPreferredWidth(50);
        enunciadoTbl.getColumnModel().getColumn(2).setPreferredWidth(50);
        enunciadoTbl.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);

    }

    /**
     * Metodo sobrescrito de la clase comunicador que recibe una Lista con la
     * los resultados de una busqueda especifica y vaciarlo en los campos y
     * checkbox
     *
     * @param info Lista de Objeto con información de búsqueda.
     */
    @Override
    public void setLista(List info, int i) {
        if (info.isEmpty()) {
            return;
        }
        switch (i) {
            case 1:
                sedeModel.removeAllElements();
                sedeModel.addElement(new Sede(""));
                for (Object j : info) {
                    sedeModel.addElement(j);
                }
                break;
            case 2:
                proveedorModel.removeAllElements();
                proveedorModel.addElement(new Proveedor("", "", "", ""));
                for (Object j : info) {
                    proveedorModel.addElement(j);
                }
                break;
        }
    }

    /**
     * Establece una visibilidad de las opciones del panel del usuario
     *
     * @param visibilidad
     */
    public void visibilidad(boolean visibilidad) {
        fechaIDCh.setEnabled(visibilidad);
        fechaTDCh.setEnabled(visibilidad);
        tipoSedeGCBx.setEnabled(visibilidad);
        nombreGCBx.setEnabled(visibilidad);
        siguienteGBtn.setEnabled(visibilidad);
        cancelarGBtn.setEnabled(visibilidad);
        siguienteLABtn.setEnabled(visibilidad);
        cancelarLABtn.setEnabled(visibilidad);
        enunciadoTbl.setEnabled(visibilidad);
        guardarCBtn.setEnabled(visibilidad);
        cancelarCBtn.setEnabled(visibilidad);
        regresarLABtn.setEnabled(visibilidad);
        regresarCBtn.setEnabled(visibilidad);
    }

    /**
     * Establece una opcion para guardar o modificar la informacion para
     * mandarla a la base de datos
     *
     * @param visibilidad
     */
    private void guarMod() {
        HashSet<Empleado> lisEmpleado = new HashSet();
        List<Object> eventoImplementar = new ArrayList();
        List<Object> calificacion = new ArrayList();
        ImplementacionEvento implementacionEvento = new ImplementacionEvento();

        if (validacion() == false) {
            if (fechaTDCh.getDate() == null) {
                fechaTDCh.setDate(fechaIDCh.getDate());
            }
            if (guardarCBtn.getText().equals("Modificar")) {
                eventoImplementar.add(eventoProgramarId);
            }
            eventoImplementar.add(evento);
            eventoImplementar.add(fechaIDCh.getDate());
            eventoImplementar.add(fechaTDCh.getDate());
            eventoImplementar.add(false);
            eventoImplementar.add(tipoSedeGCBx.getSelectedItem());
            eventoImplementar.add(nombreGCBx.getSelectedItem());
            for (int x = 0; x < tablaLisFTbl.getRowCount(); x++) {
                Empleado empleado = new Empleado();
                empleado.setId(Integer.parseInt((String) modelTablaEmF.
                        getValueAt(x, 0)));
                lisEmpleado.add(empleado);
            }
            eventoImplementar.add(lisEmpleado);
            for (int x = 0; x < enunciadoTbl.getRowCount(); x++) {
                ImplementacionEventoEnunciadoLogistica calificacionLog
                        = new ImplementacionEventoEnunciadoLogistica();
                EnunciadoLogistica enunciado = new EnunciadoLogistica();
                ImplementacionEvento evento = new ImplementacionEvento();
                enunciado.setId(x + 1);
                calificacionLog.setEnunciadoLogistica(enunciado);
                calificacionLog.setCalificacion(Integer.parseInt((String) modelTablaEn.
                        getValueAt(x, 3)));
                if (guardarCBtn.getText().equals("Modificar")) {
                    calificacionLog.setId(Integer.parseInt((String) modelTablaEn.
                            getValueAt(x, 0)));
                    evento.setId(eventoProgramarId);
                    calificacionLog.setImplementacionEvento(evento);
                }
                calificacion.add(calificacionLog);
            }
            control.setClass(ImplementacionEvento.class);
            if (guardarCBtn.getText().equals("Guardar")) {
                implementacionEvento = HelperEntidad.getImplementarEvento(eventoImplementar, "Guardar");
                control.guardarOModificarEventoImplementado(implementacionEvento,
                        calificacion, "Guardar");
            } else {
                implementacionEvento = HelperEntidad.getImplementarEvento(eventoImplementar, "Modificar");
                control.guardarOModificarEventoImplementado(implementacionEvento,
                        calificacion, "Modificar");
            }
            limpiarCampos();
            this.cambio = false;
        }
    }

    /**
     * Este metodo obtiene la informacion del evento a realizar del
     * PnlProgramarEvento para que este la pueda modificar
     *
     * @param info
     */
    public void obtenerMod(List info) {
        ImplementacionEvento eventoImplementado = new ImplementacionEvento();
        agregarGLbl.setText("Modificar evento realizado");
        agregarLALbl.setText("Modificar evento realizado");
        agregarCLbl.setText("Modificar evento realizado");
        guardarCBtn.setText("Modificar");
        eventoProgramarId = Integer.parseInt(info.get(0).toString());
        evento = (Evento) info.get(1);
        nombreGTFd.setText(info.get(2).toString());
        if (info.get(4).equals("CONFERENCIA")) {
            tipoGCBx.setSelectedIndex(0);
        } else if (info.get(4).equals("TALLER")) {
            tipoGCBx.setSelectedIndex(1);
        } else if (info.get(4).equals("CURSO")) {
            tipoGCBx.setSelectedIndex(2);
        } else if (info.get(4).equals("CURSO / TALLER")) {
            tipoGCBx.setSelectedIndex(3);
        } else if (info.get(4).equals("PLATICA")) {
            tipoGCBx.setSelectedIndex(4);
        }
        fechaIDCh.setDate((Date) info.get(5));
        fechaTDCh.setDate((Date) info.get(6));
        sedeModel.setSelectedItem(info.get(7));
        proveedorModel.setSelectedItem(info.get(8));
        eventoImplementado.setEmpleados((Set<Empleado>) info.get(9));
        Iterator itr = eventoImplementado.getEmpleados().iterator();
        eventoImplementado.setId(eventoProgramarId);
        Object[][] tableData = new Object[eventoImplementado.getEmpleados().size()][modelTablaEmF.getColumnCount()];
        for (int x = 0; x < eventoImplementado.getEmpleados().size(); x++) {
            Empleado empleado = (Empleado) itr.next();
            tableData[x][0] = empleado.getId()+"";
            tableData[x][1] = empleado.getNumero()+"";
            if(empleado.getSegundoNombre()==null){
                tableData[x][2] = empleado.getPrimerNombre()+ " "+ empleado.getApellidoPaterno()+" "+ empleado.getApellidoMaterno();
            
            }else{
                tableData[x][2] = empleado.getPrimerNombre()+ " "+ empleado.getSegundoNombre()+" "+ empleado.getApellidoPaterno()+" "+ empleado.getApellidoMaterno();
            
            }
        }
        modelTablaEmF.setDataVector(tableData, titulosTablaEm);
        TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
        tablaLisFTbl.getColumnModel().removeColumn(tc);
        informacionTP.setSelectedIndex(0);
        control.setClass(ImplementacionEventoEnunciadoLogistica.class);
        control.bucarCalificacionMod(eventoImplementado);
        informacionTP.setEnabledAt(0, true);
        informacionTP.setEnabledAt(1, false);
        informacionTP.setEnabledAt(2, false);
        informacionTP.setSelectedIndex(0);
        tablaLisFTbl.setEnabled(true);
        
    }

    /**
     * Metodo que regresa un true si se encontraron informacion sin completar, o
     * errores en la informacion, como es mostrado en el caso de prueba
     *
     * @return
     */
    private boolean validacion() {
        if (fechaIDCh.getDate() == null) {
            JOptionPane.showMessageDialog(this, "No lleno el campo de la fecha"
                    + " inicial");
            return true;
        } else if (tipoSedeGCBx.getSelectedItem().toString().equals("")) {
            JOptionPane.showMessageDialog(this, "No selecciono una sede");
            return true;
        } else if (((Proveedor) nombreGCBx.getSelectedItem()).getId() == null) {
            JOptionPane.showMessageDialog(this, "No selecciono un proveedor");
            return true;
        } else if (tablaLisFTbl.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No se encontraron empleados"
                    + "en la lista de asistencia");
            return true;
        } else if (fechaTDCh.getDate() != null) {
            if (fechaIDCh.getDate().after(fechaTDCh.getDate())) {
                JOptionPane.showMessageDialog(this, "Error en las fechas de"
                        + " evento.La fecha de inicio es mayor que la fecha de"
                        + " terminacion");
                return true;
            }
        }
        for (int i = 0; i < enunciadoTbl.getRowCount(); i++) {
            if (((Object) modelTablaEn.getValueAt(i, 3)) == null) {
                JOptionPane.showMessageDialog(this, "No se a completado la "
                        + "calificacion de la logistica");
                return true;
            }
        }
        return false;

    }

    /**
     * Este metodo sirve para limpiar los campos del panel de evento
     */
    public void limpiarCampos() {
        this.cambio = false;
        this.setVisible(false);
        fechaIDCh.setDate(null);
        fechaTDCh.setDate(null);
        tabla();
    }

    /**
     * Variable que regresa un booleano si se le agrego informacion al evento o
     * modifico
     *
     * @return regresa un booleano que indica si el evento sufrio cambios
     */
    public boolean isCambio() {
        return this.cambio;
    }

    @Override
    public void llenarDatos(Object evento) {
    }
}
