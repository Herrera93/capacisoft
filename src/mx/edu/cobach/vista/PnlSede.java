package mx.edu.cobach.vista;


import java.awt.Color;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import mx.edu.cobach.persistencia.entidades.Plantel;
import mx.edu.cobach.persistencia.entidades.Sede;
import mx.edu.cobach.vista.controlador.HelperEntidad;
import mx.edu.cobach.vista.controlador.SedeControlador;
import mx.edu.cobach.vista.controlador.PlantelControlador;

public class PnlSede extends javax.swing.JPanel implements Comunicador{
    
    private final DefaultTableModel model;
    private final String[] titulosTabla;
    private final SedeControlador control;
    private final PlantelControlador controlPlantel;
    private int idSedeActual;
    private boolean buscando = false;
    private boolean problema = false;
    private boolean almacenando = false;
    private KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
    private Border BORDER_ORIGINAL;
    
    public PnlSede() {
        initComponents();
        titulosTabla= new String[]{"Número","Nombre","Eliminar"};
        model = new DefaultTableModel(titulosTabla, 0)   {
            @Override
            public boolean isCellEditable(int row, int col) {
                if (col == 2) {
                    return true;
                } else {
                    return false;
                }
            }
        };
        sedesTbl.setModel(model);
        sedesTbl.setColumnSelectionAllowed(false);
        sedesTbl.setDragEnabled(false);
        control = new SedeControlador(this,Sede.class);
        controlPlantel = new PlantelControlador(this,Plantel.class);
        
        /**
         * Metodo que sirve para validar que solo se admitan letras mayusculas
         * en los campos de texto.
         */
        manager.addKeyEventDispatcher(new KeyEventDispatcher(){
            public boolean dispatchKeyEvent(KeyEvent e) {
                if(e.getID() == KeyEvent.KEY_TYPED){
                    if(e.getKeyChar() >= 'a' && e.getKeyChar() <= 'z'){
                        e.setKeyChar((char)(((int)e.getKeyChar()) - 32));
                    }
                }
                return false;
            }
        });
        
        BORDER_ORIGINAL = nombreTFd.getBorder();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        opcionPnl = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sedesTbl = new javax.swing.JTable();
        nombreBuscarLbl = new javax.swing.JLabel();
        nombreBuscarTFd = new javax.swing.JTextField();
        agregarBtn = new javax.swing.JButton();
        buscarBtn = new javax.swing.JButton();
        opcionesLbl = new javax.swing.JLabel();
        opcionMsjLbl = new javax.swing.JLabel();
        tablaMsjLbl = new javax.swing.JLabel();
        informacionPnl = new javax.swing.JPanel();
        nombreLbl = new javax.swing.JLabel();
        coloniaLbl = new javax.swing.JLabel();
        municipioLbl = new javax.swing.JLabel();
        guardarBtn = new javax.swing.JButton();
        nombreTFd = new javax.swing.JTextField();
        coloniaTFd = new javax.swing.JTextField();
        municipioCBx = new javax.swing.JComboBox();
        cantidadLbl = new javax.swing.JLabel();
        capacidadTFd = new javax.swing.JTextField();
        calleLbl = new javax.swing.JLabel();
        numeroLbl = new javax.swing.JLabel();
        calleTFd = new javax.swing.JTextField();
        numeroTFd = new javax.swing.JTextField();
        agregarLbl = new javax.swing.JLabel();
        agregarMsjLbl = new javax.swing.JLabel();
        lugarLbl1 = new javax.swing.JLabel();
        lugarTFd = new javax.swing.JTextField();
        validNomLbl = new javax.swing.JLabel();
        validCapacidadLbl = new javax.swing.JLabel();
        validLugarLbl = new javax.swing.JLabel();
        validCalleLbl = new javax.swing.JLabel();
        validColoniaLbl = new javax.swing.JLabel();
        validNumeroLbl = new javax.swing.JLabel();
        cancelarBtn = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(1181, 587));
        setMinimumSize(new java.awt.Dimension(1181, 587));
        setPreferredSize(new java.awt.Dimension(1181, 587));

        opcionPnl.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        opcionPnl.setMaximumSize(new java.awt.Dimension(408, 587));
        opcionPnl.setMinimumSize(new java.awt.Dimension(408, 587));
        opcionPnl.setPreferredSize(new java.awt.Dimension(408, 587));

        sedesTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Numero", "Nombre", "Eliminar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sedesTbl.setMaximumSize(new java.awt.Dimension(225, 64));
        sedesTbl.setMinimumSize(new java.awt.Dimension(225, 64));
        sedesTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sedesTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(sedesTbl);
        if (sedesTbl.getColumnModel().getColumnCount() > 0) {
            sedesTbl.getColumnModel().getColumn(0).setResizable(false);
            sedesTbl.getColumnModel().getColumn(1).setResizable(false);
            sedesTbl.getColumnModel().getColumn(2).setResizable(false);
        }

        nombreBuscarLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreBuscarLbl.setText("Nombre de la sede:");

        nombreBuscarTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        agregarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        agregarBtn.setText("Agregar");
        agregarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBtnActionPerformed(evt);
            }
        });

        buscarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        opcionesLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        opcionesLbl.setText("Opciones ");

        opcionMsjLbl.setText("<html>Seleccione el botón \"Agregar\" para habilitar la sección de registro,<br>si desea  realizar una búsqueda seleccione el botón \"Buscar\"</html>");

        tablaMsjLbl.setText("<html>Para Modificar seleccione un nombre de la sede de la columna<br> \"Nombre\", para eliminar selecciona el cuadro eliminar de la columna Eliminar del usuario que desee</html> ");

        javax.swing.GroupLayout opcionPnlLayout = new javax.swing.GroupLayout(opcionPnl);
        opcionPnl.setLayout(opcionPnlLayout);
        opcionPnlLayout.setHorizontalGroup(
            opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(opcionPnlLayout.createSequentialGroup()
                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(opcionPnlLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(opcionPnlLayout.createSequentialGroup()
                                .addGap(11, 204, Short.MAX_VALUE)
                                .addComponent(nombreBuscarTFd, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(opcionPnlLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(agregarBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buscarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(opcionPnlLayout.createSequentialGroup()
                        .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(opcionPnlLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(opcionMsjLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(opcionesLbl)
                                    .addComponent(nombreBuscarLbl)))
                            .addGroup(opcionPnlLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(tablaMsjLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        opcionPnlLayout.setVerticalGroup(
            opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, opcionPnlLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(opcionesLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opcionMsjLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreBuscarTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreBuscarLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agregarBtn)
                    .addComponent(buscarBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tablaMsjLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        informacionPnl.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        informacionPnl.setMaximumSize(new java.awt.Dimension(769, 587));
        informacionPnl.setMinimumSize(new java.awt.Dimension(769, 587));
        informacionPnl.setPreferredSize(new java.awt.Dimension(769, 587));

        nombreLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreLbl.setText("Nombre:");

        coloniaLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        coloniaLbl.setText("Colonia:");

        municipioLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        municipioLbl.setText("Municipio:");

        guardarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        guardarBtn.setText("Guardar");
        guardarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBtnActionPerformed(evt);
            }
        });

        nombreTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreTFd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nombreTFdFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nombreTFdFocusLost(evt);
            }
        });
        nombreTFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreTFdKeyTyped(evt);
            }
        });

        coloniaTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        coloniaTFd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                coloniaTFdFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                coloniaTFdFocusLost(evt);
            }
        });
        coloniaTFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                coloniaTFdKeyTyped(evt);
            }
        });

        municipioCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        municipioCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mexicali", "Tecate", "Tijuana", "Rosarito", "Ensenada" }));
        municipioCBx.setToolTipText("Seleccioné el municipio de la sede");

        cantidadLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cantidadLbl.setText("Capacidad:");

        capacidadTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        capacidadTFd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                capacidadTFdFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                capacidadTFdFocusLost(evt);
            }
        });
        capacidadTFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                capacidadTFdKeyTyped(evt);
            }
        });

        calleLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        calleLbl.setText("Calle:");

        numeroLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        numeroLbl.setText("Número:");

        calleTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        calleTFd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                calleTFdFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                calleTFdFocusLost(evt);
            }
        });
        calleTFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                calleTFdKeyTyped(evt);
            }
        });

        numeroTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        numeroTFd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                numeroTFdFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                numeroTFdFocusLost(evt);
            }
        });
        numeroTFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numeroTFdKeyTyped(evt);
            }
        });

        agregarLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        agregarLbl.setText("Registro");

        agregarMsjLbl.setText("Ingrese la información a almacenar, para salir o cancelar el registro presione el botón \"Cancelar\"");

        lugarLbl1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lugarLbl1.setText("Lugar:");

        lugarTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lugarTFd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                lugarTFdFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                lugarTFdFocusLost(evt);
            }
        });
        lugarTFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lugarTFdKeyTyped(evt);
            }
        });

        validNomLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validNomLbl.setForeground(new java.awt.Color(213, 216, 222));
        validNomLbl.setText("Este campo es obligatorio");

        validCapacidadLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validCapacidadLbl.setForeground(new java.awt.Color(213, 216, 222));
        validCapacidadLbl.setText("Este campo es obligatorio");

        validLugarLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validLugarLbl.setForeground(new java.awt.Color(213, 216, 222));
        validLugarLbl.setText("Este campo es obligatorio");

        validCalleLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validCalleLbl.setForeground(new java.awt.Color(213, 216, 222));
        validCalleLbl.setText("Este campo es obligatorio");

        validColoniaLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validColoniaLbl.setForeground(new java.awt.Color(213, 216, 222));
        validColoniaLbl.setText("Este campo es obligatorio");

        validNumeroLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validNumeroLbl.setForeground(new java.awt.Color(213, 216, 222));
        validNumeroLbl.setText("Este campo es obligatorio");

        cancelarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelarBtn.setText("Cancelar");
        cancelarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout informacionPnlLayout = new javax.swing.GroupLayout(informacionPnl);
        informacionPnl.setLayout(informacionPnlLayout);
        informacionPnlLayout.setHorizontalGroup(
            informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informacionPnlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(guardarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
            .addGroup(informacionPnlLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cantidadLbl)
                    .addComponent(agregarMsjLbl)
                    .addComponent(agregarLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(informacionPnlLayout.createSequentialGroup()
                        .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(informacionPnlLayout.createSequentialGroup()
                                    .addComponent(numeroLbl)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informacionPnlLayout.createSequentialGroup()
                                    .addComponent(coloniaLbl)
                                    .addGap(86, 86, 86)))
                            .addGroup(informacionPnlLayout.createSequentialGroup()
                                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(municipioLbl)
                                    .addComponent(calleLbl))
                                .addGap(75, 75, 75)))
                        .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(municipioCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(coloniaTFd, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                                .addComponent(calleTFd)
                                .addComponent(numeroTFd))
                            .addComponent(validCalleLbl)
                            .addComponent(validColoniaLbl)
                            .addComponent(validNumeroLbl)))
                    .addGroup(informacionPnlLayout.createSequentialGroup()
                        .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lugarLbl1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nombreLbl, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(81, 81, 81)
                        .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(validNomLbl)
                            .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(nombreTFd, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                                .addComponent(capacidadTFd)
                                .addComponent(lugarTFd))
                            .addComponent(validCapacidadLbl)
                            .addComponent(validLugarLbl))))
                .addContainerGap(227, Short.MAX_VALUE))
        );
        informacionPnlLayout.setVerticalGroup(
            informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informacionPnlLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(agregarLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(agregarMsjLbl)
                .addGap(18, 18, 18)
                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreLbl)
                    .addComponent(nombreTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validNomLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cantidadLbl)
                    .addComponent(capacidadTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validCapacidadLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lugarLbl1)
                    .addComponent(lugarTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validLugarLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calleTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calleLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validCalleLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(coloniaLbl)
                    .addComponent(coloniaTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(validColoniaLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numeroLbl)
                    .addComponent(numeroTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validNumeroLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(municipioLbl)
                    .addComponent(municipioCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(opcionPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(informacionPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(opcionPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(informacionPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * 
     * @param evt 
     */
    private void agregarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBtnActionPerformed
        if(informacionPnl.isVisible()){
            if (JOptionPane.showConfirmDialog(this, "La información que"
                    + " esta modificando se perdera,¿Aun así desea cancelarla?",
                    "Precaucion", JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE) == 0) {
                limpiar();
                informacionPnl.setVisible(true);
                guardarBtn.setText("Guardar");
            }
        } else { 
            limpiar();
            guardarBtn.setText("Guardar");
            informacionPnl.setVisible(true);
        }
    }//GEN-LAST:event_agregarBtnActionPerformed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
       if(!nombreBuscarTFd.getText().equals(""))
            control.buscarPorNombre(nombreBuscarTFd.getText());
        else
            control.buscarTodos();
    }//GEN-LAST:event_buscarBtnActionPerformed

    private void guardarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBtnActionPerformed
        almacenando = true;
        if(nombreTFd.getText().equals("") &&
          coloniaTFd.getText().equals("") &&
           capacidadTFd.getText().equals("") ) 
            setMensaje("Debe ingresar los datos solicitados");
        else if(nombreTFd.getText().equals(""))
             setMensaje("Debe ingresar el nombre de la sede");
        else if(lugarTFd.getText().equals(""))
             setMensaje("Debe ingresar el nombre de lugar de la sede");
        else if(coloniaTFd.getText().equals(""))
             setMensaje("Debe ingresar el nombre de colonia de la sede");
        else if(capacidadTFd.getText().equals(""))
             setMensaje("Debe ingresar la capacidad del lugar");
        else{
            List<String> atr = new ArrayList<String>();
            atr.add(nombreTFd.getText());
            switch(String.valueOf(municipioCBx.getSelectedItem())){
                case "Mexicali": atr.add("1"); break;
                case "Tecate": atr.add("2"); break;
                case "Tijuana": atr.add("3"); break;
                case "Rosarito": atr.add("4"); break;
                case "Ensenada": atr.add("5"); break;
            }
            atr.add(coloniaTFd.getText());
            atr.add(calleTFd.getText());
            atr.add(numeroTFd.getText());
            atr.add(capacidadTFd.getText());
            atr.add(lugarTFd.getText());
            
            buscando = true;
            problema = false;
            control.buscarTodos();
            if(!problema){
                if(!guardarBtn.getText().equalsIgnoreCase("Modificar")){
                    control.alta(HelperEntidad.getSede(atr));  
                }else{
                    atr.add(String.valueOf(idSedeActual));
                    control.modificacion(HelperEntidad.getSede(atr));
                }
                limpiar();
                guardarBtn.setText("Guardar");
                control.buscarTodos();
            }
        } 
        almacenando = false;
    }//GEN-LAST:event_guardarBtnActionPerformed

    private void sedesTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sedesTblMouseClicked
        int row = sedesTbl.rowAtPoint(evt.getPoint());
        int col = sedesTbl.columnAtPoint(evt.getPoint());
        if (col == 0){
            if(informacionPnl.isVisible()){
                if (JOptionPane.showConfirmDialog(this, "La información que"
                    + " esta modificando se perdera ¿Aun así desea cancelarla?",
                    "Precaucion", JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE) == 0) {
                    int id = Integer.parseInt((String) model.getValueAt(row, 0));
                    limpiar();
                    control.buscar(id);
                    idSedeActual = id;
                    guardarBtn.setText("Modificar");
                    sedesTbl.clearSelection();
                    informacionPnl.setVisible(true);
                }
            } else {
                int id = Integer.parseInt((String) model.getValueAt(row, 0));
                limpiar();
                control.buscar(id);
                idSedeActual = id;
                guardarBtn.setText("Modificar");
                sedesTbl.clearSelection();
                informacionPnl.setVisible(true);
            }
        } else if(col == 1) {
            int id = Integer.parseInt((String)model.getValueAt(row, 0));
            if(control.buscarImplementaciones(id)){
                setMensaje("No se puede eliminar una sede que contenga implementaciones");
                model.setValueAt(false, row, 2);
                sedesTbl.clearSelection();
            }else if(guardarBtn.getText().equals("Modificar") && idSedeActual == id){
                JOptionPane.showMessageDialog(this, "No se puede eliminar la sede que esta"
                    + " modificando actualmente.","Precaución", JOptionPane.ERROR_MESSAGE);
                model.setValueAt(false, row, 2);
                sedesTbl.clearSelection();
            }else if(JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar este registro?",
                    "Precaución", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0){
                control.baja(id);
                control.buscarTodos();
            } else {
                model.setValueAt(false, row, 2);
                sedesTbl.clearSelection();
            }
        }
    }//GEN-LAST:event_sedesTblMouseClicked
    
    /**
     * nombreTFd focus
     * @param evt 
     */
    private void nombreTFdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nombreTFdFocusLost
        buscando = true;
        problema = false;
        control.buscarTodos();
        if (nombreTFd.getText().isEmpty()) {
            nombreTFd.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(new Color(255, 106, 106)),
                    BORDER_ORIGINAL));
            validNomLbl.setText("Este campo es obligatorio");
            validNomLbl.setForeground(new Color(255, 0, 0));
        }else if(problema){
            nombreTFd.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(new Color(255, 106, 106)),
                    BORDER_ORIGINAL));
            validNomLbl.setText("El nombre de la sede ya existe");
            validNomLbl.setForeground(new Color(255, 0, 0));
        }
    }//GEN-LAST:event_nombreTFdFocusLost

    private void cancelarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarBtnActionPerformed
        if (JOptionPane.showConfirmDialog(this, "La información que"
            + " esta modificando se perdera,¿Aun así desea cancelarla?",
            "Precaucion", JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE) == 0) {
            limpiar();
        }
    }//GEN-LAST:event_cancelarBtnActionPerformed

    private void nombreTFdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nombreTFdFocusGained
        nombreTFd.setBorder(BORDER_ORIGINAL);
        validNomLbl.setForeground(new Color(213, 216, 222));
    }//GEN-LAST:event_nombreTFdFocusGained

    private void capacidadTFdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_capacidadTFdFocusGained
        capacidadTFd.setBorder(BORDER_ORIGINAL);
        validCapacidadLbl.setForeground(new Color(213, 216, 222));
    }//GEN-LAST:event_capacidadTFdFocusGained

    private void capacidadTFdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_capacidadTFdFocusLost
        if (capacidadTFd.getText().isEmpty()) {
            capacidadTFd.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(new Color(255, 106, 106)),
                    BORDER_ORIGINAL));
            validCapacidadLbl.setForeground(new Color(255, 0, 0));
        }
    }//GEN-LAST:event_capacidadTFdFocusLost

    private void lugarTFdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lugarTFdFocusGained
        lugarTFd.setBorder(BORDER_ORIGINAL);
        validLugarLbl.setForeground(new Color(213, 216, 222));
    }//GEN-LAST:event_lugarTFdFocusGained

    private void lugarTFdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lugarTFdFocusLost
        if (lugarTFd.getText().isEmpty()) {
            lugarTFd.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(new Color(255, 106, 106)),
                    BORDER_ORIGINAL));
            validLugarLbl.setForeground(new Color(255, 0, 0));
        }
    }//GEN-LAST:event_lugarTFdFocusLost

    private void calleTFdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_calleTFdFocusGained
        calleTFd.setBorder(BORDER_ORIGINAL);
        validCalleLbl.setForeground(new Color(213, 216, 222));
    }//GEN-LAST:event_calleTFdFocusGained

    private void calleTFdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_calleTFdFocusLost
        if (calleTFd.getText().isEmpty()) {
            calleTFd.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(new Color(255, 106, 106)),
                    BORDER_ORIGINAL));
            validCalleLbl.setForeground(new Color(255, 0, 0));
        }
    }//GEN-LAST:event_calleTFdFocusLost

    private void coloniaTFdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_coloniaTFdFocusGained
        coloniaTFd.setBorder(BORDER_ORIGINAL);
        validColoniaLbl.setForeground(new Color(213, 216, 222));
    }//GEN-LAST:event_coloniaTFdFocusGained

    private void coloniaTFdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_coloniaTFdFocusLost
        if (coloniaTFd.getText().isEmpty()) {
            coloniaTFd.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(new Color(255, 106, 106)),
                    BORDER_ORIGINAL));
            validColoniaLbl.setForeground(new Color(255, 0, 0));
        }
    }//GEN-LAST:event_coloniaTFdFocusLost

    private void numeroTFdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numeroTFdFocusGained
        numeroTFd.setBorder(BORDER_ORIGINAL);
        validNumeroLbl.setForeground(new Color(213, 216, 222));
    }//GEN-LAST:event_numeroTFdFocusGained

    private void numeroTFdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_numeroTFdFocusLost
        if (numeroTFd.getText().isEmpty()) {
            numeroTFd.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(new Color(255, 106, 106)),
                    BORDER_ORIGINAL));
            validNumeroLbl.setForeground(new Color(255, 0, 0));
        }
    }//GEN-LAST:event_numeroTFdFocusLost

    private void nombreTFdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTFdKeyTyped
         char car = evt.getKeyChar();
        if (nombreTFd.getText().length() >= 45) {
            evt.consume();
        }
        if ((car < 'a' || car > 'z') && (car < 'A' || car > 'Z')
                && car != 'á' //Minúsculas             
                && car != 'é'
                && car != 'í'
                && car != 'ó'
                && car != 'ú'
                && car != 'Á' //Mayúsculas             
                && car != 'É'
                && car != 'Í'
                && car != 'Ó'
                && car != 'Ú'
                && car != 'ñ'
                && car != 'Ñ'
                && (car != (char) KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_nombreTFdKeyTyped

    private void capacidadTFdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_capacidadTFdKeyTyped
         char car = evt.getKeyChar();
        if (capacidadTFd.getText().length() >= 6 || !Character.isDigit(car)) {
            evt.consume();
        }
    }//GEN-LAST:event_capacidadTFdKeyTyped

    private void lugarTFdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lugarTFdKeyTyped
         char car = evt.getKeyChar();
        if (nombreTFd.getText().length() >= 45) {
            evt.consume();
        }
        if ((car < 'a' || car > 'z') && (car < 'A' || car > 'Z')
                && car != 'á' //Minúsculas             
                && car != 'é'
                && car != 'í'
                && car != 'ó'
                && car != 'ú'
                && car != 'Á' //Mayúsculas             
                && car != 'É'
                && car != 'Í'
                && car != 'Ó'
                && car != 'Ú'
                && car != 'ñ'
                && car != 'Ñ'
                && (car != (char) KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_lugarTFdKeyTyped

    private void calleTFdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_calleTFdKeyTyped
         char car = evt.getKeyChar();
        if (nombreTFd.getText().length() >= 45) {
            evt.consume();
        }
        if ((car < 'a' || car > 'z') && (car < 'A' || car > 'Z')
                && car != 'á' //Minúsculas             
                && car != 'é'
                && car != 'í'
                && car != 'ó'
                && car != 'ú'
                && car != 'Á' //Mayúsculas             
                && car != 'É'
                && car != 'Í'
                && car != 'Ó'
                && car != 'Ú'
                && car != 'ñ'
                && car != 'Ñ'
                && (car != (char) KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_calleTFdKeyTyped

    private void coloniaTFdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_coloniaTFdKeyTyped
         char car = evt.getKeyChar();
        if (nombreTFd.getText().length() >= 45) {
            evt.consume();
        }
        if ((car < 'a' || car > 'z') && (car < 'A' || car > 'Z')
                && car != 'á' //Minúsculas             
                && car != 'é'
                && car != 'í'
                && car != 'ó'
                && car != 'ú'
                && car != 'Á' //Mayúsculas             
                && car != 'É'
                && car != 'Í'
                && car != 'Ó'
                && car != 'Ú'
                && car != 'ñ'
                && car != 'Ñ'
                && (car != (char) KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_coloniaTFdKeyTyped

    private void numeroTFdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numeroTFdKeyTyped
         char car = evt.getKeyChar();
        if (nombreTFd.getText().length() >= 10 && !Character.isDigit(car)) {
            evt.consume();
        }
    }//GEN-LAST:event_numeroTFdKeyTyped

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarBtn;
    private javax.swing.JLabel agregarLbl;
    private javax.swing.JLabel agregarMsjLbl;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JLabel calleLbl;
    private javax.swing.JTextField calleTFd;
    private javax.swing.JButton cancelarBtn;
    private javax.swing.JLabel cantidadLbl;
    private javax.swing.JTextField capacidadTFd;
    private javax.swing.JLabel coloniaLbl;
    private javax.swing.JTextField coloniaTFd;
    private javax.swing.JButton guardarBtn;
    private javax.swing.JPanel informacionPnl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lugarLbl1;
    private javax.swing.JTextField lugarTFd;
    private javax.swing.JComboBox municipioCBx;
    private javax.swing.JLabel municipioLbl;
    private javax.swing.JLabel nombreBuscarLbl;
    private javax.swing.JTextField nombreBuscarTFd;
    private javax.swing.JLabel nombreLbl;
    private javax.swing.JTextField nombreTFd;
    private javax.swing.JLabel numeroLbl;
    private javax.swing.JTextField numeroTFd;
    private javax.swing.JLabel opcionMsjLbl;
    private javax.swing.JPanel opcionPnl;
    private javax.swing.JLabel opcionesLbl;
    private javax.swing.JTable sedesTbl;
    private javax.swing.JLabel tablaMsjLbl;
    private javax.swing.JLabel validCalleLbl;
    private javax.swing.JLabel validCapacidadLbl;
    private javax.swing.JLabel validColoniaLbl;
    private javax.swing.JLabel validLugarLbl;
    private javax.swing.JLabel validNomLbl;
    private javax.swing.JLabel validNumeroLbl;
    // End of variables declaration//GEN-END:variables

    private void limpiar(){
        nombreTFd.setText("");
        coloniaTFd.setText("");
        calleTFd.setText("");
        capacidadTFd.setText("");
        numeroTFd.setText("");
        lugarTFd.setText("");
        guardarBtn.setText("Guardar");
        nombreTFd.setBorder(BORDER_ORIGINAL);
        coloniaTFd.setBorder(BORDER_ORIGINAL);
        calleTFd.setBorder(BORDER_ORIGINAL);
        numeroTFd.setBorder(BORDER_ORIGINAL);
        lugarTFd.setBorder(BORDER_ORIGINAL);
        capacidadTFd.setBorder(BORDER_ORIGINAL);
        validCalleLbl.setForeground(new Color(213, 216, 222));
        validColoniaLbl.setForeground(new Color(213, 216, 222));
        validNomLbl.setForeground(new Color(213, 216, 222));
        validNumeroLbl.setForeground(new Color(213, 216, 222));
        validLugarLbl.setForeground(new Color(213, 216, 222));
        validCapacidadLbl.setForeground(new Color(213, 216, 222));
        informacionPnl.setVisible(false);
    }
    
    public void llenarTodo(){
        limpiar();
        control.buscarTodos();
    }
    
    @Override
    public void setMensaje(String mensaje) {
         JOptionPane.showMessageDialog(this, mensaje);
    }

    @Override
    public void setTabla(String[][] info) {
        if(buscando){
            buscando = false;
            if(info != null){
                for(int x = 0; x < info.length; x++){
                    if(nombreTFd.getText().equals(info[x][1])){
                        if(almacenando){
                            setMensaje("Ya existe una sede con ese nombre.\n"
                                + info[x][1]);
                        }
                        problema = true;
                        break;
                    }
                }
            }
        }else if( info!=null){
            model.setRowCount(0);
            model.setDataVector(info, titulosTabla);
            TableColumn tc = sedesTbl.getColumnModel().getColumn(2);
            tc.setCellEditor(sedesTbl.getDefaultEditor(Boolean.class));
            tc.setCellRenderer(sedesTbl.getDefaultRenderer(Boolean.class));
            tc = sedesTbl.getColumnModel().getColumn(0);
            sedesTbl.getColumnModel().removeColumn(tc);
            sedesTbl.getColumnModel().getColumn(0).setPreferredWidth(300);
        }else {
            model.setRowCount(0);
            setMensaje("No se encontraron coincidencias");
        }
    }
    
    
    @Override
    public void setInfo(List info) {
        if(buscando){
            if(info!=null){
                nombreTFd.setText(info.get(0).toString());
                calleTFd.setText(info.get(1).toString());
                coloniaTFd.setText(info.get(2).toString());
                numeroTFd.setText(info.get(3).toString());
            }
        }else if(info==null)
            setMensaje("No se encontraron coincidencias");
        else{
            nombreTFd.setText(info.get(0).toString());
            municipioCBx.setSelectedItem(info.get(1).toString());
            coloniaTFd.setText(info.get(2).toString());
            calleTFd.setText(info.get(3).toString());
            numeroTFd.setText(info.get(4).toString());
            capacidadTFd.setText(info.get(5).toString());
            lugarTFd.setText(info.get(6).toString());
        }
    }
    

    @Override
    public void setLista(List info, int i) {}

    @Override
    public void llenarDatos(Object evento) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
