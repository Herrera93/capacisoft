/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.edu.cobach.vista;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import mx.edu.cobach.persistencia.entidades.Evento;
import mx.edu.cobach.persistencia.entidades.TipoEvento;
import mx.edu.cobach.vista.controlador.EventoControlador;
import mx.edu.cobach.vista.controlador.HelperEntidad;

/**
 *
 * @author Fernando
 */
public class PnlRegistrarEvento extends javax.swing.JPanel implements Comunicador {

    private EventoControlador control;
    private final DefaultTableModel model;
    private final DefaultComboBoxModel tipoModel, tipoBuscarModel;
    private String[] titulosTabla = {"ID", "Nombre", "Tipo", "Eliminar"};
    private int id;
    private boolean ban = false;
    private final Border BORDER_ORIGINAL_NOMBRE, BORDER_ORIGINAL_DESCRP;
    private final Border BORDER_ORIGINAL_TIPO;
    private final Dimension DIMENSION_ORIGINAL;
    private boolean buscando = false;
    private boolean problema = false;
    private boolean almacenando = false;

    /**
     * Constructor del PnlRegistrarEvento e instancia la clase EventoControlador. 
     * Se crea modelo de la tabla y se realiza la busqueda 
     */
    public PnlRegistrarEvento() {
        initComponents();
        control = new EventoControlador(this);
        model = new DefaultTableModel(titulosTabla, 4) {
            @Override
            public boolean isCellEditable(int row, int col) {
                if (col == 3) {
                    return true;
                } else {
                    return false;
                }
            }

        };
        eventosTbl.setModel(model);
        BORDER_ORIGINAL_NOMBRE = nombreTFd.getBorder();
        BORDER_ORIGINAL_DESCRP = descripcionSPn.getBorder();
        BORDER_ORIGINAL_TIPO = tipoCBx.getBorder();
        DIMENSION_ORIGINAL = nombreTFd.getPreferredSize();
        tipoModel = new DefaultComboBoxModel();
        tipoBuscarModel = new DefaultComboBoxModel();
        tipoCBx.setModel(tipoModel);
        tipoBuscarCBx.setModel(tipoBuscarModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        opcionPnl = new javax.swing.JPanel();
        tipoBuscarLbl = new javax.swing.JLabel();
        eventoSPn = new javax.swing.JScrollPane();
        eventosTbl = new javax.swing.JTable();
        agregarBtn = new javax.swing.JButton();
        buscarBtn = new javax.swing.JButton();
        tipoBuscarCBx = new javax.swing.JComboBox();
        opcionLbl = new javax.swing.JLabel();
        opcionMsjLbl = new javax.swing.JLabel();
        tablaMsjLbl = new javax.swing.JLabel();
        informacionPnl = new javax.swing.JPanel();
        tipoLbl = new javax.swing.JLabel();
        guardarBtn = new javax.swing.JButton();
        descripcionSPn = new javax.swing.JScrollPane();
        descripcionTAa = new javax.swing.JTextArea();
        nombreTFd = new javax.swing.JTextField();
        tipoCBx = new javax.swing.JComboBox();
        nombreLbl = new javax.swing.JLabel();
        descripcionLbl = new javax.swing.JLabel();
        registroLbl = new javax.swing.JLabel();
        registroMsjLbl = new javax.swing.JLabel();
        cancelarBtn = new javax.swing.JButton();
        validNombLbl = new javax.swing.JLabel();
        validDescLbl = new javax.swing.JLabel();

        opcionPnl.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        opcionPnl.setPreferredSize(new java.awt.Dimension(408, 587));

        tipoBuscarLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoBuscarLbl.setText("Tipo de Evento:");

        eventosTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Tipo", "Eliminar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        eventosTbl.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        eventosTbl.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        eventosTbl.getTableHeader().setReorderingAllowed(false);
        eventosTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eventosTblMouseClicked(evt);
            }
        });
        eventoSPn.setViewportView(eventosTbl);
        if (eventosTbl.getColumnModel().getColumnCount() > 0) {
            eventosTbl.getColumnModel().getColumn(0).setResizable(false);
            eventosTbl.getColumnModel().getColumn(0).setPreferredWidth(100);
            eventosTbl.getColumnModel().getColumn(1).setResizable(false);
            eventosTbl.getColumnModel().getColumn(1).setPreferredWidth(60);
            eventosTbl.getColumnModel().getColumn(2).setResizable(false);
            eventosTbl.getColumnModel().getColumn(2).setPreferredWidth(20);
        }

        agregarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        agregarBtn.setText("Agregar");
        agregarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBtnActionPerformed(evt);
            }
        });

        buscarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        tipoBuscarCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoBuscarCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Buscar Todos", "Conferencia", "Taller" }));

        opcionLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        opcionLbl.setText("Opciones");

        opcionMsjLbl.setText("<html>Seleccione el botón \"Agregar\" para habilitar la sección de registro,<br>si desea  realizar una búsqueda seleccione el botón \"Buscar\"</html>");

        tablaMsjLbl.setText("<html>Para Modificar seleccione un nombre de evento de la columna <br>\"Nombre\", para eliminar seleccione el cuadro de la columna Eliminar del evento que desea</html> ");

        javax.swing.GroupLayout opcionPnlLayout = new javax.swing.GroupLayout(opcionPnl);
        opcionPnl.setLayout(opcionPnlLayout);
        opcionPnlLayout.setHorizontalGroup(
            opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(opcionPnlLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(opcionMsjLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(opcionLbl))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(opcionPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tablaMsjLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
            .addGroup(opcionPnlLayout.createSequentialGroup()
                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(opcionPnlLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(eventoSPn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(opcionPnlLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(opcionPnlLayout.createSequentialGroup()
                                .addComponent(agregarBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buscarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(opcionPnlLayout.createSequentialGroup()
                                .addComponent(tipoBuscarLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tipoBuscarCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        opcionPnlLayout.setVerticalGroup(
            opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(opcionPnlLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(opcionLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(opcionMsjLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipoBuscarLbl)
                    .addComponent(tipoBuscarCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(opcionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(agregarBtn)
                    .addComponent(buscarBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tablaMsjLbl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(eventoSPn, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        informacionPnl.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tipoLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoLbl.setText("Tipo de Evento:");

        guardarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        guardarBtn.setText("Guardar");
        guardarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBtnActionPerformed(evt);
            }
        });

        descripcionSPn.setFocusable(false);
        descripcionSPn.setPreferredSize(new java.awt.Dimension(250, 85));

        descripcionTAa.setColumns(20);
        descripcionTAa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        descripcionTAa.setRows(5);
        descripcionTAa.setBorder(null);
        descripcionTAa.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        descripcionTAa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                descripcionTAaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                descripcionTAaFocusLost(evt);
            }
        });
        descripcionSPn.setViewportView(descripcionTAa);

        nombreTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreTFd.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        nombreTFd.setMinimumSize(new java.awt.Dimension(6, 29));
        nombreTFd.setName(""); // NOI18N
        nombreTFd.setPreferredSize(new java.awt.Dimension(195, 28));
        nombreTFd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nombreTFdFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                nombreTFdFocusLost(evt);
            }
        });
        nombreTFd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreTFdKeyTyped(evt);
            }
        });

        tipoCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CONFERENCIA", "TALLER", "CURSO", "CURSO / TALLER", "PLATICA" }));

        nombreLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreLbl.setText("Nombre del Evento:");

        descripcionLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        descripcionLbl.setText("Descripción del Evento:");

        registroLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        registroLbl.setText("Registro");

        registroMsjLbl.setText("Ingrese la información a almacenar, para salir o cancelar el registro presione el botón \"Cancelar\"");

        cancelarBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelarBtn.setText("Cancelar");
        cancelarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarBtnActionPerformed(evt);
            }
        });

        validNombLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validNombLbl.setForeground(new java.awt.Color(213, 216, 222));
        validNombLbl.setText("Este campo es obligatorio");
        validNombLbl.setPreferredSize(new java.awt.Dimension(140, 23));
        validNombLbl.setRequestFocusEnabled(false);

        validDescLbl.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        validDescLbl.setForeground(new java.awt.Color(213, 216, 222));
        validDescLbl.setText("Este campo es obligatorio");
        validDescLbl.setPreferredSize(new java.awt.Dimension(140, 23));
        validDescLbl.setRequestFocusEnabled(false);

        javax.swing.GroupLayout informacionPnlLayout = new javax.swing.GroupLayout(informacionPnl);
        informacionPnl.setLayout(informacionPnlLayout);
        informacionPnlLayout.setHorizontalGroup(
            informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informacionPnlLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(informacionPnlLayout.createSequentialGroup()
                        .addComponent(cancelarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(guardarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(informacionPnlLayout.createSequentialGroup()
                        .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(descripcionLbl)
                            .addComponent(registroMsjLbl)
                            .addComponent(registroLbl)
                            .addComponent(descripcionSPn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(informacionPnlLayout.createSequentialGroup()
                                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(informacionPnlLayout.createSequentialGroup()
                                        .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tipoLbl)
                                            .addComponent(nombreLbl))
                                        .addGap(30, 30, 30))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, informacionPnlLayout.createSequentialGroup()
                                        .addComponent(validDescLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nombreTFd, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                                    .addComponent(validNombLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tipoCBx, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(168, 168, 168)))
                .addGap(32, 32, 32))
        );
        informacionPnlLayout.setVerticalGroup(
            informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(informacionPnlLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(registroLbl)
                .addGap(11, 11, 11)
                .addComponent(registroMsjLbl)
                .addGap(18, 18, 18)
                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreLbl)
                    .addComponent(nombreTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validNombLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipoLbl)
                    .addComponent(tipoCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(descripcionLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(descripcionSPn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validDescLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(informacionPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(opcionPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(informacionPnl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(opcionPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(informacionPnl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento ejecutado al hacer click en el boton,obteniendo el texto de los
     * campos validando que estos no esten vacios, manda llamar un metodo
     * dependiendo del texto asignado al boton.
     *
     * @param evt Evento al presionar el boton
     */
    private void guardarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBtnActionPerformed
        almacenando = true;
        if (nombreTFd.getText().isEmpty()
                || descripcionLbl.getText().isEmpty()
                || tipoCBx.getSelectedIndex() == 0) {
                //Mensaje de Campos vacíos.
                setMensaje("Debe ingresar los datos solicitados.");
                /*Se agregan los valores de los campos a la Lista, 
                 se mandan al metodo control.alta.*/
        }else {
            List<Object> atr = new ArrayList<>();
            atr.add(tipoCBx.getSelectedIndex());
            atr.add(nombreTFd.getText());
            atr.add(descripcionTAa.getText());
            buscando = true;
            problema = false;
            control.buscarTodos();
            if(!problema){
                if (guardarBtn.getText().equals("Guardar")) {
                    control.alta("evento", HelperEntidad.getEvento(atr));
                /*Se ejecute el en caso de que no tenga el boton el texto "Guardar"
                 /*Se agregan los valores de los campos a la Lista,se mandan 
                 al metodo control.modificacion*/
                } else {
                    atr.add(id);
                    control.modificacion("evento", HelperEntidad.getEvento(atr),
                            new HashMap<>());
                }
                limpiar();
                control.buscarTodos();
            }
        }
        almacenando = false;
    }//GEN-LAST:event_guardarBtnActionPerformed

    /**
     * Evento ejecutado al seleccionar el boton, Obteniendo un tipo de busqueda
     * de un combobox, mandando llamar el metodo buscarTipoCurso o buscarTodos.
     *
     * @param evt Evento al presionar el boton
     */
    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        int idTipo = tipoBuscarCBx.getSelectedIndex() - 1;
        if (idTipo <= 0) {
            control.buscarTodos();
        } else {
            control.buscarEventoPorTipo(idTipo);
        }
    }//GEN-LAST:event_buscarBtnActionPerformed

    /**
     * Evento ejecutado al presionar el botón, habilita y limpia los campos para
     * realizar un nuevo registro, modifica el texto contenido en los labels.
     *
     * @param evt Evento al presionar el botón
     */
    private void agregarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBtnActionPerformed
        if(informacionPnl.isVisible()){
            if (JOptionPane.showConfirmDialog(this, "La información que"
                    + " esta modificando se perdera,¿Aun así desea cancelarla?",
                    "Precaucion", JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE) == 0) {
                limpiar();
                informacionPnl.setVisible(true);
            }
        } else { 
            limpiar();
            informacionPnl.setVisible(true);
        }
    }//GEN-LAST:event_agregarBtnActionPerformed

    /**
     * Evento que se activa cuando se escribre sobre el campo, validando que no
     * se ingresen, delimitando el maximo de caracteres y permitir letras con
     * tilde.
     *
     * @param evt Evento al teclar sobre el campo
     */
    private void nombreTFdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTFdKeyTyped

        char car = evt.getKeyChar();
        if (nombreTFd.getText().length() >= 20) {
            evt.consume();
        }
        if ((car < 'a' || car > 'z') && (car < 'A' || car > 'Z')
                && car != 'á' //Minúsculas             
                && car != 'é'
                && car != 'í'
                && car != 'ó'
                && car != 'ú'
                && car != 'Á' //Mayúsculas             
                && car != 'É'
                && car != 'Í'
                && car != 'Ó'
                && car != 'Ú'
                && car != 'ñ'
                && car != 'Ñ'
                && (car != (char) KeyEvent.VK_SPACE)) {
            evt.consume();
        }
    }//GEN-LAST:event_nombreTFdKeyTyped

    /**
     * Evento ejecutado al perder un campo el foco, donde manda cambiar el borde
     * de color a rojo y colocando un mensaje para indicando que el campo es 
     * obligatorio
     * @param evt Evento al perder foco
     */
    private void nombreTFdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nombreTFdFocusLost
        buscando = true;
        problema = false;
        control.buscarTodos();
        if (nombreTFd.getText().isEmpty()) {
            nombreTFd.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(new Color(255, 106, 106)),
                    BORDER_ORIGINAL_NOMBRE));
            validNombLbl.setForeground(new Color(240, 0, 0));
            validNombLbl.setText("Este campo es obligatorio");
        } else if(problema){
            nombreTFd.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(new Color(255, 106, 106)),
                    BORDER_ORIGINAL_NOMBRE));
            validNombLbl.setForeground(new Color(240, 0, 0));
            validNombLbl.setText("Ya existe un evento con este nombre");
        }
    }//GEN-LAST:event_nombreTFdFocusLost

    /**
     * Evento ejecutado cuando se presiona el botón ejecutar, mandando el mensaje
     * de confirmacion para cancelar el registro o modificación. Se manda a llamar 
     * el metódo Limpiar.
     * @param evt Evento al presionar el botón
     */
    private void cancelarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarBtnActionPerformed
        if (JOptionPane.showConfirmDialog(this, "La información que"
            + " esta modificando se perdera,¿Aun así desea cancelarla?",
            "Precaucion", JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE) == 0) {
            limpiar();
        }
    }//GEN-LAST:event_cancelarBtnActionPerformed

    /**
     * Evento ejecutado al ganar un campo el foco, donde manda cambiar el borde
     * a la configuracion inicial.
     * @param evt Evento al perder foco
     */
    private void nombreTFdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nombreTFdFocusGained
        nombreTFd.setBorder(BORDER_ORIGINAL_NOMBRE);
        validNombLbl.setForeground(new Color(213, 216, 222));
    }//GEN-LAST:event_nombreTFdFocusGained

    /**
     * Evento ejecutado al ganar un campo el foco, donde manda cambiar el borde
     * a la configuracion inicial.
     * @param evt Evento al perder foco
     */
    private void descripcionTAaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_descripcionTAaFocusGained
        descripcionSPn.setBorder(BORDER_ORIGINAL_DESCRP);
        validDescLbl.setForeground(new Color(213, 216, 222));
    }//GEN-LAST:event_descripcionTAaFocusGained

    /**
     * Evento ejecutado al perder un campo el foco, donde manda cambiar el borde
     * de color a rojo y colocando un mensaje para indicando que el campo es 
     * obligatorio
     * @param evt Evento al perder foco
     */
    private void descripcionTAaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_descripcionTAaFocusLost
        if (descripcionTAa.getText().isEmpty()) {
            descripcionSPn.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(new Color(255, 106, 106)),
                    BORDER_ORIGINAL_DESCRP));
            validDescLbl.setForeground(new Color(240, 0, 0));
        }
    }//GEN-LAST:event_descripcionTAaFocusLost

    /**
     * Evento ejecutado al hace click en la tabla, se calcula en que columna y
     * renglon se llevo a cabo el click, en caso de ser en la columna eliminar
     * se presentara la opcion de eliminar el registro correspondiente al
     * renglon.
     *
     * @param evt Evento al hacer click
     */
    private void eventosTblMouseClicked(java.awt.event.MouseEvent evt) {
        //Obtenelos el renglon y columna donde se hizo click
        int row = eventosTbl.rowAtPoint(evt.getPoint());
        int col = eventosTbl.columnAtPoint(evt.getPoint());
        if (col == 0) {
            //Se obtiene el id de la columna no visible para realizar una 
            //busqueda especifica.
            if(informacionPnl.isVisible()){
                if (JOptionPane.showConfirmDialog(this, "La información que"
                    + " esta modificando se perdera ¿Aun así desea cancelarla?",
                    "Precaucion", JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE) == 0) {
                    int id = Integer.parseInt((String) model.getValueAt(row, 0));
                    limpiar();
                    control.buscar(id);
                    this.id = id;
                    guardarBtn.setText("Modificar");
                    eventosTbl.clearSelection();
                    informacionPnl.setVisible(true);
                }
            } else {
                int id = Integer.parseInt((String) model.getValueAt(row, 0));
                limpiar();
                control.buscar(id);
                this.id = id;
                guardarBtn.setText("Modificar");
                eventosTbl.clearSelection();
                informacionPnl.setVisible(true);
            }
            //Manda un mensaje de Confirmación sobre la eliminacion
        } else if (col == 2) {
            int id = Integer.parseInt((String)model.getValueAt(row, 0));
            if(control.buscarImplementaciones(id)){
                setMensaje("No se puede eliminar un evento que tenga implementaciones");
                model.setValueAt(false, row, 3);
                eventosTbl.clearSelection();
            }else if(guardarBtn.getText().equals("Modificar") && this.id == id){
                JOptionPane.showMessageDialog(this, "No se puede eliminar el evento que esta"
                    + " modificando actualmente.","Precaución", JOptionPane.ERROR_MESSAGE);
                model.setValueAt(false, row, 3);
                eventosTbl.clearSelection();
            }else if(JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar este registro?",
                    "Precaución", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0){
                control.baja(id);
                control.buscarTodos();
            } else {
                model.setValueAt(false, row, 3);
                eventosTbl.clearSelection();
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarBtn;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JButton cancelarBtn;
    private javax.swing.JLabel descripcionLbl;
    private javax.swing.JScrollPane descripcionSPn;
    private javax.swing.JTextArea descripcionTAa;
    private javax.swing.JScrollPane eventoSPn;
    private javax.swing.JTable eventosTbl;
    private javax.swing.JButton guardarBtn;
    private javax.swing.JPanel informacionPnl;
    private javax.swing.JLabel nombreLbl;
    private javax.swing.JTextField nombreTFd;
    private javax.swing.JLabel opcionLbl;
    private javax.swing.JLabel opcionMsjLbl;
    private javax.swing.JPanel opcionPnl;
    private javax.swing.JLabel registroLbl;
    private javax.swing.JLabel registroMsjLbl;
    private javax.swing.JLabel tablaMsjLbl;
    private javax.swing.JComboBox tipoBuscarCBx;
    private javax.swing.JLabel tipoBuscarLbl;
    private javax.swing.JComboBox tipoCBx;
    private javax.swing.JLabel tipoLbl;
    private javax.swing.JLabel validDescLbl;
    private javax.swing.JLabel validNombLbl;
    // End of variables declaration//GEN-END:variables

    public void llenarTodo(){
        control.buscarTodos();
        control.setClass(TipoEvento.class);
        control.buscarTodosLista(1);
        limpiar();
        tipoBuscarCBx.setSelectedIndex(0);
        control.setClass(Evento.class);
    }
    
    private void limpiar(){
        nombreTFd.setText("");
        descripcionTAa.setText("");
        tipoCBx.setSelectedIndex(0);
        nombreTFd.setBorder(BORDER_ORIGINAL_NOMBRE);
        descripcionSPn.setBorder(BORDER_ORIGINAL_DESCRP);
        tipoCBx.setBorder(BORDER_ORIGINAL_TIPO);
        validNombLbl.setForeground(new Color(213, 216, 222));
        validDescLbl.setForeground(new Color(213, 216, 222));
        guardarBtn.setText("Guardar");
        informacionPnl.setVisible(false);
    }
    
    /**
     * Metodo sobrescrito de la clase comunicador mensaje de confirmación de
     * registro exitoso, modificacion o eliminación.
     *
     * @param mensaje String con mensaje de confirmacion de registro.
     */
    @Override
    public void setMensaje(String mensaje) {
        if (!mensaje.equals("El Nombre del Curso ya Existe")) {
            JOptionPane.showMessageDialog(this, mensaje);
        } else {
            validNombLbl.setText("Este curso ya esta registrado");
            validNombLbl.setForeground(new Color(240, 0, 0));
            nombreTFd.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(new Color(255, 106, 106)),
                    BORDER_ORIGINAL_NOMBRE));
        }
    }

    /**
     * Metodo que recibe una matriz, donde se obtendran sus valores para
     * añadirlos a la modelo de la tabla, también se ocultara la columna id y se
     * le dara se redefinira el ancho de la columna 0.
     *
     * @param info Matriz String para vaciar en tabla
     */
    @Override
    public void setTabla(String[][] info) {
        if(buscando){
            buscando = false;
            if(info != null){
                for(int x=0;x<info.length;x++){
                    if(guardarBtn.getText().equals("Modificar") &&
                        info[x][0].equals(String.valueOf(id))){
                        continue;
                    }
                    if(info[x][1].equals(nombreTFd.getText())){
                        if(almacenando){
                            setMensaje("Ya existe un evento con ese nombre.\n"
                                + info[x][1]);
                        }
                        problema = true;
                        break;
                    }
                }
            }
        }else if(info == null){
            model.setRowCount(0);
            setMensaje("No se encontraron coincidencias");
        }else{
            model.setDataVector(info, titulosTabla);
            //Esconder columna ID
            TableColumn idTbc = eventosTbl.getColumnModel().getColumn(0);
            eventosTbl.getColumnModel().removeColumn(idTbc);
            eventosTbl.getColumnModel().getColumn(0).setPreferredWidth(170);
            TableColumn eliminarTbc = eventosTbl.getColumnModel().getColumn(2);
            eliminarTbc.setCellEditor(eventosTbl.getDefaultEditor(Boolean.class));
            eliminarTbc.setCellRenderer(eventosTbl.getDefaultRenderer(Boolean.class));
        }
    }

    /**
     * Metodo sobrescrito de la clase Comunicador
     *
     * @param info
     * @param i
     */
    @Override
    public void setLista(List info, int i) {
        tipoModel.removeAllElements();
        tipoBuscarModel.removeAllElements();
        for (int j = 0; j < info.size(); j++) {
            tipoModel.addElement(info.get(j));
            tipoBuscarModel.addElement(info.get(j));
        }
        tipoModel.insertElementAt(new TipoEvento(), 0);
        tipoBuscarModel.insertElementAt("BUSCAR TODOS", 0);
        tipoCBx.setSelectedIndex(0);
        tipoBuscarCBx.setSelectedIndex(0);
    }

    /**
     * Metodo sobrescrito de la clase comunicador que recibe una Lista con la
     * los resultados de una busqueda especifica y vaciarlo en los campos y
     * checkbox
     *
     * @param info Lista de Objeto con información de búsqueda.
     */
    @Override
    public void setInfo(List info) {
        id = (int) info.get(0);
        nombreTFd.setText((String) info.get(1));
        descripcionTAa.setText((String) info.get(2));
        if (info.get(3).equals("CONFERENCIA")) {
            tipoCBx.setSelectedIndex(1);
        } else if (info.get(3).equals("TALLER")){
            tipoCBx.setSelectedIndex(2);
        }else if (info.get(3).equals("CURSO")){
            tipoCBx.setSelectedIndex(3);
        }else if (info.get(3).equals("CURSO/TALLER")){
            tipoCBx.setSelectedIndex(4);
        }else if (info.get(3).equals("PLATICA")){
            tipoCBx.setSelectedIndex(5);
        }
        guardarBtn.setText("Modificar");
        
    }
    
    /**
     * Metodo sobrescrito de la clase comunicador que recibe un objeto con la
     * los resultados de una busqueda especifica, que no tiene ninguna
     * funcionalidad en este componente.
     *
     * @param evento Objecto de la entidad de tipo evento
     */
    @Override
    public void llenarDatos(Object implementacionEvento) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
