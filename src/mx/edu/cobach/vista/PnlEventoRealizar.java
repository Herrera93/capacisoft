/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mx.edu.cobach.vista;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import mx.edu.cobach.persistencia.entidades.Evento;
import mx.edu.cobach.persistencia.entidades.Departamento;
import mx.edu.cobach.persistencia.entidades.Direccion;
import mx.edu.cobach.persistencia.entidades.Empleado;
import mx.edu.cobach.persistencia.entidades.ImplementacionEvento;
import mx.edu.cobach.persistencia.entidades.Plantel;
import mx.edu.cobach.persistencia.entidades.Proveedor;
import mx.edu.cobach.persistencia.entidades.Puesto;
import mx.edu.cobach.persistencia.entidades.Sede;
import mx.edu.cobach.vista.controlador.HelperEntidad;
import mx.edu.cobach.vista.controlador.ImplementarEventoControlador;

/**
 * Esta clase mostrara la interfaz de los eventos a realizar, agregando el
 * proveedor del evento, la sede sus respectivas fechas igual o superiores a la
 * actual y la lista de asistencia
 *
 * @author liuts
 */
public class PnlEventoRealizar extends javax.swing.JPanel implements 
        Comunicador, FocusListener {

    /**
     * Creates new form PnlEventoRealizar
     */
    private static ImplementarEventoControlador control;
    private int eventoProgramarId;
    private final DefaultComboBoxModel sedeModel;
    private final DefaultComboBoxModel proveedorModel;
    private DefaultTableModel modelTablaEmF;
    private String[] titulosTablaEm = {"ID", "Numero",
        "Nombre del Empleado"};
    private Evento evento;
    private boolean cambio = false;
    private Capacisoft capacisoft;

    public PnlEventoRealizar(Capacisoft capacisoft) {
        this.capacisoft = capacisoft;
        initComponents();
        sedeModel = new DefaultComboBoxModel();
        proveedorModel = new DefaultComboBoxModel();

        modelTablaEmF = new DefaultTableModel(titulosTablaEm, 0);
        tablaLisFTbl.setModel(modelTablaEmF);
        tablaLisFTbl.setColumnSelectionAllowed(false);
        tablaLisFTbl.setDragEnabled(false);

        tipoSedeGCBx.setModel(sedeModel);
        nombreGCBx.setModel(proveedorModel);
        control = new ImplementarEventoControlador(this,
                ImplementacionEvento.class);

        fechaIDCh.getJCalendar().setMinSelectableDate(new Date());
        fechaTDCh.getJCalendar().setMinSelectableDate(new Date());
        tabla();
        informacionTP.setEnabledAt(0, true);
        informacionTP.setEnabledAt(1, false);
        informacionTP.setSelectedIndex(0);

        fechaIDCh.addFocusListener(this);
        fechaTDCh.addFocusListener(this);
        tipoSedeGCBx.addFocusListener(this);
        nombreGCBx.addFocusListener(this);

        validFechIniLbl.setVisible(false);
        validFechFinLbl.setVisible(false);
        validSedeLbl.setVisible(false);
        validProveedorLbl.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        informacionTP = new javax.swing.JTabbedPane();
        generalPnl = new javax.swing.JPanel();
        nombreGLbl = new javax.swing.JLabel();
        fechaILbl = new javax.swing.JLabel();
        fechaTLbl = new javax.swing.JLabel();
        tipoGLbl = new javax.swing.JLabel();
        sedeGLbl = new javax.swing.JLabel();
        nombrePrLbl = new javax.swing.JLabel();
        nombreGTFd = new javax.swing.JTextField();
        tipoGCBx = new javax.swing.JComboBox();
        tipoSedeGCBx = new javax.swing.JComboBox();
        nombreGCBx = new javax.swing.JComboBox();
        siguienteBtn = new javax.swing.JButton();
        fechaIDCh = new com.toedter.calendar.JDateChooser();
        fechaTDCh = new com.toedter.calendar.JDateChooser();
        agregarGLbl = new javax.swing.JLabel();
        notaGLbl = new javax.swing.JLabel();
        capacidadSedeGLbl = new javax.swing.JLabel();
        cancelarGBtn = new javax.swing.JButton();
        validFechFinLbl = new javax.swing.JLabel();
        validFechIniLbl = new javax.swing.JLabel();
        validSedeLbl = new javax.swing.JLabel();
        validProveedorLbl = new javax.swing.JLabel();
        listaPnl = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaLisFTbl = new javax.swing.JTable();
        guardarLABtn = new javax.swing.JButton();
        agregarLALbl = new javax.swing.JLabel();
        nota_LI_Lbl = new javax.swing.JLabel();
        seleccionLALbl = new javax.swing.JLabel();
        buscarLABtn = new javax.swing.JButton();
        listaAsistenciaLALbl = new javax.swing.JLabel();
        cancelarLABtn = new javax.swing.JButton();
        devolverLABtn = new javax.swing.JButton();
        totalEmpleadosLbl = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        informacionTP.setPreferredSize(new java.awt.Dimension(739, 472));

        nombreGLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreGLbl.setText("Nombre del evento:");

        fechaILbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fechaILbl.setText("Fecha inicial de evento*:");

        fechaTLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fechaTLbl.setText("Fecha de terminación del evento*:");

        tipoGLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoGLbl.setText("Tipo de evento:");

        sedeGLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sedeGLbl.setText("Sede del evento*:");

        nombrePrLbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombrePrLbl.setText("Nombre de Proveedor*:");

        nombreGTFd.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreGTFd.setEnabled(false);

        tipoGCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoGCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CONFERENCIA", "TALLER", "CURSO", "CURSO / TALLER", "PLATICA" }));
        tipoGCBx.setEnabled(false);

        tipoSedeGCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tipoSedeGCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        tipoSedeGCBx.setEnabled(false);
        tipoSedeGCBx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tipoSedeGCBxItemStateChanged(evt);
            }
        });

        nombreGCBx.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nombreGCBx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        nombreGCBx.setEnabled(false);
        nombreGCBx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                nombreGCBxItemStateChanged(evt);
            }
        });

        siguienteBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        siguienteBtn.setText("Siguiente");
        siguienteBtn.setEnabled(false);
        siguienteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteBtnActionPerformed(evt);
            }
        });

        fechaIDCh.setDateFormatString("dd/MM/yyyy");
        fechaIDCh.setEnabled(false);

        fechaTDCh.setDateFormatString("dd/MM/yyyy");
        fechaTDCh.setEnabled(false);

        agregarGLbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        agregarGLbl.setText("Agregar");

        notaGLbl.setText("Ingrese la información a almacenar");

        capacidadSedeGLbl.setText("Capacidad de la sede:");
        capacidadSedeGLbl.setEnabled(false);

        cancelarGBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelarGBtn.setText("Cancelar");
        cancelarGBtn.setEnabled(false);
        cancelarGBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarGBtnActionPerformed(evt);
            }
        });

        validFechFinLbl.setForeground(new java.awt.Color(240, 0, 0));
        validFechFinLbl.setText("Este campo es obligatorio");

        validFechIniLbl.setForeground(new java.awt.Color(240, 0, 0));
        validFechIniLbl.setText("Este campo es obligatorio");

        validSedeLbl.setForeground(new java.awt.Color(240, 0, 0));
        validSedeLbl.setText("Este campo es obligatorio");

        validProveedorLbl.setForeground(new java.awt.Color(240, 0, 0));
        validProveedorLbl.setText("Este campo es obligatorio");

        javax.swing.GroupLayout generalPnlLayout = new javax.swing.GroupLayout(generalPnl);
        generalPnl.setLayout(generalPnlLayout);
        generalPnlLayout.setHorizontalGroup(
            generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalPnlLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generalPnlLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cancelarGBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(siguienteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))
                    .addGroup(generalPnlLayout.createSequentialGroup()
                        .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(agregarGLbl)
                            .addComponent(notaGLbl)
                            .addGroup(generalPnlLayout.createSequentialGroup()
                                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nombreGLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tipoGLbl))
                                .addGap(28, 28, 28)
                                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tipoGCBx, 0, 458, Short.MAX_VALUE)
                                    .addComponent(nombreGTFd))))
                        .addContainerGap(135, Short.MAX_VALUE))))
            .addGroup(generalPnlLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(generalPnlLayout.createSequentialGroup()
                        .addComponent(fechaILbl)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(generalPnlLayout.createSequentialGroup()
                        .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(generalPnlLayout.createSequentialGroup()
                                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nombrePrLbl)
                                    .addComponent(sedeGLbl)
                                    .addComponent(capacidadSedeGLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9)
                                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(validProveedorLbl)
                                    .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(tipoSedeGCBx, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(nombreGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(validSedeLbl)))
                            .addGroup(generalPnlLayout.createSequentialGroup()
                                .addComponent(fechaTLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(validFechFinLbl)
                                    .addComponent(fechaTDCh, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(generalPnlLayout.createSequentialGroup()
                                .addGap(220, 220, 220)
                                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(validFechIniLbl)
                                    .addComponent(fechaIDCh, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 132, Short.MAX_VALUE))))
        );
        generalPnlLayout.setVerticalGroup(
            generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalPnlLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(agregarGLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notaGLbl)
                .addGap(22, 22, 22)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreGTFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreGLbl))
                .addGap(18, 18, 18)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tipoGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoGLbl))
                .addGap(18, 18, 18)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fechaIDCh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fechaILbl))
                .addGap(7, 7, 7)
                .addComponent(validFechIniLbl)
                .addGap(18, 18, 18)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fechaTLbl)
                    .addComponent(fechaTDCh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(validFechFinLbl)
                .addGap(28, 28, 28)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sedeGLbl)
                    .addComponent(tipoSedeGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(capacidadSedeGLbl)
                    .addComponent(validSedeLbl))
                .addGap(27, 27, 27)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombrePrLbl)
                    .addComponent(nombreGCBx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(validProveedorLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(generalPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelarGBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(siguienteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );

        informacionTP.addTab("General", generalPnl);

        tablaLisFTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Numero del empleado", "Nombre del empleado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaLisFTbl.setEnabled(false);
        jScrollPane5.setViewportView(tablaLisFTbl);

        guardarLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        guardarLABtn.setText("Guardar");
        guardarLABtn.setEnabled(false);
        guardarLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarLABtnActionPerformed(evt);
            }
        });

        agregarLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        agregarLALbl.setText("Agregar");

        nota_LI_Lbl.setText("Ingrese la información a almacenar");

        seleccionLALbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        seleccionLALbl.setText("Seleccione la opcion de generar lista de asistencia para agregar los empleados que desee que asistan al evento");

        buscarLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buscarLABtn.setText("Generar lista de asistencia");
        buscarLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarLABtnActionPerformed(evt);
            }
        });

        listaAsistenciaLALbl.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        listaAsistenciaLALbl.setText("Lista de asistencia");

        cancelarLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cancelarLABtn.setText("Cancelar");
        cancelarLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarLABtnActionPerformed(evt);
            }
        });

        devolverLABtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        devolverLABtn.setText("Regresar");
        devolverLABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                devolverLABtnActionPerformed(evt);
            }
        });

        totalEmpleadosLbl.setText("Total de empleados en la lista:");

        javax.swing.GroupLayout listaPnlLayout = new javax.swing.GroupLayout(listaPnl);
        listaPnl.setLayout(listaPnlLayout);
        listaPnlLayout.setHorizontalGroup(
            listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listaPnlLayout.createSequentialGroup()
                .addGap(298, 298, 298)
                .addComponent(listaAsistenciaLALbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(listaPnlLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listaPnlLayout.createSequentialGroup()
                        .addComponent(seleccionLALbl, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listaPnlLayout.createSequentialGroup()
                        .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nota_LI_Lbl)
                            .addComponent(agregarLALbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                        .addComponent(devolverLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(cancelarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(guardarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))
                    .addGroup(listaPnlLayout.createSequentialGroup()
                        .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buscarLABtn)
                            .addComponent(totalEmpleadosLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        listaPnlLayout.setVerticalGroup(
            listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listaPnlLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(agregarLALbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nota_LI_Lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seleccionLALbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buscarLABtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(listaAsistenciaLALbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalEmpleadosLbl)
                .addGap(12, 12, 12)
                .addGroup(listaPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelarLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(devolverLABtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45))
        );

        informacionTP.addTab("Lista de asistencia", listaPnl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(informacionTP, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(informacionTP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Evento ejecutado al hacer click se buscara al empleado dependiendo de del
     * campo seleccionado
     *
     * @param evt Evento al presionar el boton
     */
    private void buscarLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarLABtnActionPerformed
        ListaAsistencia lista = new ListaAsistencia(this);
        capacisoft.setEnabled(false);
        lista.setVisible(true);
        String[][] matriz = new String[modelTablaEmF.
                getRowCount()][modelTablaEmF.getColumnCount()];
        for (int k = 0; k < modelTablaEmF.getRowCount(); k++) {
            for (int j = 0; j < modelTablaEmF.getColumnCount(); j++) {
                matriz[k][j] = modelTablaEmF.getValueAt(k, j) + "";
            }
        }
        if (tablaLisFTbl.getRowCount() > 0) {
            lista.mandarTabla(matriz);
        }

    }//GEN-LAST:event_buscarLABtnActionPerformed
    /**
     * Evento ejecutado al hacer click mandando a un metodo que guarde la
     * informacion o la modificque.
     *
     * @param evt Evento al presionar el boton
     */
    private void guardarLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarLABtnActionPerformed
        guarMod();
    }//GEN-LAST:event_guardarLABtnActionPerformed
    /**
     * Evento ejecutado al hacer click mandando a un metodo que guarde la
     * informacion o la modificque.
     *
     * @param evt Evento al presionar el boton
     */
    private void siguienteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteBtnActionPerformed

        informacionTP.setEnabledAt(0, false);
        informacionTP.setEnabledAt(1, true);
        informacionTP.setSelectedIndex(1);
    }//GEN-LAST:event_siguienteBtnActionPerformed
    /**
     * Evento ejecutado para obtener y mostrar la capacidad de la sede
     *
     * @param evt
     */
    private void tipoSedeGCBxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tipoSedeGCBxItemStateChanged
        if ((Sede) tipoSedeGCBx.getSelectedItem() != null) {
            if (tipoSedeGCBx.getSelectedItem().toString().compareTo("") != 0) {
                this.cambio = true;
                capacidadSedeGLbl.setText("Capacidad de la sede: "
                        + ((Sede) tipoSedeGCBx.getSelectedItem()).
                                getCapacidad());
            } else {
                capacidadSedeGLbl.setText("Capacidad de la sede: ");
            }
        }
    }//GEN-LAST:event_tipoSedeGCBxItemStateChanged

    /**
     * Este metodo sirve para cancelar el registro o la modificacion de un
     * evento
     *
     * @param evt
     */
    private void cancelarGBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarGBtnActionPerformed
        cancelar();
    }//GEN-LAST:event_cancelarGBtnActionPerformed
    /**
     * Este metodo sirve para cancelar el registro o la modificacion de un
     * evento
     *
     * @param evt
     */
    private void cancelarLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarLABtnActionPerformed
        cancelar();
    }//GEN-LAST:event_cancelarLABtnActionPerformed

    /**
     * Este metodo sirve para cancelar el proceso de registro o modificacion de
     * un evento
     */
    private void cancelar() {
        int opcion;
        if (guardarLABtn.getText() == "Guardar") {
            opcion = JOptionPane.showConfirmDialog(this, "¿Desea cancelar el "
                    + "registro del evento?", "Precaucion",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        } else {
            opcion = JOptionPane.showConfirmDialog(this, "¿Desea cancelar la "
                    + "modificacion del evento?", "Precaucion",
                    JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        }
        if (opcion == 0) {
            this.setVisible(false);
            limpiarCampos();
        }
    }

    /**
     * Metodo para indicar que a habido un cambio en la el panel
     *
     * @param evt
     */
    private void nombreGCBxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nombreGCBxItemStateChanged
        if ((Proveedor) nombreGCBx.getSelectedItem() != null) {
            if (((Proveedor) nombreGCBx.getSelectedItem()).getId() != null) {
                this.cambio = true;
            }
        }
    }//GEN-LAST:event_nombreGCBxItemStateChanged

    private void devolverLABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_devolverLABtnActionPerformed
        informacionTP.setEnabledAt(0, true);
        informacionTP.setEnabledAt(1, false);
        informacionTP.setSelectedIndex(0);
    }//GEN-LAST:event_devolverLABtnActionPerformed

    /**
     * Metodo que permite mandar a obtener la informacion de todos las sedes y
     * proveedores registrados informacion o la modificque.
     *
     * @param evt Evento al presionar el boton
     */
    public void llenarTodo() {
        tabla();
        control
                .setClass(Sede.class
                );
        control.buscarTodosLista(
                1);
        control.setClass(Proveedor.class
        );
        control.buscarTodosLista(
                2);
        cambio = false;
    }

    /**
     * Metodo que recibe el evento del catalogo para llenar parte de la
     * informacion general del evento a llevar a cabo
     *
     * @param evento
     */
    public void llenarEvento(Evento evento) {
        this.evento = evento;
        agregarGLbl.setText("Agregar evento a realizar");
        agregarLALbl.setText("Agregar evento a realizar");
        guardarLABtn.setText("Guardar");
        nombreGTFd.setText(evento.getNombre());
        if (evento.getTipoEvento().equals("CONFERENCIA")) {
            tipoGCBx.setSelectedIndex(0);
        } else if (evento.getTipoEvento().equals("TALLER")) {
            tipoGCBx.setSelectedIndex(1);
        } else if (evento.getTipoEvento().equals("CURSO")) {
            tipoGCBx.setSelectedIndex(2);
        } else if (evento.getTipoEvento().equals("CURSO / TALLER")) {
            tipoGCBx.setSelectedIndex(3);
        } else if (evento.getTipoEvento().equals("PLATICA")) {
            tipoGCBx.setSelectedIndex(4);
        }
        informacionTP.setEnabledAt(0, true);
        informacionTP.setEnabledAt(1, false);
        informacionTP.setSelectedIndex(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel agregarGLbl;
    private javax.swing.JLabel agregarLALbl;
    private javax.swing.JButton buscarLABtn;
    private javax.swing.JButton cancelarGBtn;
    private javax.swing.JButton cancelarLABtn;
    private javax.swing.JLabel capacidadSedeGLbl;
    private javax.swing.JButton devolverLABtn;
    private com.toedter.calendar.JDateChooser fechaIDCh;
    private javax.swing.JLabel fechaILbl;
    private com.toedter.calendar.JDateChooser fechaTDCh;
    private javax.swing.JLabel fechaTLbl;
    private javax.swing.JPanel generalPnl;
    private javax.swing.JButton guardarLABtn;
    private javax.swing.JTabbedPane informacionTP;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel listaAsistenciaLALbl;
    private javax.swing.JPanel listaPnl;
    private javax.swing.JComboBox nombreGCBx;
    private javax.swing.JLabel nombreGLbl;
    private javax.swing.JTextField nombreGTFd;
    private javax.swing.JLabel nombrePrLbl;
    private javax.swing.JLabel notaGLbl;
    private javax.swing.JLabel nota_LI_Lbl;
    private javax.swing.JLabel sedeGLbl;
    private javax.swing.JLabel seleccionLALbl;
    private javax.swing.JButton siguienteBtn;
    private javax.swing.JTable tablaLisFTbl;
    private javax.swing.JComboBox tipoGCBx;
    private javax.swing.JLabel tipoGLbl;
    private javax.swing.JComboBox tipoSedeGCBx;
    private javax.swing.JLabel totalEmpleadosLbl;
    private javax.swing.JLabel validFechFinLbl;
    private javax.swing.JLabel validFechIniLbl;
    private javax.swing.JLabel validProveedorLbl;
    private javax.swing.JLabel validSedeLbl;
    // End of variables declaration//GEN-END:variables
    /**
     * Metodo sobrescrito de la clase comunicador mensaje de confirmación de
     * registro o modificacion exitosa.
     *
     * @param mensaje String con mensaje de confirmacion de registro.
     */
    @Override
    public void setMensaje(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje);
    }

    /**
     * Metodo que recibe una matriz, donde se obtendran sus valores para
     * añadirlos a la modelo de la tabla, también se ocultara la columna id y se
     * le dara se redefinira el ancho de la columna 0.
     *
     * @param info Matriz String para vaciar en tabla
     */
    @Override
    public void setTabla(String[][] info) {
        if (info[0][0].contains("TLE1")) {
            info[0][0] = info[0][0].replaceAll("TLE1", "");
            modelTablaEmF.setDataVector(info, titulosTablaEm);
            TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
            tablaLisFTbl.getColumnModel().removeColumn(tc);
            totalEmpleadosLbl.setText("Total de empleados en la lista: " + 
                    tablaLisFTbl.getRowCount() + "");
        }
    }

    /**
     * Agrega los datos al modelo de la tabla, también se ocultara la columna id
     * y se le dara se redefinira el ancho de la columna 0.
     *
     * @param info
     */
    private void tabla() {

        modelTablaEmF.setDataVector(null, titulosTablaEm);
        modelTablaEmF = new DefaultTableModel(titulosTablaEm, 0);
        tablaLisFTbl.setModel(modelTablaEmF);
        TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
        tablaLisFTbl.getColumnModel().removeColumn(tc);
        tablaLisFTbl.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tablaLisFTbl.getColumnModel().getColumn(0).setPreferredWidth(10);
        tablaLisFTbl.getColumnModel().getColumn(1).setPreferredWidth(160);
        tablaLisFTbl.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
    }

    /**
     * Metodo sobrescrito de la clase Comunicador
     *
     * @param info
     * @param i
     */
    @Override
    public void setInfo(List info) {
        if (info.get(0).equals("Desbloquear")) {
            capacisoft.setEnabled(true);
            capacisoft.setVisible(true);
        }
    }

    /**
     * Metodo sobrescrito de la clase comunicador que recibe una Lista con la
     * los resultados de una busqueda especifica y vaciarlo en los campos y
     * checkbox
     *
     * @param info Lista de Objeto con información de búsqueda.
     */
    @Override
    public void setLista(List info, int i) {
        if (info.isEmpty()) {
            return;
        }
        switch (i) {
            case 1:
                sedeModel.removeAllElements();
                sedeModel.addElement(new Sede(""));
                for (Object j : info) {
                    sedeModel.addElement(j);
                }
                break;
            case 2:
                proveedorModel.removeAllElements();
                proveedorModel.addElement(new Proveedor("", "", "", ""));
                for (Object j : info) {
                    proveedorModel.addElement(j);
                }
                break;
        }
    }

    /**
     * Establece una visibilidad de las opciones del panel del usuario
     *
     * @param visibilidad
     */
    public void visibilidad(boolean visibilidad) {
        fechaIDCh.setEnabled(visibilidad);
        fechaTDCh.setEnabled(visibilidad);
        tipoSedeGCBx.setEnabled(visibilidad);
        nombreGCBx.setEnabled(visibilidad);
        siguienteBtn.setEnabled(visibilidad);
        cancelarGBtn.setEnabled(visibilidad);
        guardarLABtn.setEnabled(visibilidad);
        devolverLABtn.setEnabled(visibilidad);
    }

    /**
     * Establece una opcion para guardar o modificar la informacion para
     * mandarla a la base de datos
     *
     * @param visibilidad
     */
    private void guarMod() {
        HashSet<Empleado> lisEmpleado = new HashSet();
        List<Object> atributos = new ArrayList();
        if (validacion() == false) {
            if (guardarLABtn.getText().equals("Modificar")) {
                atributos.add(eventoProgramarId);
            }
            atributos.add(evento);
            atributos.add(fechaIDCh.getDate());
            atributos.add(fechaTDCh.getDate());
            atributos.add(true);
            atributos.add(tipoSedeGCBx.getSelectedItem());
            atributos.add(nombreGCBx.getSelectedItem());
            for (int x = 0; x < tablaLisFTbl.getRowCount(); x++) {
                Empleado empleado = new Empleado();
                empleado.setId(Integer.parseInt((String) modelTablaEmF.
                        getValueAt(x, 0)));
                lisEmpleado.add(empleado);
            }
            atributos.add(lisEmpleado);
            control.setClass(ImplementacionEvento.class);
            if (guardarLABtn.getText().equals("Guardar")) {
                control.alta(HelperEntidad.
                        getImplementarEvento(atributos, "Guardar"));
            } else {
                control.alta(HelperEntidad.
                        getImplementarEvento(atributos, "Modificar"));
            }
            this.cambio = false;
            limpiarCampos();
        }
    }

    /**
     * Este metodo obtiene la informacion del evento a realizar del
     * PnlProgramarEvento para que este la pueda modificar
     *
     * @param info
     */
    public void obtenerMod(List info) {
        ImplementacionEvento eventoImplementado = new ImplementacionEvento();
        agregarGLbl.setText("Modificar evento a realizar");
        agregarLALbl.setText("Modificar evento a realizar");
        guardarLABtn.setText("Modificar");
        eventoProgramarId = Integer.parseInt(info.get(0).toString());
        evento = (Evento) info.get(1);
        nombreGTFd.setText(info.get(2).toString());
        if (info.get(4).equals("CONFERENCIA")) {
            tipoGCBx.setSelectedIndex(0);
        } else if (info.get(4).equals("TALLER")) {
            tipoGCBx.setSelectedIndex(1);
        } else if (info.get(4).equals("CURSO")) {
            tipoGCBx.setSelectedIndex(2);
        } else if (info.get(4).equals("CURSO / TALLER")) {
            tipoGCBx.setSelectedIndex(3);
        } else if (info.get(4).equals("PLATICA")) {
            tipoGCBx.setSelectedIndex(4);
        }
        fechaIDCh.setDate((Date) info.get(5));
        fechaTDCh.setDate((Date) info.get(6));
        sedeModel.setSelectedItem(info.get(7));
        proveedorModel.setSelectedItem(info.get(8));

        eventoImplementado.setEmpleados((Set<Empleado>) info.get(9));
        Iterator itr = eventoImplementado.getEmpleados().iterator();
        Object[][] tableData = new Object[eventoImplementado.getEmpleados().
                size()][modelTablaEmF.getColumnCount()];

        for (int x = 0; x < eventoImplementado.getEmpleados().size(); x++) {
            Empleado empleado = (Empleado) itr.next();

            tableData[x][0] = empleado.getId() + "";
            tableData[x][1] = empleado.getNumero() + "";
            if (empleado.getSegundoNombre() == null) {
                tableData[x][2] = empleado.getPrimerNombre() + " " + 
                        empleado.getApellidoPaterno() + " " + empleado.
                                getApellidoMaterno();

            } else {
                tableData[x][2] = empleado.getPrimerNombre() + " " + 
                        empleado.getSegundoNombre() + " " + empleado.
                                getApellidoPaterno() + " " + empleado.
                                        getApellidoMaterno();

            }
        }
        modelTablaEmF.setDataVector(tableData, titulosTablaEm);
        TableColumn tc = tablaLisFTbl.getColumnModel().getColumn(0);
        tablaLisFTbl.getColumnModel().removeColumn(tc);
        informacionTP.setEnabledAt(0, true);
        informacionTP.setEnabledAt(1, false);
        informacionTP.setSelectedIndex(0);
        tablaLisFTbl.setEnabled(true);
        totalEmpleadosLbl.setText("Total de empleados en la lista: " + tablaLisFTbl.getRowCount() + "");
    }

    /**
     * Metodo que regresa un true si se encontraron informacion sin completar, o
     * errores en la informacion, como es mostrado en el caso de prueba
     *
     * @return
     */
    private boolean validacion() {
        if (fechaIDCh.getDate() == null) {
            JOptionPane.showMessageDialog(this, "No lleno el campo de la fecha"
                    + " inicial");
            return true;
        } else if (fechaTDCh.getDate() == null) {
            JOptionPane.showMessageDialog(this, "No lleno el campo de la fecha"
                    + " Final");
            return true;
        } else if (tipoSedeGCBx.getSelectedItem().toString().equals("")) {
            JOptionPane.showMessageDialog(this, "No selecciono una sede");
            return true;
        } else if (((Proveedor) nombreGCBx.getSelectedItem()).getId() == null) {
            JOptionPane.showMessageDialog(this, "No selecciono un proveedor");
            return true;
        } else if (tablaLisFTbl.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No se encontraron empleados"
                    + "en la lista de asistencia");
            return true;
        } else if (tablaLisFTbl.
                getRowCount() > ((Sede) tipoSedeGCBx.getSelectedItem()).
                        getCapacidad()) {
            if (JOptionPane.showConfirmDialog(this, "La lista de asistencia"
                    + " es mas grande que la capacidad que puede soportar"
                    + " la sede ¿Desea aun así realizarla ahí ?", "Precaucion",
                    JOptionPane.YES_NO_OPTION, JOptionPane.
                            WARNING_MESSAGE) == 0) {
                return false;
            } else {
                return true;
            }
        } else if (fechaIDCh.getDate().after(fechaTDCh.getDate())) {
            JOptionPane.showMessageDialog(this, "Error en las fechas de evento."
                    + "La fecha de inicio es mayor que"
                    + " la fecha de terminacion");
            return true;
        }
        return false;
    }

    /**
     * Este metodo sirve para limpiar los campos del panel de evento
     */
    public void limpiarCampos() {
        this.cambio = false;
        this.setVisible(false);
        fechaIDCh.setDate(null);
        fechaTDCh.setDate(null);
        tabla();
        totalEmpleadosLbl.setText("Total de empleados en la lista: "
                + tablaLisFTbl.getRowCount() + "");

    }

    /**
     * Variable que regresa un booleano si se le agrego informacion al evento o
     * modifico
     *
     * @return regresa un booleano que indica si el evento sufrio cambios
     */
    public boolean isCambio() {
        return this.cambio;
    }
    /**
     * Metodo que regresa todos los atributos de un evento
     * @param evento 
     */
    @Override
    public void llenarDatos(Object evento) {
    }
    /**
     * Este metodo detecta que el usuario perdio el foco de un campo y no 
     * escribio nada en el avisandole que el campo es obligatorio
     * @param e 
     */
    @Override
    public void focusLost(FocusEvent e) {
        Object fuente = e.getSource();
        if (fuente == fechaIDCh) {
            if (fechaIDCh.getDate() == null) {
                validFechIniLbl.setVisible(true);
            }
        } else if (fuente == fechaTDCh) {
            if (fechaIDCh.getDate() == null) {
                validFechFinLbl.setVisible(true);
            }
        } else if (fuente == tipoSedeGCBx) {
            if (tipoSedeGCBx.getSelectedItem().toString().equals("")) {
                validSedeLbl.setVisible(true);
            }
        } else if (fuente == nombreGCBx) {
            if (((Proveedor) nombreGCBx.getSelectedItem()).getId() == null) {
                validProveedorLbl.setVisible(true);
            }
        }
    }
    /**
     * Este metodo detecta que el usuario esta modificando un campo y hace el 
     * label de recordatorio invisible
     * @param e 
     */
    @Override
    public void focusGained(FocusEvent e) {
        Object fuente = e.getSource();
        if (fuente == fechaIDCh) {
            validFechIniLbl.setVisible(false);
        } else if (fuente == fechaTDCh) {
            validFechFinLbl.setVisible(false);
        } else if (fuente == tipoSedeGCBx) {
            validSedeLbl.setVisible(false);
        } else if (fuente == nombreGCBx) {
            validProveedorLbl.setVisible(false);
        }
    }

}
